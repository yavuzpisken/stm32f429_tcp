
tcp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c24  0800f88c  0800f88c  0001f88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124b0  080124b0  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  080124b0  080124b0  000224b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124b8  080124b8  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124b8  080124b8  000224b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124bc  080124bc  000224bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080124c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          00008470  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200084f8  200084f8  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017af9  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004cc4  00000000  00000000  00047bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001210  00000000  00000000  0004c8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e53  00000000  00000000  0004dac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f57e  00000000  00000000  0004e91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021784  00000000  00000000  0007de99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e8833  00000000  00000000  0009f61d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005000  00000000  00000000  00187e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0018ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f874 	.word	0x0800f874

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800f874 	.word	0x0800f874

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fe9e 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f80a 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f878 	bl	800069c <MX_GPIO_Init>
  MX_LWIP_Init();
 80005ac:	f002 ff90 	bl	80034d0 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_server_init();
 80005b0:	f000 faa4 	bl	8000afc <tcp_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80005b4:	f003 f8d8 	bl	8003768 <MX_LWIP_Process>
 80005b8:	e7fc      	b.n	80005b4 <main+0x18>
	...

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00e fa95 	bl	800eafa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <SystemClock_Config+0xd8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a2a      	ldr	r2, [pc, #168]	; (8000694 <SystemClock_Config+0xd8>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b28      	ldr	r3, [pc, #160]	; (8000694 <SystemClock_Config+0xd8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xdc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a24      	ldr	r2, [pc, #144]	; (8000698 <SystemClock_Config+0xdc>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <SystemClock_Config+0xdc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800061c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000630:	23b4      	movs	r3, #180	; 0xb4
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fad5 	bl	8002bf0 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 f922 	bl	8000894 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000650:	f002 fa7e 	bl	8002b50 <HAL_PWREx_EnableOverDrive>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800065a:	f000 f91b 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2105      	movs	r1, #5
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fd2f 	bl	80030e0 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000688:	f000 f904 	bl	8000894 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	; 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
 80006b6:	4b70      	ldr	r3, [pc, #448]	; (8000878 <MX_GPIO_Init+0x1dc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a6f      	ldr	r2, [pc, #444]	; (8000878 <MX_GPIO_Init+0x1dc>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b6d      	ldr	r3, [pc, #436]	; (8000878 <MX_GPIO_Init+0x1dc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	61bb      	str	r3, [r7, #24]
 80006cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	4b69      	ldr	r3, [pc, #420]	; (8000878 <MX_GPIO_Init+0x1dc>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a68      	ldr	r2, [pc, #416]	; (8000878 <MX_GPIO_Init+0x1dc>)
 80006d8:	f043 0320 	orr.w	r3, r3, #32
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b66      	ldr	r3, [pc, #408]	; (8000878 <MX_GPIO_Init+0x1dc>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0320 	and.w	r3, r3, #32
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b62      	ldr	r3, [pc, #392]	; (8000878 <MX_GPIO_Init+0x1dc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a61      	ldr	r2, [pc, #388]	; (8000878 <MX_GPIO_Init+0x1dc>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b5f      	ldr	r3, [pc, #380]	; (8000878 <MX_GPIO_Init+0x1dc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b5b      	ldr	r3, [pc, #364]	; (8000878 <MX_GPIO_Init+0x1dc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a5a      	ldr	r2, [pc, #360]	; (8000878 <MX_GPIO_Init+0x1dc>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b58      	ldr	r3, [pc, #352]	; (8000878 <MX_GPIO_Init+0x1dc>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b54      	ldr	r3, [pc, #336]	; (8000878 <MX_GPIO_Init+0x1dc>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a53      	ldr	r2, [pc, #332]	; (8000878 <MX_GPIO_Init+0x1dc>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b51      	ldr	r3, [pc, #324]	; (8000878 <MX_GPIO_Init+0x1dc>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b4d      	ldr	r3, [pc, #308]	; (8000878 <MX_GPIO_Init+0x1dc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a4c      	ldr	r2, [pc, #304]	; (8000878 <MX_GPIO_Init+0x1dc>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b4a      	ldr	r3, [pc, #296]	; (8000878 <MX_GPIO_Init+0x1dc>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b46      	ldr	r3, [pc, #280]	; (8000878 <MX_GPIO_Init+0x1dc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a45      	ldr	r2, [pc, #276]	; (8000878 <MX_GPIO_Init+0x1dc>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b43      	ldr	r3, [pc, #268]	; (8000878 <MX_GPIO_Init+0x1dc>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800077c:	483f      	ldr	r0, [pc, #252]	; (800087c <MX_GPIO_Init+0x1e0>)
 800077e:	f002 f9cd 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2140      	movs	r1, #64	; 0x40
 8000786:	483e      	ldr	r0, [pc, #248]	; (8000880 <MX_GPIO_Init+0x1e4>)
 8000788:	f002 f9c8 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800078c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000792:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4838      	ldr	r0, [pc, #224]	; (8000884 <MX_GPIO_Init+0x1e8>)
 80007a4:	f002 f80e 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007a8:	2308      	movs	r3, #8
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	4833      	ldr	r0, [pc, #204]	; (8000888 <MX_GPIO_Init+0x1ec>)
 80007bc:	f002 f802 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80007c0:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4828      	ldr	r0, [pc, #160]	; (800087c <MX_GPIO_Init+0x1e0>)
 80007da:	f001 fff3 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007f0:	2307      	movs	r3, #7
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4824      	ldr	r0, [pc, #144]	; (800088c <MX_GPIO_Init+0x1f0>)
 80007fc:	f001 ffe2 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000800:	2340      	movs	r3, #64	; 0x40
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	481a      	ldr	r0, [pc, #104]	; (8000880 <MX_GPIO_Init+0x1e4>)
 8000818:	f001 ffd4 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	4814      	ldr	r0, [pc, #80]	; (8000880 <MX_GPIO_Init+0x1e4>)
 8000830:	f001 ffc8 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000834:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000846:	230a      	movs	r3, #10
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	480f      	ldr	r0, [pc, #60]	; (8000890 <MX_GPIO_Init+0x1f4>)
 8000852:	f001 ffb7 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <MX_GPIO_Init+0x1f4>)
 800086c:	f001 ffaa 	bl	80027c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3730      	adds	r7, #48	; 0x30
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800
 800087c:	40020400 	.word	0x40020400
 8000880:	40021800 	.word	0x40021800
 8000884:	40020800 	.word	0x40020800
 8000888:	40021400 	.word	0x40021400
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40020000 	.word	0x40020000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <HAL_MspInit+0x4c>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x4c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 fd22 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return 1;
 8000948:	2301      	movs	r3, #1
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <_kill>:

int _kill(int pid, int sig)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <_kill+0x20>)
 8000960:	2216      	movs	r2, #22
 8000962:	601a      	str	r2, [r3, #0]
  return -1;
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	200084e8 	.word	0x200084e8

08000978 <_exit>:

void _exit (int status)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ffe5 	bl	8000954 <_kill>
  while (1) {}    /* Make sure we hang here */
 800098a:	e7fe      	b.n	800098a <_exit+0x12>

0800098c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	e00a      	b.n	80009b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800099e:	f3af 8000 	nop.w
 80009a2:	4601      	mov	r1, r0
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1c5a      	adds	r2, r3, #1
 80009a8:	60ba      	str	r2, [r7, #8]
 80009aa:	b2ca      	uxtb	r2, r1
 80009ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3301      	adds	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dbf0      	blt.n	800099e <_read+0x12>
  }

  return len;
 80009bc:	687b      	ldr	r3, [r7, #4]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	e009      	b.n	80009ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3301      	adds	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dbf1      	blt.n	80009d8 <_write+0x12>
  }
  return len;
 80009f4:	687b      	ldr	r3, [r7, #4]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <_close>:

int _close(int file)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a26:	605a      	str	r2, [r3, #4]
  return 0;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <_isatty>:

int _isatty(int file)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b087      	sub	sp, #28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a70:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <_sbrk+0x5c>)
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <_sbrk+0x60>)
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d102      	bne.n	8000a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <_sbrk+0x64>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <_sbrk+0x68>)
 8000a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d205      	bcs.n	8000aa4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <_sbrk+0x6c>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a06      	ldr	r2, [pc, #24]	; (8000acc <_sbrk+0x64>)
 8000ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	371c      	adds	r7, #28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	20030000 	.word	0x20030000
 8000ac8:	00000400 	.word	0x00000400
 8000acc:	200000a4 	.word	0x200000a4
 8000ad0:	200084f8 	.word	0x200084f8
 8000ad4:	200084e8 	.word	0x200084e8

08000ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <SystemInit+0x20>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <SystemInit+0x20>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <tcp_server_init>:
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es);
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es);
static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es);


void tcp_server_init(){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
	struct tcp_pcb *tpcb;
	tpcb = tcp_new();
 8000b02:	f006 fba3 	bl	800724c <tcp_new>
 8000b06:	6078      	str	r0, [r7, #4]
	err_t err;

	err = tcp_bind(tpcb, &ipaddr, 7);
 8000b08:	2207      	movs	r2, #7
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <tcp_server_init+0x48>)
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f005 faf9 	bl	8006104 <tcp_bind>
 8000b12:	4603      	mov	r3, r0
 8000b14:	70fb      	strb	r3, [r7, #3]

	if (err == ERR_OK)
 8000b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d109      	bne.n	8000b32 <tcp_server_init+0x36>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8000b1e:	21ff      	movs	r1, #255	; 0xff
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f005 fba7 	bl	8006274 <tcp_listen_with_backlog>
 8000b26:	6078      	str	r0, [r7, #4]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8000b28:	4907      	ldr	r1, [pc, #28]	; (8000b48 <tcp_server_init+0x4c>)
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f006 fc0e 	bl	800734c <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8000b30:	e003      	b.n	8000b3a <tcp_server_init+0x3e>
		memp_free(MEMP_TCP_PCB, tpcb);
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	2001      	movs	r0, #1
 8000b36:	f003 fecb 	bl	80048d0 <memp_free>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000e4 	.word	0x200000e4
 8000b48:	08000b4d 	.word	0x08000b4d

08000b4c <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	4613      	mov	r3, r2
 8000b58:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f006 f983 	bl	8006e68 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8000b62:	200c      	movs	r0, #12
 8000b64:	f003 fcb4 	bl	80044d0 <mem_malloc>
 8000b68:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d01f      	beq.n	8000bb0 <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000b88:	6939      	ldr	r1, [r7, #16]
 8000b8a:	68b8      	ldr	r0, [r7, #8]
 8000b8c:	f006 fb66 	bl	800725c <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8000b90:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <tcp_server_accept+0x7c>)
 8000b92:	68b8      	ldr	r0, [r7, #8]
 8000b94:	f006 fb74 	bl	8007280 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <tcp_server_accept+0x80>)
 8000b9a:	68b8      	ldr	r0, [r7, #8]
 8000b9c:	f006 fbb4 	bl	8007308 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	490b      	ldr	r1, [pc, #44]	; (8000bd0 <tcp_server_accept+0x84>)
 8000ba4:	68b8      	ldr	r0, [r7, #8]
 8000ba6:	f006 fbe9 	bl	800737c <tcp_poll>

    ret_err = ERR_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	75fb      	strb	r3, [r7, #23]
 8000bae:	e005      	b.n	8000bbc <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8000bb0:	6939      	ldr	r1, [r7, #16]
 8000bb2:	68b8      	ldr	r0, [r7, #8]
 8000bb4:	f000 f965 	bl	8000e82 <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000bb8:	23ff      	movs	r3, #255	; 0xff
 8000bba:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000bbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	08000bd5 	.word	0x08000bd5
 8000bcc:	08000d09 	.word	0x08000d09
 8000bd0:	08000d2d 	.word	0x08000d2d

08000bd4 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d105      	bne.n	8000bf4 <tcp_server_recv+0x20>
 8000be8:	4b43      	ldr	r3, [pc, #268]	; (8000cf8 <tcp_server_recv+0x124>)
 8000bea:	2284      	movs	r2, #132	; 0x84
 8000bec:	4943      	ldr	r1, [pc, #268]	; (8000cfc <tcp_server_recv+0x128>)
 8000bee:	4844      	ldr	r0, [pc, #272]	; (8000d00 <tcp_server_recv+0x12c>)
 8000bf0:	f00d ff1e 	bl	800ea30 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d116      	bne.n	8000c2c <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	2203      	movs	r2, #3
 8000c02:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d104      	bne.n	8000c16 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8000c0c:	69b9      	ldr	r1, [r7, #24]
 8000c0e:	68b8      	ldr	r0, [r7, #8]
 8000c10:	f000 f937 	bl	8000e82 <tcp_server_connection_close>
 8000c14:	e007      	b.n	8000c26 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8000c16:	493b      	ldr	r1, [pc, #236]	; (8000d04 <tcp_server_recv+0x130>)
 8000c18:	68b8      	ldr	r0, [r7, #8]
 8000c1a:	f006 fb53 	bl	80072c4 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8000c1e:	69b9      	ldr	r1, [r7, #24]
 8000c20:	68b8      	ldr	r0, [r7, #8]
 8000c22:	f000 f8db 	bl	8000ddc <tcp_server_send>
    }
    ret_err = ERR_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	77fb      	strb	r3, [r7, #31]
 8000c2a:	e05f      	b.n	8000cec <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000c2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d00b      	beq.n	8000c4c <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d005      	beq.n	8000c46 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f004 fcbb 	bl	80055bc <pbuf_free>
    }
    ret_err = err;
 8000c46:	78fb      	ldrb	r3, [r7, #3]
 8000c48:	77fb      	strb	r3, [r7, #31]
 8000c4a:	e04f      	b.n	8000cec <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d110      	bne.n	8000c76 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	2202      	movs	r2, #2
 8000c58:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8000c60:	4928      	ldr	r1, [pc, #160]	; (8000d04 <tcp_server_recv+0x130>)
 8000c62:	68b8      	ldr	r0, [r7, #8]
 8000c64:	f006 fb2e 	bl	80072c4 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8000c68:	69b9      	ldr	r1, [r7, #24]
 8000c6a:	68b8      	ldr	r0, [r7, #8]
 8000c6c:	f000 f930 	bl	8000ed0 <tcp_server_handle>

    ret_err = ERR_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	77fb      	strb	r3, [r7, #31]
 8000c74:	e03a      	b.n	8000cec <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d115      	bne.n	8000caa <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d107      	bne.n	8000c96 <tcp_server_recv+0xc2>
    {
      es->p = p;
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8000c8c:	69b9      	ldr	r1, [r7, #24]
 8000c8e:	68b8      	ldr	r0, [r7, #8]
 8000c90:	f000 f91e 	bl	8000ed0 <tcp_server_handle>
 8000c94:	e006      	b.n	8000ca4 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f004 fda4 	bl	80057ec <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	77fb      	strb	r3, [r7, #31]
 8000ca8:	e020      	b.n	8000cec <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d10e      	bne.n	8000cd0 <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	891b      	ldrh	r3, [r3, #8]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	68b8      	ldr	r0, [r7, #8]
 8000cba:	f005 fbf1 	bl	80064a0 <tcp_recved>
    es->p = NULL;
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f004 fc79 	bl	80055bc <pbuf_free>
    ret_err = ERR_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	77fb      	strb	r3, [r7, #31]
 8000cce:	e00d      	b.n	8000cec <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	891b      	ldrh	r3, [r3, #8]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	68b8      	ldr	r0, [r7, #8]
 8000cd8:	f005 fbe2 	bl	80064a0 <tcp_recved>
    es->p = NULL;
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f004 fc6a 	bl	80055bc <pbuf_free>
    ret_err = ERR_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000cec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	0800f88c 	.word	0x0800f88c
 8000cfc:	0800f8a4 	.word	0x0800f8a4
 8000d00:	0800f8b0 	.word	0x0800f8b0
 8000d04:	08000d8d 	.word	0x08000d8d

08000d08 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000d1e:	68f8      	ldr	r0, [r7, #12]
 8000d20:	f003 fa70 	bl	8004204 <mem_free>
  }
}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d017      	beq.n	8000d70 <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d008      	beq.n	8000d5a <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8000d48:	490f      	ldr	r1, [pc, #60]	; (8000d88 <tcp_server_poll+0x5c>)
 8000d4a:	6838      	ldr	r0, [r7, #0]
 8000d4c:	f006 faba 	bl	80072c4 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6838      	ldr	r0, [r7, #0]
 8000d54:	f000 f842 	bl	8000ddc <tcp_server_send>
 8000d58:	e007      	b.n	8000d6a <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d103      	bne.n	8000d6a <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	6838      	ldr	r0, [r7, #0]
 8000d66:	f000 f88c 	bl	8000e82 <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]
 8000d6e:	e004      	b.n	8000d7a <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000d70:	6838      	ldr	r0, [r7, #0]
 8000d72:	f005 f9bb 	bl	80060ec <tcp_abort>
    ret_err = ERR_ABRT;
 8000d76:	23f3      	movs	r3, #243	; 0xf3
 8000d78:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	08000d8d 	.word	0x08000d8d

08000d8c <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	4613      	mov	r3, r2
 8000d98:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	2200      	movs	r2, #0
 8000da2:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d008      	beq.n	8000dbe <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8000dac:	490a      	ldr	r1, [pc, #40]	; (8000dd8 <tcp_server_sent+0x4c>)
 8000dae:	68b8      	ldr	r0, [r7, #8]
 8000db0:	f006 fa88 	bl	80072c4 <tcp_sent>
    tcp_server_send(tpcb, es);
 8000db4:	6979      	ldr	r1, [r7, #20]
 8000db6:	68b8      	ldr	r0, [r7, #8]
 8000db8:	f000 f810 	bl	8000ddc <tcp_server_send>
 8000dbc:	e007      	b.n	8000dce <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d103      	bne.n	8000dce <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 8000dc6:	6979      	ldr	r1, [r7, #20]
 8000dc8:	68b8      	ldr	r0, [r7, #8]
 8000dca:	f000 f85a 	bl	8000e82 <tcp_server_connection_close>
  }
  return ERR_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	08000d8d 	.word	0x08000d8d

08000ddc <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	75fb      	strb	r3, [r7, #23]


  while ((wr_err == ERR_OK) &&
 8000dea:	e036      	b.n	8000e5a <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	6859      	ldr	r1, [r3, #4]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	895a      	ldrh	r2, [r3, #10]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f009 f96f 	bl	800a0e0 <tcp_write>
 8000e02:	4603      	mov	r3, r0
 8000e04:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8000e06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d11d      	bne.n	8000e4a <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	895b      	ldrh	r3, [r3, #10]
 8000e12:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d004      	beq.n	8000e2e <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 fc67 	bl	80056fc <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000e2e:	6938      	ldr	r0, [r7, #16]
 8000e30:	f004 fbc4 	bl	80055bc <pbuf_free>
 8000e34:	4603      	mov	r3, r0
 8000e36:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000e38:	7b7b      	ldrb	r3, [r7, #13]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0f7      	beq.n	8000e2e <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000e3e:	89fb      	ldrh	r3, [r7, #14]
 8000e40:	4619      	mov	r1, r3
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f005 fb2c 	bl	80064a0 <tcp_recved>
 8000e48:	e007      	b.n	8000e5a <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e52:	d102      	bne.n	8000e5a <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	609a      	str	r2, [r3, #8]
         (es->p != NULL) &&
 8000e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10b      	bne.n	8000e7a <tcp_server_send+0x9e>
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d007      	beq.n	8000e7a <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	895a      	ldrh	r2, [r3, #10]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d9b8      	bls.n	8000dec <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f006 f9e4 	bl	800725c <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000e94:	2100      	movs	r1, #0
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f006 fa14 	bl	80072c4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f006 f9ee 	bl	8007280 <tcp_recv>
  tcp_err(tpcb, NULL);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f006 fa2e 	bl	8007308 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f006 fa63 	bl	800737c <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8000ebc:	6838      	ldr	r0, [r7, #0]
 8000ebe:	f003 f9a1 	bl	8004204 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f005 f828 	bl	8005f18 <tcp_close>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b0a0      	sub	sp, #128	; 0x80
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx;

	/* allocate structure es to maintain tcp connection information */
	esTx = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8000eda:	200c      	movs	r0, #12
 8000edc:	f003 faf8 	bl	80044d0 <mem_malloc>
 8000ee0:	67f8      	str	r0, [r7, #124]	; 0x7c

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	673b      	str	r3, [r7, #112]	; 0x70
	uint16_t inPort = tpcb->remote_port;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	8b1b      	ldrh	r3, [r3, #24]
 8000eec:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8000ef0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f00c fd09 	bl	800d90c <ip4addr_ntoa>
 8000efa:	6778      	str	r0, [r7, #116]	; 0x74

	esTx->state = es->state;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f02:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f0a:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f12:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2264      	movs	r2, #100	; 0x64
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f00d fdec 	bl	800eafa <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	6859      	ldr	r1, [r3, #4]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	891b      	ldrh	r3, [r3, #8]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4618      	mov	r0, r3
 8000f36:	f00d fde8 	bl	800eb0a <strncpy>
	strcat (buf, "+ Hello from TCP SERVER\n");
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff f956 	bl	80001f0 <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <tcp_server_handle+0xf8>)
 8000f50:	461d      	mov	r5, r3
 8000f52:	4614      	mov	r4, r2
 8000f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f56:	6028      	str	r0, [r5, #0]
 8000f58:	6069      	str	r1, [r5, #4]
 8000f5a:	60aa      	str	r2, [r5, #8]
 8000f5c:	60eb      	str	r3, [r5, #12]
 8000f5e:	cc03      	ldmia	r4!, {r0, r1}
 8000f60:	6128      	str	r0, [r5, #16]
 8000f62:	6169      	str	r1, [r5, #20]
 8000f64:	7823      	ldrb	r3, [r4, #0]
 8000f66:	762b      	strb	r3, [r5, #24]


	esTx->p->payload = (void *)buf;
 8000f68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f107 020c 	add.w	r2, r7, #12
 8000f70:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	891a      	ldrh	r2, [r3, #8]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	895b      	ldrh	r3, [r3, #10]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	b29c      	uxth	r4, r3
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff f932 	bl	80001f0 <strlen>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	4422      	add	r2, r4
 8000f96:	b292      	uxth	r2, r2
 8000f98:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff f926 	bl	80001f0 <strlen>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	b292      	uxth	r2, r2
 8000fac:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 8000fae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff13 	bl	8000ddc <tcp_server_send>

	pbuf_free(es->p);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f004 fafe 	bl	80055bc <pbuf_free>

}
 8000fc0:	bf00      	nop
 8000fc2:	3780      	adds	r7, #128	; 0x80
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc8:	0800f8d8 	.word	0x0800f8d8

08000fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001004 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fd2:	490e      	ldr	r1, [pc, #56]	; (800100c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd8:	e002      	b.n	8000fe0 <LoopCopyDataInit>

08000fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fde:	3304      	adds	r3, #4

08000fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe4:	d3f9      	bcc.n	8000fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe8:	4c0b      	ldr	r4, [pc, #44]	; (8001018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fec:	e001      	b.n	8000ff2 <LoopFillZerobss>

08000fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff0:	3204      	adds	r2, #4

08000ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff4:	d3fb      	bcc.n	8000fee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff6:	f7ff fd6f 	bl	8000ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f00d fddf 	bl	800ebbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffe:	f7ff facd 	bl	800059c <main>
  bx  lr    
 8001002:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001004:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001010:	080124c0 	.word	0x080124c0
  ldr r2, =_sbss
 8001014:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001018:	200084f8 	.word	0x200084f8

0800101c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC_IRQHandler>

0800101e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00b      	beq.n	8001046 <LAN8742_RegisterBusIO+0x28>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <LAN8742_RegisterBusIO+0x28>
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <LAN8742_RegisterBusIO+0x28>
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	e014      	b.n	8001076 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d17c      	bne.n	800119c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d002      	beq.n	80010b0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2220      	movs	r2, #32
 80010b4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	e01c      	b.n	80010f6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	f107 0208 	add.w	r2, r7, #8
 80010c4:	2112      	movs	r1, #18
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	4798      	blx	r3
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	da03      	bge.n	80010d8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80010d0:	f06f 0304 	mvn.w	r3, #4
 80010d4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80010d6:	e00b      	b.n	80010f0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	f003 031f 	and.w	r3, r3, #31
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d105      	bne.n	80010f0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
         break;
 80010ee:	e005      	b.n	80010fc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	2b1f      	cmp	r3, #31
 80010fa:	d9df      	bls.n	80010bc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b1f      	cmp	r3, #31
 8001102:	d902      	bls.n	800110a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001104:	f06f 0302 	mvn.w	r3, #2
 8001108:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d145      	bne.n	800119c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6810      	ldr	r0, [r2, #0]
 8001118:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800111c:	2100      	movs	r1, #0
 800111e:	4798      	blx	r3
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	db37      	blt.n	8001196 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	6810      	ldr	r0, [r2, #0]
 800112e:	f107 0208 	add.w	r2, r7, #8
 8001132:	2100      	movs	r1, #0
 8001134:	4798      	blx	r3
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	db28      	blt.n	800118e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4798      	blx	r3
 8001142:	4603      	mov	r3, r0
 8001144:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001146:	e01c      	b.n	8001182 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4798      	blx	r3
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800115a:	d80e      	bhi.n	800117a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	6810      	ldr	r0, [r2, #0]
 8001164:	f107 0208 	add.w	r2, r7, #8
 8001168:	2100      	movs	r1, #0
 800116a:	4798      	blx	r3
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	da07      	bge.n	8001182 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001172:	f06f 0304 	mvn.w	r3, #4
 8001176:	613b      	str	r3, [r7, #16]
                 break;
 8001178:	e010      	b.n	800119c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800117a:	f06f 0301 	mvn.w	r3, #1
 800117e:	613b      	str	r3, [r7, #16]
               break;
 8001180:	e00c      	b.n	800119c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1dd      	bne.n	8001148 <LAN8742_Init+0xc6>
 800118c:	e006      	b.n	800119c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800118e:	f06f 0304 	mvn.w	r3, #4
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	e002      	b.n	800119c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001196:	f06f 0303 	mvn.w	r3, #3
 800119a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d112      	bne.n	80011c8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	4798      	blx	r3
 80011a8:	4603      	mov	r3, r0
 80011aa:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80011ac:	bf00      	nop
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4798      	blx	r3
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011c0:	d9f5      	bls.n	80011ae <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80011c8:	693b      	ldr	r3, [r7, #16]
 }
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6810      	ldr	r0, [r2, #0]
 80011e6:	f107 020c 	add.w	r2, r7, #12
 80011ea:	2101      	movs	r1, #1
 80011ec:	4798      	blx	r3
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	da02      	bge.n	80011fa <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011f4:	f06f 0304 	mvn.w	r3, #4
 80011f8:	e06e      	b.n	80012d8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6810      	ldr	r0, [r2, #0]
 8001202:	f107 020c 	add.w	r2, r7, #12
 8001206:	2101      	movs	r1, #1
 8001208:	4798      	blx	r3
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	da02      	bge.n	8001216 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001210:	f06f 0304 	mvn.w	r3, #4
 8001214:	e060      	b.n	80012d8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001220:	2301      	movs	r3, #1
 8001222:	e059      	b.n	80012d8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6810      	ldr	r0, [r2, #0]
 800122c:	f107 020c 	add.w	r2, r7, #12
 8001230:	2100      	movs	r1, #0
 8001232:	4798      	blx	r3
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	da02      	bge.n	8001240 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800123a:	f06f 0304 	mvn.w	r3, #4
 800123e:	e04b      	b.n	80012d8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d11b      	bne.n	8001282 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d006      	beq.n	8001262 <LAN8742_GetLinkState+0x90>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800125e:	2302      	movs	r3, #2
 8001260:	e03a      	b.n	80012d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800126c:	2303      	movs	r3, #3
 800126e:	e033      	b.n	80012d8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800127a:	2304      	movs	r3, #4
 800127c:	e02c      	b.n	80012d8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800127e:	2305      	movs	r3, #5
 8001280:	e02a      	b.n	80012d8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6810      	ldr	r0, [r2, #0]
 800128a:	f107 020c 	add.w	r2, r7, #12
 800128e:	211f      	movs	r1, #31
 8001290:	4798      	blx	r3
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	da02      	bge.n	800129e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001298:	f06f 0304 	mvn.w	r3, #4
 800129c:	e01c      	b.n	80012d8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80012a8:	2306      	movs	r3, #6
 80012aa:	e015      	b.n	80012d8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 031c 	and.w	r3, r3, #28
 80012b2:	2b18      	cmp	r3, #24
 80012b4:	d101      	bne.n	80012ba <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012b6:	2302      	movs	r3, #2
 80012b8:	e00e      	b.n	80012d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f003 031c 	and.w	r3, r3, #28
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d101      	bne.n	80012c8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e007      	b.n	80012d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 031c 	and.w	r3, r3, #28
 80012ce:	2b14      	cmp	r3, #20
 80012d0:	d101      	bne.n	80012d6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012d2:	2304      	movs	r3, #4
 80012d4:	e000      	b.n	80012d8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012d6:	2305      	movs	r3, #5
    }				
  }
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <HAL_Init+0x40>)
 80012ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <HAL_Init+0x40>)
 80012f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_Init+0x40>)
 8001302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 f931 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f808 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff fac4 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023c00 	.word	0x40023c00

08001324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f93b 	bl	80015be <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 f911 	bl	8001586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000000 	.word	0x20000000
 800137c:	20000008 	.word	0x20000008
 8001380:	20000004 	.word	0x20000004

08001384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008
 80013a8:	200000a8 	.word	0x200000a8

080013ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200000a8 	.word	0x200000a8

080013c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff ffee 	bl	80013ac <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_Delay+0x44>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffde 	bl	80013ac <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800153c:	d301      	bcc.n	8001542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153e:	2301      	movs	r3, #1
 8001540:	e00f      	b.n	8001562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <SysTick_Config+0x40>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154a:	210f      	movs	r1, #15
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f7ff ff8e 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <SysTick_Config+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <SysTick_Config+0x40>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff47 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001598:	f7ff ff5c 	bl	8001454 <__NVIC_GetPriorityGrouping>
 800159c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7ff ff8e 	bl	80014c4 <NVIC_EncodePriority>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff5d 	bl	8001470 <__NVIC_SetPriority>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffb0 	bl	800152c <SysTick_Config>
 80015cc:	4603      	mov	r3, r0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e06c      	b.n	80016c4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2223      	movs	r2, #35	; 0x23
 80015f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f002 fa6f 	bl	8003ae0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_ETH_Init+0xf4>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a30      	ldr	r2, [pc, #192]	; (80016cc <HAL_ETH_Init+0xf4>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <HAL_ETH_Init+0xf4>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800161e:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <HAL_ETH_Init+0xf8>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4a2b      	ldr	r2, [pc, #172]	; (80016d0 <HAL_ETH_Init+0xf8>)
 8001624:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001628:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_ETH_Init+0xf8>)
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	4927      	ldr	r1, [pc, #156]	; (80016d0 <HAL_ETH_Init+0xf8>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <HAL_ETH_Init+0xf8>)
 800163a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001652:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001654:	f7ff feaa 	bl	80013ac <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800165a:	e011      	b.n	8001680 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800165c:	f7ff fea6 	bl	80013ac <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800166a:	d909      	bls.n	8001680 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2204      	movs	r2, #4
 8001670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	22e0      	movs	r2, #224	; 0xe0
 8001678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e021      	b.n	80016c4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1e4      	bne.n	800165c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fdf0 	bl	8002278 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 fe97 	bl	80023cc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 feed 	bl	800247e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	461a      	mov	r2, r3
 80016aa:	2100      	movs	r1, #0
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 fe55 	bl	800235c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2210      	movs	r2, #16
 80016be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40013800 	.word	0x40013800

080016d4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d150      	bne.n	8001788 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2223      	movs	r2, #35	; 0x23
 80016ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2204      	movs	r2, #4
 80016f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f9fd 	bl	8001af4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0208 	orr.w	r2, r2, #8
 8001708:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001712:	2001      	movs	r0, #1
 8001714:	f7ff fe56 	bl	80013c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0204 	orr.w	r2, r2, #4
 800172e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001738:	2001      	movs	r0, #1
 800173a:	f7ff fe43 	bl	80013c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fc36 	bl	8001fb8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800175e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001762:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	f043 0302 	orr.w	r3, r3, #2
 8001776:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800177a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2223      	movs	r2, #35	; 0x23
 8001780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	e000      	b.n	800178a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
  }
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017a0:	2b23      	cmp	r3, #35	; 0x23
 80017a2:	d14a      	bne.n	800183a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2223      	movs	r2, #35	; 0x23
 80017a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017c2:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	f023 0302 	bic.w	r3, r3, #2
 80017d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017da:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0204 	bic.w	r2, r2, #4
 80017ea:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f7ff fde5 	bl	80013c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fbd8 	bl	8001fb8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0208 	bic.w	r2, r2, #8
 8001816:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001820:	2001      	movs	r0, #1
 8001822:	f7ff fdcf 	bl	80013c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2210      	movs	r2, #16
 8001832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e000      	b.n	800183c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
  }
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185c:	f043 0201 	orr.w	r2, r3, #1
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e07c      	b.n	8001964 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001870:	2b23      	cmp	r3, #35	; 0x23
 8001872:	d176      	bne.n	8001962 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001874:	2200      	movs	r2, #0
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f000 fe6d 	bl	8002558 <ETH_Prepare_Tx_Descriptors>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d009      	beq.n	8001898 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800188a:	f043 0202 	orr.w	r2, r3, #2
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e065      	b.n	8001964 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001898:	f3bf 8f4f 	dsb	sy
}
 800189c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3206      	adds	r2, #6
 80018a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018aa:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d904      	bls.n	80018c8 <HAL_ETH_Transmit+0x84>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	1f1a      	subs	r2, r3, #4
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3106      	adds	r1, #6
 80018d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018dc:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80018de:	f7ff fd65 	bl	80013ac <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018e4:	e037      	b.n	8001956 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d011      	beq.n	800191c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fe:	f043 0208 	orr.w	r2, r3, #8
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e023      	b.n	8001964 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001922:	d018      	beq.n	8001956 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001924:	f7ff fd42 	bl	80013ac <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	d302      	bcc.n	800193a <HAL_ETH_Transmit+0xf6>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10d      	bne.n	8001956 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001940:	f043 0204 	orr.w	r2, r3, #4
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001950:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e006      	b.n	8001964 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	dbc3      	blt.n	80018e6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e000      	b.n	8001964 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
  }
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d109      	bne.n	8001998 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198a:	f043 0201 	orr.w	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0a8      	b.n	8001aea <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800199e:	2b23      	cmp	r3, #35	; 0x23
 80019a0:	d001      	beq.n	80019a6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0a1      	b.n	8001aea <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019aa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	3212      	adds	r2, #18
 80019b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019bc:	f1c3 0304 	rsb	r3, r3, #4
 80019c0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019c2:	e06a      	b.n	8001a9a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d007      	beq.n	80019e0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	699a      	ldr	r2, [r3, #24]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	69da      	ldr	r2, [r3, #28]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d103      	bne.n	80019f4 <HAL_ETH_ReadData+0x88>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d040      	beq.n	8001a76 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00c      	beq.n	8001a38 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	0c1b      	lsrs	r3, r3, #16
 8001a24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a28:	3b04      	subs	r3, #4
 8001a2a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a50:	461a      	mov	r2, r3
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	f002 fa13 	bl	8003e80 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	441a      	add	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2200      	movs	r2, #0
 8001a74:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d902      	bls.n	8001a88 <HAL_ETH_ReadData+0x11c>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b04      	subs	r3, #4
 8001a86:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	3212      	adds	r2, #18
 8001a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a92:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db06      	blt.n	8001ab0 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d202      	bcs.n	8001ab0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d089      	beq.n	80019c4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f815 	bl	8001af4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d108      	bne.n	8001ae8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e000      	b.n	8001aea <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001b00:	2301      	movs	r3, #1
 8001b02:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b08:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	3212      	adds	r2, #18
 8001b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b14:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b1a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001b1c:	e040      	b.n	8001ba0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d112      	bne.n	8001b4c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 f978 	bl	8003e20 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d102      	bne.n	8001b3c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	74fb      	strb	r3, [r7, #19]
 8001b3a:	e007      	b.n	8001b4c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	461a      	mov	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001b4c:	7cfb      	ldrb	r3, [r7, #19]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d026      	beq.n	8001ba0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d103      	bne.n	8001b62 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	; (8001bd8 <ETH_UpdateDescriptor+0xe4>)
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	e003      	b.n	8001b6a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001b68:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b6a:	f3bf 8f5f 	dmb	sy
}
 8001b6e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d902      	bls.n	8001b8e <ETH_UpdateDescriptor+0x9a>
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	3212      	adds	r2, #18
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	617b      	str	r3, [r7, #20]
      desccount--;
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <ETH_UpdateDescriptor+0xb8>
 8001ba6:	7cfb      	ldrb	r3, [r7, #19]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1b8      	bne.n	8001b1e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d00c      	beq.n	8001bd0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	80004600 	.word	0x80004600

08001bdc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 031c 	and.w	r3, r3, #28
 8001bf8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	02db      	lsls	r3, r3, #11
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	019b      	lsls	r3, r3, #6
 8001c0a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f023 0302 	bic.w	r3, r3, #2
 8001c1a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001c2c:	f7ff fbbe 	bl	80013ac <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c32:	e00d      	b.n	8001c50 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001c34:	f7ff fbba 	bl	80013ac <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c42:	d301      	bcc.n	8001c48 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e010      	b.n	8001c6a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1ec      	bne.n	8001c34 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 031c 	and.w	r3, r3, #28
 8001c8e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	02db      	lsls	r3, r3, #11
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	019b      	lsls	r3, r3, #6
 8001ca0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ccc:	f7ff fb6e 	bl	80013ac <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cd2:	e00d      	b.n	8001cf0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001cd4:	f7ff fb6a 	bl	80013ac <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce2:	d301      	bcc.n	8001ce8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e009      	b.n	8001cfc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ec      	bne.n	8001cd4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0d9      	b.n	8001ecc <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bf14      	ite	ne
 8001d26:	2301      	movne	r3, #1
 8001d28:	2300      	moveq	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	bf0c      	ite	eq
 8001d86:	2301      	moveq	r3, #1
 8001d88:	2300      	movne	r3, #0
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf14      	ite	ne
 8001da0:	2301      	movne	r3, #1
 8001da2:	2300      	moveq	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2301      	moveq	r3, #1
 8001dd8:	2300      	movne	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf14      	ite	ne
 8001e0a:	2301      	movne	r3, #1
 8001e0c:	2300      	moveq	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bf14      	ite	ne
 8001e32:	2301      	movne	r3, #1
 8001e34:	2300      	moveq	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf14      	ite	ne
 8001e4c:	2301      	movne	r3, #1
 8001e4e:	2300      	moveq	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	0c1b      	lsrs	r3, r3, #16
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf14      	ite	ne
 8001ea0:	2301      	movne	r3, #1
 8001ea2:	2300      	moveq	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf14      	ite	ne
 8001ebc:	2301      	movne	r3, #1
 8001ebe:	2300      	moveq	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e00b      	b.n	8001f04 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d105      	bne.n	8001f02 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001ef6:	6839      	ldr	r1, [r7, #0]
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f883 	bl	8002004 <ETH_SetMACConfig>

    return HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
  }
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 031c 	bic.w	r3, r3, #28
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f24:	f001 fac8 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 8001f28:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d908      	bls.n	8001f44 <HAL_ETH_SetMDIOClockRange+0x38>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4a1c      	ldr	r2, [pc, #112]	; (8001fa8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d804      	bhi.n	8001f44 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f043 0308 	orr.w	r3, r3, #8
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e027      	b.n	8001f94 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d908      	bls.n	8001f5e <HAL_ETH_SetMDIOClockRange+0x52>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4a17      	ldr	r2, [pc, #92]	; (8001fac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d204      	bcs.n	8001f5e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f043 030c 	orr.w	r3, r3, #12
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	e01a      	b.n	8001f94 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	4a12      	ldr	r2, [pc, #72]	; (8001fac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d303      	bcc.n	8001f6e <HAL_ETH_SetMDIOClockRange+0x62>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d911      	bls.n	8001f92 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d908      	bls.n	8001f88 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d804      	bhi.n	8001f88 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	e005      	b.n	8001f94 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f043 0310 	orr.w	r3, r3, #16
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	e000      	b.n	8001f94 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001f92:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
}
 8001f9c:	bf00      	nop
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	01312cff 	.word	0x01312cff
 8001fa8:	02160ebf 	.word	0x02160ebf
 8001fac:	03938700 	.word	0x03938700
 8001fb0:	05f5e0ff 	.word	0x05f5e0ff
 8001fb4:	08f0d17f 	.word	0x08f0d17f

08001fb8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fda:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7ff f9eb 	bl	80013c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ff8:	6193      	str	r3, [r2, #24]
}
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4b51      	ldr	r3, [pc, #324]	; (8002160 <ETH_SetMACConfig+0x15c>)
 800201a:	4013      	ands	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	7c1b      	ldrb	r3, [r3, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <ETH_SetMACConfig+0x28>
 8002026:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800202a:	e000      	b.n	800202e <ETH_SetMACConfig+0x2a>
 800202c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	7c5b      	ldrb	r3, [r3, #17]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <ETH_SetMACConfig+0x38>
 8002036:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800203a:	e000      	b.n	800203e <ETH_SetMACConfig+0x3a>
 800203c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800203e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002044:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	7fdb      	ldrb	r3, [r3, #31]
 800204a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800204c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002052:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	7f92      	ldrb	r2, [r2, #30]
 8002058:	2a00      	cmp	r2, #0
 800205a:	d102      	bne.n	8002062 <ETH_SetMACConfig+0x5e>
 800205c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002060:	e000      	b.n	8002064 <ETH_SetMACConfig+0x60>
 8002062:	2200      	movs	r2, #0
                        macconf->Speed |
 8002064:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	7f1b      	ldrb	r3, [r3, #28]
 800206a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800206c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002072:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	791b      	ldrb	r3, [r3, #4]
 8002078:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800207a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002082:	2a00      	cmp	r2, #0
 8002084:	d102      	bne.n	800208c <ETH_SetMACConfig+0x88>
 8002086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800208a:	e000      	b.n	800208e <ETH_SetMACConfig+0x8a>
 800208c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800208e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	7bdb      	ldrb	r3, [r3, #15]
 8002094:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002096:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800209c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020a4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020a6:	4313      	orrs	r3, r2
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020be:	2001      	movs	r0, #1
 80020c0:	f7ff f980 	bl	80013c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020da:	4013      	ands	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80020ea:	2a00      	cmp	r2, #0
 80020ec:	d101      	bne.n	80020f2 <ETH_SetMACConfig+0xee>
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	e000      	b.n	80020f4 <ETH_SetMACConfig+0xf0>
 80020f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020f4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002102:	2a01      	cmp	r2, #1
 8002104:	d101      	bne.n	800210a <ETH_SetMACConfig+0x106>
 8002106:	2208      	movs	r2, #8
 8002108:	e000      	b.n	800210c <ETH_SetMACConfig+0x108>
 800210a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800210c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002114:	2a01      	cmp	r2, #1
 8002116:	d101      	bne.n	800211c <ETH_SetMACConfig+0x118>
 8002118:	2204      	movs	r2, #4
 800211a:	e000      	b.n	800211e <ETH_SetMACConfig+0x11a>
 800211c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800211e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002126:	2a01      	cmp	r2, #1
 8002128:	d101      	bne.n	800212e <ETH_SetMACConfig+0x12a>
 800212a:	2202      	movs	r2, #2
 800212c:	e000      	b.n	8002130 <ETH_SetMACConfig+0x12c>
 800212e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002130:	4313      	orrs	r3, r2
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002148:	2001      	movs	r0, #1
 800214a:	f7ff f93b 	bl	80013c4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	619a      	str	r2, [r3, #24]
}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	ff20810f 	.word	0xff20810f

08002164 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <ETH_SetDMAConfig+0x110>)
 800217e:	4013      	ands	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	7b1b      	ldrb	r3, [r3, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <ETH_SetDMAConfig+0x2c>
 800218a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800218e:	e000      	b.n	8002192 <ETH_SetDMAConfig+0x2e>
 8002190:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	7b5b      	ldrb	r3, [r3, #13]
 8002196:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002198:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	7f52      	ldrb	r2, [r2, #29]
 800219e:	2a00      	cmp	r2, #0
 80021a0:	d102      	bne.n	80021a8 <ETH_SetDMAConfig+0x44>
 80021a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021a6:	e000      	b.n	80021aa <ETH_SetDMAConfig+0x46>
 80021a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	7b9b      	ldrb	r3, [r3, #14]
 80021b0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021b2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021b8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	7f1b      	ldrb	r3, [r3, #28]
 80021be:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80021c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	7f9b      	ldrb	r3, [r3, #30]
 80021c6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021c8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021d6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021d8:	4313      	orrs	r3, r2
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e8:	461a      	mov	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7ff f8e2 	bl	80013c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002208:	461a      	mov	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	791b      	ldrb	r3, [r3, #4]
 8002212:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002218:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800221e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002224:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800222c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800222e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002236:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800223c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002246:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800224a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002258:	2001      	movs	r0, #1
 800225a:	f7ff f8b3 	bl	80013c4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002266:	461a      	mov	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6013      	str	r3, [r2, #0]
}
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	f8de3f23 	.word	0xf8de3f23

08002278 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b0a6      	sub	sp, #152	; 0x98
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002280:	2301      	movs	r3, #1
 8002282:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002286:	2301      	movs	r3, #1
 8002288:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800228c:	2300      	movs	r3, #0
 800228e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002296:	2301      	movs	r3, #1
 8002298:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022b4:	2300      	movs	r3, #0
 80022b6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80022da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022de:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80022ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022f0:	4619      	mov	r1, r3
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fe86 	bl	8002004 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80022f8:	2301      	movs	r3, #1
 80022fa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80022fc:	2301      	movs	r3, #1
 80022fe:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002300:	2301      	movs	r3, #1
 8002302:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002306:	2301      	movs	r3, #1
 8002308:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800231a:	2300      	movs	r3, #0
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002324:	2301      	movs	r3, #1
 8002326:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800232c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800232e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002332:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002338:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800233a:	2301      	movs	r3, #1
 800233c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002340:	2300      	movs	r3, #0
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002348:	f107 0308 	add.w	r3, r7, #8
 800234c:	4619      	mov	r1, r3
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ff08 	bl	8002164 <ETH_SetDMAConfig>
}
 8002354:	bf00      	nop
 8002356:	3798      	adds	r7, #152	; 0x98
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3305      	adds	r3, #5
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	3204      	adds	r2, #4
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <ETH_MACAddressConfig+0x68>)
 800237e:	4413      	add	r3, r2
 8002380:	461a      	mov	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3303      	adds	r3, #3
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	061a      	lsls	r2, r3, #24
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3302      	adds	r3, #2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	041b      	lsls	r3, r3, #16
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3301      	adds	r3, #1
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	4313      	orrs	r3, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	7812      	ldrb	r2, [r2, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <ETH_MACAddressConfig+0x6c>)
 80023ae:	4413      	add	r3, r2
 80023b0:	461a      	mov	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	6013      	str	r3, [r2, #0]
}
 80023b6:	bf00      	nop
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40028040 	.word	0x40028040
 80023c8:	40028044 	.word	0x40028044

080023cc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	e03e      	b.n	8002458 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68d9      	ldr	r1, [r3, #12]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2200      	movs	r2, #0
 80023f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2200      	movs	r2, #0
 8002402:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	3206      	adds	r2, #6
 800240c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d80c      	bhi.n	800243c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68d9      	ldr	r1, [r3, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	461a      	mov	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	e004      	b.n	8002446 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	461a      	mov	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	3301      	adds	r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d9bd      	bls.n	80023da <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002470:	611a      	str	r2, [r3, #16]
}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800247e:	b480      	push	{r7}
 8002480:	b085      	sub	sp, #20
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	e046      	b.n	800251a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6919      	ldr	r1, [r3, #16]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2200      	movs	r2, #0
 80024a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2200      	movs	r2, #0
 80024ba:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2200      	movs	r2, #0
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024c8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80024d0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	3212      	adds	r2, #18
 80024e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d80c      	bhi.n	800250a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6919      	ldr	r1, [r3, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	440b      	add	r3, r1
 8002502:	461a      	mov	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	e004      	b.n	8002514 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	461a      	mov	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3301      	adds	r3, #1
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d9b5      	bls.n	800248c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800254a:	60da      	str	r2, [r3, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002558:	b480      	push	{r7}
 800255a:	b08d      	sub	sp, #52	; 0x34
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3318      	adds	r3, #24
 8002568:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800257e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002582:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800259a:	d007      	beq.n	80025ac <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	3304      	adds	r3, #4
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80025ac:	2302      	movs	r3, #2
 80025ae:	e103      	b.n	80027b8 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	3301      	adds	r3, #1
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80025c8:	f023 031f 	bic.w	r3, r3, #31
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	6852      	ldr	r2, [r2, #4]
 80025d0:	431a      	orrs	r2, r3
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	431a      	orrs	r2, r3
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002636:	f3bf 8f5f 	dmb	sy
}
 800263a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002648:	e084      	b.n	8002754 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e005      	b.n	8002676 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	3301      	adds	r3, #1
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	2b03      	cmp	r3, #3
 8002680:	d902      	bls.n	8002688 <ETH_Prepare_Tx_Descriptors+0x130>
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	3b04      	subs	r3, #4
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800268c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002690:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026aa:	d007      	beq.n	80026bc <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	3304      	adds	r3, #4
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d029      	beq.n	8002710 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ce:	e019      	b.n	8002704 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80026d0:	f3bf 8f5f 	dmb	sy
}
 80026d4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	3301      	adds	r3, #1
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d902      	bls.n	80026f4 <ETH_Prepare_Tx_Descriptors+0x19c>
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	3b04      	subs	r3, #4
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fc:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80026fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002700:	3301      	adds	r3, #1
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
 8002704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	429a      	cmp	r2, r3
 800270a:	d3e1      	bcc.n	80026d0 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 800270c:	2302      	movs	r3, #2
 800270e:	e053      	b.n	80027b8 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	3301      	adds	r3, #1
 8002714:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800272e:	f023 031f 	bic.w	r3, r3, #31
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	6852      	ldr	r2, [r2, #4]
 8002736:	431a      	orrs	r2, r3
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	3301      	adds	r3, #1
 8002740:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002742:	f3bf 8f5f 	dmb	sy
}
 8002746:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	f47f af76 	bne.w	800264a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e005      	b.n	800277e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800278e:	6979      	ldr	r1, [r7, #20]
 8002790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002792:	3304      	adds	r3, #4
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800279e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80027a0:	b672      	cpsid	i
}
 80027a2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	4413      	add	r3, r2
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80027b2:	b662      	cpsie	i
}
 80027b4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3734      	adds	r7, #52	; 0x34
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	e177      	b.n	8002ad0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e0:	2201      	movs	r2, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	f040 8166 	bne.w	8002aca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d005      	beq.n	8002816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002812:	2b02      	cmp	r3, #2
 8002814:	d130      	bne.n	8002878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	2203      	movs	r2, #3
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800284c:	2201      	movs	r2, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 0201 	and.w	r2, r3, #1
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b03      	cmp	r3, #3
 8002882:	d017      	beq.n	80028b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d123      	bne.n	8002908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	08da      	lsrs	r2, r3, #3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3208      	adds	r2, #8
 80028c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	220f      	movs	r2, #15
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	08da      	lsrs	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3208      	adds	r2, #8
 8002902:	69b9      	ldr	r1, [r7, #24]
 8002904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	2203      	movs	r2, #3
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0203 	and.w	r2, r3, #3
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80c0 	beq.w	8002aca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_GPIO_Init+0x324>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	4a65      	ldr	r2, [pc, #404]	; (8002ae8 <HAL_GPIO_Init+0x324>)
 8002954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002958:	6453      	str	r3, [r2, #68]	; 0x44
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_GPIO_Init+0x324>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002966:	4a61      	ldr	r2, [pc, #388]	; (8002aec <HAL_GPIO_Init+0x328>)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	089b      	lsrs	r3, r3, #2
 800296c:	3302      	adds	r3, #2
 800296e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	220f      	movs	r2, #15
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_GPIO_Init+0x32c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d037      	beq.n	8002a02 <HAL_GPIO_Init+0x23e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a57      	ldr	r2, [pc, #348]	; (8002af4 <HAL_GPIO_Init+0x330>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d031      	beq.n	80029fe <HAL_GPIO_Init+0x23a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a56      	ldr	r2, [pc, #344]	; (8002af8 <HAL_GPIO_Init+0x334>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d02b      	beq.n	80029fa <HAL_GPIO_Init+0x236>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a55      	ldr	r2, [pc, #340]	; (8002afc <HAL_GPIO_Init+0x338>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d025      	beq.n	80029f6 <HAL_GPIO_Init+0x232>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a54      	ldr	r2, [pc, #336]	; (8002b00 <HAL_GPIO_Init+0x33c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01f      	beq.n	80029f2 <HAL_GPIO_Init+0x22e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a53      	ldr	r2, [pc, #332]	; (8002b04 <HAL_GPIO_Init+0x340>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d019      	beq.n	80029ee <HAL_GPIO_Init+0x22a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a52      	ldr	r2, [pc, #328]	; (8002b08 <HAL_GPIO_Init+0x344>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_GPIO_Init+0x226>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a51      	ldr	r2, [pc, #324]	; (8002b0c <HAL_GPIO_Init+0x348>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00d      	beq.n	80029e6 <HAL_GPIO_Init+0x222>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a50      	ldr	r2, [pc, #320]	; (8002b10 <HAL_GPIO_Init+0x34c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d007      	beq.n	80029e2 <HAL_GPIO_Init+0x21e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4f      	ldr	r2, [pc, #316]	; (8002b14 <HAL_GPIO_Init+0x350>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_GPIO_Init+0x21a>
 80029da:	2309      	movs	r3, #9
 80029dc:	e012      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029de:	230a      	movs	r3, #10
 80029e0:	e010      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029e2:	2308      	movs	r3, #8
 80029e4:	e00e      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029e6:	2307      	movs	r3, #7
 80029e8:	e00c      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029ea:	2306      	movs	r3, #6
 80029ec:	e00a      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029ee:	2305      	movs	r3, #5
 80029f0:	e008      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029f2:	2304      	movs	r3, #4
 80029f4:	e006      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029f6:	2303      	movs	r3, #3
 80029f8:	e004      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e002      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 8002a02:	2300      	movs	r3, #0
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	f002 0203 	and.w	r2, r2, #3
 8002a0a:	0092      	lsls	r2, r2, #2
 8002a0c:	4093      	lsls	r3, r2
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a14:	4935      	ldr	r1, [pc, #212]	; (8002aec <HAL_GPIO_Init+0x328>)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a22:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a46:	4a34      	ldr	r2, [pc, #208]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a70:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a76:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a9a:	4a1f      	ldr	r2, [pc, #124]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac4:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3301      	adds	r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	2b0f      	cmp	r3, #15
 8002ad4:	f67f ae84 	bls.w	80027e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3724      	adds	r7, #36	; 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40013800 	.word	0x40013800
 8002af0:	40020000 	.word	0x40020000
 8002af4:	40020400 	.word	0x40020400
 8002af8:	40020800 	.word	0x40020800
 8002afc:	40020c00 	.word	0x40020c00
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40021400 	.word	0x40021400
 8002b08:	40021800 	.word	0x40021800
 8002b0c:	40021c00 	.word	0x40021c00
 8002b10:	40022000 	.word	0x40022000
 8002b14:	40022400 	.word	0x40022400
 8002b18:	40013c00 	.word	0x40013c00

08002b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b2c:	787b      	ldrb	r3, [r7, #1]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b38:	e003      	b.n	8002b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b3a:	887b      	ldrh	r3, [r7, #2]
 8002b3c:	041a      	lsls	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	619a      	str	r2, [r3, #24]
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b68:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b7c:	f7fe fc16 	bl	80013ac <HAL_GetTick>
 8002b80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b82:	e009      	b.n	8002b98 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b84:	f7fe fc12 	bl	80013ac <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b92:	d901      	bls.n	8002b98 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e01f      	b.n	8002bd8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba4:	d1ee      	bne.n	8002b84 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bac:	f7fe fbfe 	bl	80013ac <HAL_GetTick>
 8002bb0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bb2:	e009      	b.n	8002bc8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bb4:	f7fe fbfa 	bl	80013ac <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc2:	d901      	bls.n	8002bc8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e007      	b.n	8002bd8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bc8:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bd4:	d1ee      	bne.n	8002bb4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40023800 	.word	0x40023800
 8002be4:	420e0040 	.word	0x420e0040
 8002be8:	40007000 	.word	0x40007000
 8002bec:	420e0044 	.word	0x420e0044

08002bf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e267      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d075      	beq.n	8002cfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c0e:	4b88      	ldr	r3, [pc, #544]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d00c      	beq.n	8002c34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c1a:	4b85      	ldr	r3, [pc, #532]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d112      	bne.n	8002c4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c26:	4b82      	ldr	r3, [pc, #520]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c32:	d10b      	bne.n	8002c4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	4b7e      	ldr	r3, [pc, #504]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d05b      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x108>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d157      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e242      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c54:	d106      	bne.n	8002c64 <HAL_RCC_OscConfig+0x74>
 8002c56:	4b76      	ldr	r3, [pc, #472]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a75      	ldr	r2, [pc, #468]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e01d      	b.n	8002ca0 <HAL_RCC_OscConfig+0xb0>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x98>
 8002c6e:	4b70      	ldr	r3, [pc, #448]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a6f      	ldr	r2, [pc, #444]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	4b6d      	ldr	r3, [pc, #436]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6c      	ldr	r2, [pc, #432]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCC_OscConfig+0xb0>
 8002c88:	4b69      	ldr	r3, [pc, #420]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a68      	ldr	r2, [pc, #416]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b66      	ldr	r3, [pc, #408]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a65      	ldr	r2, [pc, #404]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fb80 	bl	80013ac <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe fb7c 	bl	80013ac <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e207      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b5b      	ldr	r3, [pc, #364]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xc0>
 8002cce:	e014      	b.n	8002cfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fb6c 	bl	80013ac <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fb68 	bl	80013ac <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e1f3      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cea:	4b51      	ldr	r3, [pc, #324]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0xe8>
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d063      	beq.n	8002dce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d06:	4b4a      	ldr	r3, [pc, #296]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d12:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d11c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1e:	4b44      	ldr	r3, [pc, #272]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d116      	bne.n	8002d58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2a:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_RCC_OscConfig+0x152>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d001      	beq.n	8002d42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e1c7      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d42:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4937      	ldr	r1, [pc, #220]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d56:	e03a      	b.n	8002dce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d020      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d60:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <HAL_RCC_OscConfig+0x244>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fe fb21 	bl	80013ac <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6e:	f7fe fb1d 	bl	80013ac <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e1a8      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d80:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4925      	ldr	r1, [pc, #148]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	600b      	str	r3, [r1, #0]
 8002da0:	e015      	b.n	8002dce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da2:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <HAL_RCC_OscConfig+0x244>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe fb00 	bl	80013ac <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db0:	f7fe fafc 	bl	80013ac <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e187      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d036      	beq.n	8002e48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d016      	beq.n	8002e10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <HAL_RCC_OscConfig+0x248>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fe fae0 	bl	80013ac <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df0:	f7fe fadc 	bl	80013ac <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e167      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_RCC_OscConfig+0x240>)
 8002e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x200>
 8002e0e:	e01b      	b.n	8002e48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_OscConfig+0x248>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e16:	f7fe fac9 	bl	80013ac <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	e00e      	b.n	8002e3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1e:	f7fe fac5 	bl	80013ac <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d907      	bls.n	8002e3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e150      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
 8002e30:	40023800 	.word	0x40023800
 8002e34:	42470000 	.word	0x42470000
 8002e38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3c:	4b88      	ldr	r3, [pc, #544]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1ea      	bne.n	8002e1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 8097 	beq.w	8002f84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e5a:	4b81      	ldr	r3, [pc, #516]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10f      	bne.n	8002e86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	4b7d      	ldr	r3, [pc, #500]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	4a7c      	ldr	r2, [pc, #496]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e74:	6413      	str	r3, [r2, #64]	; 0x40
 8002e76:	4b7a      	ldr	r3, [pc, #488]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e82:	2301      	movs	r3, #1
 8002e84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e86:	4b77      	ldr	r3, [pc, #476]	; (8003064 <HAL_RCC_OscConfig+0x474>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d118      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e92:	4b74      	ldr	r3, [pc, #464]	; (8003064 <HAL_RCC_OscConfig+0x474>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a73      	ldr	r2, [pc, #460]	; (8003064 <HAL_RCC_OscConfig+0x474>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9e:	f7fe fa85 	bl	80013ac <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea6:	f7fe fa81 	bl	80013ac <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e10c      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	4b6a      	ldr	r3, [pc, #424]	; (8003064 <HAL_RCC_OscConfig+0x474>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d106      	bne.n	8002eda <HAL_RCC_OscConfig+0x2ea>
 8002ecc:	4b64      	ldr	r3, [pc, #400]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a63      	ldr	r2, [pc, #396]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed8:	e01c      	b.n	8002f14 <HAL_RCC_OscConfig+0x324>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b05      	cmp	r3, #5
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCC_OscConfig+0x30c>
 8002ee2:	4b5f      	ldr	r3, [pc, #380]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	4a5e      	ldr	r2, [pc, #376]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	f043 0304 	orr.w	r3, r3, #4
 8002eec:	6713      	str	r3, [r2, #112]	; 0x70
 8002eee:	4b5c      	ldr	r3, [pc, #368]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	4a5b      	ldr	r2, [pc, #364]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8002efa:	e00b      	b.n	8002f14 <HAL_RCC_OscConfig+0x324>
 8002efc:	4b58      	ldr	r3, [pc, #352]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	4a57      	ldr	r2, [pc, #348]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	6713      	str	r3, [r2, #112]	; 0x70
 8002f08:	4b55      	ldr	r3, [pc, #340]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	4a54      	ldr	r2, [pc, #336]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002f0e:	f023 0304 	bic.w	r3, r3, #4
 8002f12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d015      	beq.n	8002f48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe fa46 	bl	80013ac <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f24:	f7fe fa42 	bl	80013ac <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e0cb      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3a:	4b49      	ldr	r3, [pc, #292]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0ee      	beq.n	8002f24 <HAL_RCC_OscConfig+0x334>
 8002f46:	e014      	b.n	8002f72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f48:	f7fe fa30 	bl	80013ac <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f50:	f7fe fa2c 	bl	80013ac <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e0b5      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f66:	4b3e      	ldr	r3, [pc, #248]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1ee      	bne.n	8002f50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d105      	bne.n	8002f84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f78:	4b39      	ldr	r3, [pc, #228]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	4a38      	ldr	r2, [pc, #224]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80a1 	beq.w	80030d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f8e:	4b34      	ldr	r3, [pc, #208]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d05c      	beq.n	8003054 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d141      	bne.n	8003026 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa2:	4b31      	ldr	r3, [pc, #196]	; (8003068 <HAL_RCC_OscConfig+0x478>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fa00 	bl	80013ac <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fe f9fc 	bl	80013ac <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e087      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc2:	4b27      	ldr	r3, [pc, #156]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69da      	ldr	r2, [r3, #28]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	019b      	lsls	r3, r3, #6
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	085b      	lsrs	r3, r3, #1
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	041b      	lsls	r3, r3, #16
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	491b      	ldr	r1, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <HAL_RCC_OscConfig+0x478>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffe:	f7fe f9d5 	bl	80013ac <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003006:	f7fe f9d1 	bl	80013ac <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e05c      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x416>
 8003024:	e054      	b.n	80030d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_RCC_OscConfig+0x478>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fe f9be 	bl	80013ac <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003034:	f7fe f9ba 	bl	80013ac <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e045      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCC_OscConfig+0x470>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x444>
 8003052:	e03d      	b.n	80030d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d107      	bne.n	800306c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e038      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
 8003060:	40023800 	.word	0x40023800
 8003064:	40007000 	.word	0x40007000
 8003068:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x4ec>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d028      	beq.n	80030cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d121      	bne.n	80030cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d11a      	bne.n	80030cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800309c:	4013      	ands	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d111      	bne.n	80030cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	3b01      	subs	r3, #1
 80030b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800

080030e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0cc      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f4:	4b68      	ldr	r3, [pc, #416]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d90c      	bls.n	800311c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b65      	ldr	r3, [pc, #404]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b63      	ldr	r3, [pc, #396]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0b8      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d020      	beq.n	800316a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003134:	4b59      	ldr	r3, [pc, #356]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a58      	ldr	r2, [pc, #352]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800313e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800314c:	4b53      	ldr	r3, [pc, #332]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4a52      	ldr	r2, [pc, #328]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003158:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	494d      	ldr	r1, [pc, #308]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d044      	beq.n	8003200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	4b47      	ldr	r3, [pc, #284]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d119      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e07f      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d003      	beq.n	800319e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319a:	2b03      	cmp	r3, #3
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319e:	4b3f      	ldr	r3, [pc, #252]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e06f      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ae:	4b3b      	ldr	r3, [pc, #236]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e067      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031be:	4b37      	ldr	r3, [pc, #220]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f023 0203 	bic.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4934      	ldr	r1, [pc, #208]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d0:	f7fe f8ec 	bl	80013ac <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d8:	f7fe f8e8 	bl	80013ac <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e04f      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	4b2b      	ldr	r3, [pc, #172]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 020c 	and.w	r2, r3, #12
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d1eb      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003200:	4b25      	ldr	r3, [pc, #148]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d20c      	bcs.n	8003228 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b22      	ldr	r3, [pc, #136]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e032      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003234:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4916      	ldr	r1, [pc, #88]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	490e      	ldr	r1, [pc, #56]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003266:	f000 f821 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 800326a:	4602      	mov	r2, r0
 800326c:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	490a      	ldr	r1, [pc, #40]	; (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003278:	5ccb      	ldrb	r3, [r1, r3]
 800327a:	fa22 f303 	lsr.w	r3, r2, r3
 800327e:	4a09      	ldr	r2, [pc, #36]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe f84c 	bl	8001324 <HAL_InitTick>

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023c00 	.word	0x40023c00
 800329c:	40023800 	.word	0x40023800
 80032a0:	080122d4 	.word	0x080122d4
 80032a4:	20000000 	.word	0x20000000
 80032a8:	20000004 	.word	0x20000004

080032ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b0:	b094      	sub	sp, #80	; 0x50
 80032b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	647b      	str	r3, [r7, #68]	; 0x44
 80032b8:	2300      	movs	r3, #0
 80032ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032bc:	2300      	movs	r3, #0
 80032be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c4:	4b79      	ldr	r3, [pc, #484]	; (80034ac <HAL_RCC_GetSysClockFreq+0x200>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 030c 	and.w	r3, r3, #12
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d00d      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x40>
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	f200 80e1 	bhi.w	8003498 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x34>
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d003      	beq.n	80032e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032de:	e0db      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e0:	4b73      	ldr	r3, [pc, #460]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80032e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032e4:	e0db      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032e6:	4b73      	ldr	r3, [pc, #460]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80032e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ea:	e0d8      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ec:	4b6f      	ldr	r3, [pc, #444]	; (80034ac <HAL_RCC_GetSysClockFreq+0x200>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032f6:	4b6d      	ldr	r3, [pc, #436]	; (80034ac <HAL_RCC_GetSysClockFreq+0x200>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d063      	beq.n	80033ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003302:	4b6a      	ldr	r3, [pc, #424]	; (80034ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	099b      	lsrs	r3, r3, #6
 8003308:	2200      	movs	r2, #0
 800330a:	63bb      	str	r3, [r7, #56]	; 0x38
 800330c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003314:	633b      	str	r3, [r7, #48]	; 0x30
 8003316:	2300      	movs	r3, #0
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
 800331a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800331e:	4622      	mov	r2, r4
 8003320:	462b      	mov	r3, r5
 8003322:	f04f 0000 	mov.w	r0, #0
 8003326:	f04f 0100 	mov.w	r1, #0
 800332a:	0159      	lsls	r1, r3, #5
 800332c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003330:	0150      	lsls	r0, r2, #5
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4621      	mov	r1, r4
 8003338:	1a51      	subs	r1, r2, r1
 800333a:	6139      	str	r1, [r7, #16]
 800333c:	4629      	mov	r1, r5
 800333e:	eb63 0301 	sbc.w	r3, r3, r1
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003350:	4659      	mov	r1, fp
 8003352:	018b      	lsls	r3, r1, #6
 8003354:	4651      	mov	r1, sl
 8003356:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800335a:	4651      	mov	r1, sl
 800335c:	018a      	lsls	r2, r1, #6
 800335e:	4651      	mov	r1, sl
 8003360:	ebb2 0801 	subs.w	r8, r2, r1
 8003364:	4659      	mov	r1, fp
 8003366:	eb63 0901 	sbc.w	r9, r3, r1
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800337a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800337e:	4690      	mov	r8, r2
 8003380:	4699      	mov	r9, r3
 8003382:	4623      	mov	r3, r4
 8003384:	eb18 0303 	adds.w	r3, r8, r3
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	462b      	mov	r3, r5
 800338c:	eb49 0303 	adc.w	r3, r9, r3
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800339e:	4629      	mov	r1, r5
 80033a0:	024b      	lsls	r3, r1, #9
 80033a2:	4621      	mov	r1, r4
 80033a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033a8:	4621      	mov	r1, r4
 80033aa:	024a      	lsls	r2, r1, #9
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b2:	2200      	movs	r2, #0
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033bc:	f7fc ff70 	bl	80002a0 <__aeabi_uldivmod>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4613      	mov	r3, r2
 80033c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c8:	e058      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ca:	4b38      	ldr	r3, [pc, #224]	; (80034ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	099b      	lsrs	r3, r3, #6
 80033d0:	2200      	movs	r2, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	4611      	mov	r1, r2
 80033d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033da:	623b      	str	r3, [r7, #32]
 80033dc:	2300      	movs	r3, #0
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
 80033e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033e4:	4642      	mov	r2, r8
 80033e6:	464b      	mov	r3, r9
 80033e8:	f04f 0000 	mov.w	r0, #0
 80033ec:	f04f 0100 	mov.w	r1, #0
 80033f0:	0159      	lsls	r1, r3, #5
 80033f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f6:	0150      	lsls	r0, r2, #5
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4641      	mov	r1, r8
 80033fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003402:	4649      	mov	r1, r9
 8003404:	eb63 0b01 	sbc.w	fp, r3, r1
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003414:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003418:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800341c:	ebb2 040a 	subs.w	r4, r2, sl
 8003420:	eb63 050b 	sbc.w	r5, r3, fp
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	00eb      	lsls	r3, r5, #3
 800342e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003432:	00e2      	lsls	r2, r4, #3
 8003434:	4614      	mov	r4, r2
 8003436:	461d      	mov	r5, r3
 8003438:	4643      	mov	r3, r8
 800343a:	18e3      	adds	r3, r4, r3
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	464b      	mov	r3, r9
 8003440:	eb45 0303 	adc.w	r3, r5, r3
 8003444:	607b      	str	r3, [r7, #4]
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003452:	4629      	mov	r1, r5
 8003454:	028b      	lsls	r3, r1, #10
 8003456:	4621      	mov	r1, r4
 8003458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800345c:	4621      	mov	r1, r4
 800345e:	028a      	lsls	r2, r1, #10
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003466:	2200      	movs	r2, #0
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	61fa      	str	r2, [r7, #28]
 800346c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003470:	f7fc ff16 	bl	80002a0 <__aeabi_uldivmod>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4613      	mov	r3, r2
 800347a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCC_GetSysClockFreq+0x200>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	3301      	adds	r3, #1
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800348c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800348e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003496:	e002      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800349a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800349c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3750      	adds	r7, #80	; 0x50
 80034a4:	46bd      	mov	sp, r7
 80034a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	00f42400 	.word	0x00f42400
 80034b4:	007a1200 	.word	0x007a1200

080034b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034bc:	4b03      	ldr	r3, [pc, #12]	; (80034cc <HAL_RCC_GetHCLKFreq+0x14>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000000 	.word	0x20000000

080034d0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80034d6:	4b8d      	ldr	r3, [pc, #564]	; (800370c <MX_LWIP_Init+0x23c>)
 80034d8:	22c0      	movs	r2, #192	; 0xc0
 80034da:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80034dc:	4b8b      	ldr	r3, [pc, #556]	; (800370c <MX_LWIP_Init+0x23c>)
 80034de:	22a8      	movs	r2, #168	; 0xa8
 80034e0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 80034e2:	4b8a      	ldr	r3, [pc, #552]	; (800370c <MX_LWIP_Init+0x23c>)
 80034e4:	2202      	movs	r2, #2
 80034e6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 80034e8:	4b88      	ldr	r3, [pc, #544]	; (800370c <MX_LWIP_Init+0x23c>)
 80034ea:	226f      	movs	r2, #111	; 0x6f
 80034ec:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80034ee:	4b88      	ldr	r3, [pc, #544]	; (8003710 <MX_LWIP_Init+0x240>)
 80034f0:	22ff      	movs	r2, #255	; 0xff
 80034f2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80034f4:	4b86      	ldr	r3, [pc, #536]	; (8003710 <MX_LWIP_Init+0x240>)
 80034f6:	22ff      	movs	r2, #255	; 0xff
 80034f8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80034fa:	4b85      	ldr	r3, [pc, #532]	; (8003710 <MX_LWIP_Init+0x240>)
 80034fc:	22ff      	movs	r2, #255	; 0xff
 80034fe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003500:	4b83      	ldr	r3, [pc, #524]	; (8003710 <MX_LWIP_Init+0x240>)
 8003502:	2200      	movs	r2, #0
 8003504:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003506:	4b83      	ldr	r3, [pc, #524]	; (8003714 <MX_LWIP_Init+0x244>)
 8003508:	22c0      	movs	r2, #192	; 0xc0
 800350a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800350c:	4b81      	ldr	r3, [pc, #516]	; (8003714 <MX_LWIP_Init+0x244>)
 800350e:	22a8      	movs	r2, #168	; 0xa8
 8003510:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 8003512:	4b80      	ldr	r3, [pc, #512]	; (8003714 <MX_LWIP_Init+0x244>)
 8003514:	2202      	movs	r2, #2
 8003516:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003518:	4b7e      	ldr	r3, [pc, #504]	; (8003714 <MX_LWIP_Init+0x244>)
 800351a:	2201      	movs	r2, #1
 800351c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800351e:	f000 fd1d 	bl	8003f5c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003522:	4b7a      	ldr	r3, [pc, #488]	; (800370c <MX_LWIP_Init+0x23c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	061a      	lsls	r2, r3, #24
 8003528:	4b78      	ldr	r3, [pc, #480]	; (800370c <MX_LWIP_Init+0x23c>)
 800352a:	785b      	ldrb	r3, [r3, #1]
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	431a      	orrs	r2, r3
 8003530:	4b76      	ldr	r3, [pc, #472]	; (800370c <MX_LWIP_Init+0x23c>)
 8003532:	789b      	ldrb	r3, [r3, #2]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	4313      	orrs	r3, r2
 8003538:	4a74      	ldr	r2, [pc, #464]	; (800370c <MX_LWIP_Init+0x23c>)
 800353a:	78d2      	ldrb	r2, [r2, #3]
 800353c:	4313      	orrs	r3, r2
 800353e:	061a      	lsls	r2, r3, #24
 8003540:	4b72      	ldr	r3, [pc, #456]	; (800370c <MX_LWIP_Init+0x23c>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	0619      	lsls	r1, r3, #24
 8003546:	4b71      	ldr	r3, [pc, #452]	; (800370c <MX_LWIP_Init+0x23c>)
 8003548:	785b      	ldrb	r3, [r3, #1]
 800354a:	041b      	lsls	r3, r3, #16
 800354c:	4319      	orrs	r1, r3
 800354e:	4b6f      	ldr	r3, [pc, #444]	; (800370c <MX_LWIP_Init+0x23c>)
 8003550:	789b      	ldrb	r3, [r3, #2]
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	430b      	orrs	r3, r1
 8003556:	496d      	ldr	r1, [pc, #436]	; (800370c <MX_LWIP_Init+0x23c>)
 8003558:	78c9      	ldrb	r1, [r1, #3]
 800355a:	430b      	orrs	r3, r1
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003562:	431a      	orrs	r2, r3
 8003564:	4b69      	ldr	r3, [pc, #420]	; (800370c <MX_LWIP_Init+0x23c>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	0619      	lsls	r1, r3, #24
 800356a:	4b68      	ldr	r3, [pc, #416]	; (800370c <MX_LWIP_Init+0x23c>)
 800356c:	785b      	ldrb	r3, [r3, #1]
 800356e:	041b      	lsls	r3, r3, #16
 8003570:	4319      	orrs	r1, r3
 8003572:	4b66      	ldr	r3, [pc, #408]	; (800370c <MX_LWIP_Init+0x23c>)
 8003574:	789b      	ldrb	r3, [r3, #2]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	430b      	orrs	r3, r1
 800357a:	4964      	ldr	r1, [pc, #400]	; (800370c <MX_LWIP_Init+0x23c>)
 800357c:	78c9      	ldrb	r1, [r1, #3]
 800357e:	430b      	orrs	r3, r1
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003586:	431a      	orrs	r2, r3
 8003588:	4b60      	ldr	r3, [pc, #384]	; (800370c <MX_LWIP_Init+0x23c>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	0619      	lsls	r1, r3, #24
 800358e:	4b5f      	ldr	r3, [pc, #380]	; (800370c <MX_LWIP_Init+0x23c>)
 8003590:	785b      	ldrb	r3, [r3, #1]
 8003592:	041b      	lsls	r3, r3, #16
 8003594:	4319      	orrs	r1, r3
 8003596:	4b5d      	ldr	r3, [pc, #372]	; (800370c <MX_LWIP_Init+0x23c>)
 8003598:	789b      	ldrb	r3, [r3, #2]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	430b      	orrs	r3, r1
 800359e:	495b      	ldr	r1, [pc, #364]	; (800370c <MX_LWIP_Init+0x23c>)
 80035a0:	78c9      	ldrb	r1, [r1, #3]
 80035a2:	430b      	orrs	r3, r1
 80035a4:	0e1b      	lsrs	r3, r3, #24
 80035a6:	4313      	orrs	r3, r2
 80035a8:	4a5b      	ldr	r2, [pc, #364]	; (8003718 <MX_LWIP_Init+0x248>)
 80035aa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80035ac:	4b58      	ldr	r3, [pc, #352]	; (8003710 <MX_LWIP_Init+0x240>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	061a      	lsls	r2, r3, #24
 80035b2:	4b57      	ldr	r3, [pc, #348]	; (8003710 <MX_LWIP_Init+0x240>)
 80035b4:	785b      	ldrb	r3, [r3, #1]
 80035b6:	041b      	lsls	r3, r3, #16
 80035b8:	431a      	orrs	r2, r3
 80035ba:	4b55      	ldr	r3, [pc, #340]	; (8003710 <MX_LWIP_Init+0x240>)
 80035bc:	789b      	ldrb	r3, [r3, #2]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	4313      	orrs	r3, r2
 80035c2:	4a53      	ldr	r2, [pc, #332]	; (8003710 <MX_LWIP_Init+0x240>)
 80035c4:	78d2      	ldrb	r2, [r2, #3]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	061a      	lsls	r2, r3, #24
 80035ca:	4b51      	ldr	r3, [pc, #324]	; (8003710 <MX_LWIP_Init+0x240>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	0619      	lsls	r1, r3, #24
 80035d0:	4b4f      	ldr	r3, [pc, #316]	; (8003710 <MX_LWIP_Init+0x240>)
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	041b      	lsls	r3, r3, #16
 80035d6:	4319      	orrs	r1, r3
 80035d8:	4b4d      	ldr	r3, [pc, #308]	; (8003710 <MX_LWIP_Init+0x240>)
 80035da:	789b      	ldrb	r3, [r3, #2]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	430b      	orrs	r3, r1
 80035e0:	494b      	ldr	r1, [pc, #300]	; (8003710 <MX_LWIP_Init+0x240>)
 80035e2:	78c9      	ldrb	r1, [r1, #3]
 80035e4:	430b      	orrs	r3, r1
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035ec:	431a      	orrs	r2, r3
 80035ee:	4b48      	ldr	r3, [pc, #288]	; (8003710 <MX_LWIP_Init+0x240>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	0619      	lsls	r1, r3, #24
 80035f4:	4b46      	ldr	r3, [pc, #280]	; (8003710 <MX_LWIP_Init+0x240>)
 80035f6:	785b      	ldrb	r3, [r3, #1]
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	4319      	orrs	r1, r3
 80035fc:	4b44      	ldr	r3, [pc, #272]	; (8003710 <MX_LWIP_Init+0x240>)
 80035fe:	789b      	ldrb	r3, [r3, #2]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	430b      	orrs	r3, r1
 8003604:	4942      	ldr	r1, [pc, #264]	; (8003710 <MX_LWIP_Init+0x240>)
 8003606:	78c9      	ldrb	r1, [r1, #3]
 8003608:	430b      	orrs	r3, r1
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003610:	431a      	orrs	r2, r3
 8003612:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <MX_LWIP_Init+0x240>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	0619      	lsls	r1, r3, #24
 8003618:	4b3d      	ldr	r3, [pc, #244]	; (8003710 <MX_LWIP_Init+0x240>)
 800361a:	785b      	ldrb	r3, [r3, #1]
 800361c:	041b      	lsls	r3, r3, #16
 800361e:	4319      	orrs	r1, r3
 8003620:	4b3b      	ldr	r3, [pc, #236]	; (8003710 <MX_LWIP_Init+0x240>)
 8003622:	789b      	ldrb	r3, [r3, #2]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	430b      	orrs	r3, r1
 8003628:	4939      	ldr	r1, [pc, #228]	; (8003710 <MX_LWIP_Init+0x240>)
 800362a:	78c9      	ldrb	r1, [r1, #3]
 800362c:	430b      	orrs	r3, r1
 800362e:	0e1b      	lsrs	r3, r3, #24
 8003630:	4313      	orrs	r3, r2
 8003632:	4a3a      	ldr	r2, [pc, #232]	; (800371c <MX_LWIP_Init+0x24c>)
 8003634:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003636:	4b37      	ldr	r3, [pc, #220]	; (8003714 <MX_LWIP_Init+0x244>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	061a      	lsls	r2, r3, #24
 800363c:	4b35      	ldr	r3, [pc, #212]	; (8003714 <MX_LWIP_Init+0x244>)
 800363e:	785b      	ldrb	r3, [r3, #1]
 8003640:	041b      	lsls	r3, r3, #16
 8003642:	431a      	orrs	r2, r3
 8003644:	4b33      	ldr	r3, [pc, #204]	; (8003714 <MX_LWIP_Init+0x244>)
 8003646:	789b      	ldrb	r3, [r3, #2]
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	4313      	orrs	r3, r2
 800364c:	4a31      	ldr	r2, [pc, #196]	; (8003714 <MX_LWIP_Init+0x244>)
 800364e:	78d2      	ldrb	r2, [r2, #3]
 8003650:	4313      	orrs	r3, r2
 8003652:	061a      	lsls	r2, r3, #24
 8003654:	4b2f      	ldr	r3, [pc, #188]	; (8003714 <MX_LWIP_Init+0x244>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	0619      	lsls	r1, r3, #24
 800365a:	4b2e      	ldr	r3, [pc, #184]	; (8003714 <MX_LWIP_Init+0x244>)
 800365c:	785b      	ldrb	r3, [r3, #1]
 800365e:	041b      	lsls	r3, r3, #16
 8003660:	4319      	orrs	r1, r3
 8003662:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <MX_LWIP_Init+0x244>)
 8003664:	789b      	ldrb	r3, [r3, #2]
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	430b      	orrs	r3, r1
 800366a:	492a      	ldr	r1, [pc, #168]	; (8003714 <MX_LWIP_Init+0x244>)
 800366c:	78c9      	ldrb	r1, [r1, #3]
 800366e:	430b      	orrs	r3, r1
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003676:	431a      	orrs	r2, r3
 8003678:	4b26      	ldr	r3, [pc, #152]	; (8003714 <MX_LWIP_Init+0x244>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	0619      	lsls	r1, r3, #24
 800367e:	4b25      	ldr	r3, [pc, #148]	; (8003714 <MX_LWIP_Init+0x244>)
 8003680:	785b      	ldrb	r3, [r3, #1]
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	4319      	orrs	r1, r3
 8003686:	4b23      	ldr	r3, [pc, #140]	; (8003714 <MX_LWIP_Init+0x244>)
 8003688:	789b      	ldrb	r3, [r3, #2]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	430b      	orrs	r3, r1
 800368e:	4921      	ldr	r1, [pc, #132]	; (8003714 <MX_LWIP_Init+0x244>)
 8003690:	78c9      	ldrb	r1, [r1, #3]
 8003692:	430b      	orrs	r3, r1
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800369a:	431a      	orrs	r2, r3
 800369c:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <MX_LWIP_Init+0x244>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	0619      	lsls	r1, r3, #24
 80036a2:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <MX_LWIP_Init+0x244>)
 80036a4:	785b      	ldrb	r3, [r3, #1]
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	4319      	orrs	r1, r3
 80036aa:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <MX_LWIP_Init+0x244>)
 80036ac:	789b      	ldrb	r3, [r3, #2]
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	430b      	orrs	r3, r1
 80036b2:	4918      	ldr	r1, [pc, #96]	; (8003714 <MX_LWIP_Init+0x244>)
 80036b4:	78c9      	ldrb	r1, [r1, #3]
 80036b6:	430b      	orrs	r3, r1
 80036b8:	0e1b      	lsrs	r3, r3, #24
 80036ba:	4313      	orrs	r3, r2
 80036bc:	4a18      	ldr	r2, [pc, #96]	; (8003720 <MX_LWIP_Init+0x250>)
 80036be:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80036c0:	4b18      	ldr	r3, [pc, #96]	; (8003724 <MX_LWIP_Init+0x254>)
 80036c2:	9302      	str	r3, [sp, #8]
 80036c4:	4b18      	ldr	r3, [pc, #96]	; (8003728 <MX_LWIP_Init+0x258>)
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	2300      	movs	r3, #0
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	4b14      	ldr	r3, [pc, #80]	; (8003720 <MX_LWIP_Init+0x250>)
 80036ce:	4a13      	ldr	r2, [pc, #76]	; (800371c <MX_LWIP_Init+0x24c>)
 80036d0:	4911      	ldr	r1, [pc, #68]	; (8003718 <MX_LWIP_Init+0x248>)
 80036d2:	4816      	ldr	r0, [pc, #88]	; (800372c <MX_LWIP_Init+0x25c>)
 80036d4:	f001 f92e 	bl	8004934 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80036d8:	4814      	ldr	r0, [pc, #80]	; (800372c <MX_LWIP_Init+0x25c>)
 80036da:	f001 fadd 	bl	8004c98 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <MX_LWIP_Init+0x25c>)
 80036e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80036e4:	089b      	lsrs	r3, r3, #2
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80036f0:	480e      	ldr	r0, [pc, #56]	; (800372c <MX_LWIP_Init+0x25c>)
 80036f2:	f001 fae1 	bl	8004cb8 <netif_set_up>
 80036f6:	e002      	b.n	80036fe <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80036f8:	480c      	ldr	r0, [pc, #48]	; (800372c <MX_LWIP_Init+0x25c>)
 80036fa:	f001 fb49 	bl	8004d90 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80036fe:	490c      	ldr	r1, [pc, #48]	; (8003730 <MX_LWIP_Init+0x260>)
 8003700:	480a      	ldr	r0, [pc, #40]	; (800372c <MX_LWIP_Init+0x25c>)
 8003702:	f001 fbdb 	bl	8004ebc <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003706:	bf00      	nop
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	200000f0 	.word	0x200000f0
 8003710:	200000f4 	.word	0x200000f4
 8003714:	200000f8 	.word	0x200000f8
 8003718:	200000e4 	.word	0x200000e4
 800371c:	200000e8 	.word	0x200000e8
 8003720:	200000ec 	.word	0x200000ec
 8003724:	0800e6a9 	.word	0x0800e6a9
 8003728:	08003a41 	.word	0x08003a41
 800372c:	200000b0 	.word	0x200000b0
 8003730:	08003785 	.word	0x08003785

08003734 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800373c:	f7fd fe36 	bl	80013ac <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	4b08      	ldr	r3, [pc, #32]	; (8003764 <Ethernet_Link_Periodic_Handle+0x30>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b63      	cmp	r3, #99	; 0x63
 800374a:	d907      	bls.n	800375c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800374c:	f7fd fe2e 	bl	80013ac <HAL_GetTick>
 8003750:	4603      	mov	r3, r0
 8003752:	4a04      	ldr	r2, [pc, #16]	; (8003764 <Ethernet_Link_Periodic_Handle+0x30>)
 8003754:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fad6 	bl	8003d08 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200000ac 	.word	0x200000ac

08003768 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800376c:	4804      	ldr	r0, [pc, #16]	; (8003780 <MX_LWIP_Process+0x18>)
 800376e:	f000 f947 	bl	8003a00 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003772:	f008 fb1d 	bl	800bdb0 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8003776:	4802      	ldr	r0, [pc, #8]	; (8003780 <MX_LWIP_Process+0x18>)
 8003778:	f7ff ffdc 	bl	8003734 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800377c:	bf00      	nop
 800377e:	bd80      	pop	{r7, pc}
 8003780:	200000b0 	.word	0x200000b0

08003784 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80037a4:	4b40      	ldr	r3, [pc, #256]	; (80038a8 <low_level_init+0x110>)
 80037a6:	4a41      	ldr	r2, [pc, #260]	; (80038ac <low_level_init+0x114>)
 80037a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80037aa:	2300      	movs	r3, #0
 80037ac:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80037b2:	23e1      	movs	r3, #225	; 0xe1
 80037b4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80037b6:	2300      	movs	r3, #0
 80037b8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80037ba:	2300      	movs	r3, #0
 80037bc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80037be:	2300      	movs	r3, #0
 80037c0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80037c2:	4a39      	ldr	r2, [pc, #228]	; (80038a8 <low_level_init+0x110>)
 80037c4:	f107 0308 	add.w	r3, r7, #8
 80037c8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80037ca:	4b37      	ldr	r3, [pc, #220]	; (80038a8 <low_level_init+0x110>)
 80037cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80037d0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80037d2:	4b35      	ldr	r3, [pc, #212]	; (80038a8 <low_level_init+0x110>)
 80037d4:	4a36      	ldr	r2, [pc, #216]	; (80038b0 <low_level_init+0x118>)
 80037d6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80037d8:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <low_level_init+0x110>)
 80037da:	4a36      	ldr	r2, [pc, #216]	; (80038b4 <low_level_init+0x11c>)
 80037dc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80037de:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <low_level_init+0x110>)
 80037e0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80037e4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80037e6:	4830      	ldr	r0, [pc, #192]	; (80038a8 <low_level_init+0x110>)
 80037e8:	f7fd fef6 	bl	80015d8 <HAL_ETH_Init>
 80037ec:	4603      	mov	r3, r0
 80037ee:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80037f0:	2238      	movs	r2, #56	; 0x38
 80037f2:	2100      	movs	r1, #0
 80037f4:	4830      	ldr	r0, [pc, #192]	; (80038b8 <low_level_init+0x120>)
 80037f6:	f00b f980 	bl	800eafa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80037fa:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <low_level_init+0x120>)
 80037fc:	2221      	movs	r2, #33	; 0x21
 80037fe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003800:	4b2d      	ldr	r3, [pc, #180]	; (80038b8 <low_level_init+0x120>)
 8003802:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003806:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003808:	4b2b      	ldr	r3, [pc, #172]	; (80038b8 <low_level_init+0x120>)
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800380e:	482b      	ldr	r0, [pc, #172]	; (80038bc <low_level_init+0x124>)
 8003810:	f000 ff58 	bl	80046c4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2206      	movs	r2, #6
 8003818:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800381c:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <low_level_init+0x110>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003828:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <low_level_init+0x110>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	785a      	ldrb	r2, [r3, #1]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <low_level_init+0x110>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	789a      	ldrb	r2, [r3, #2]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <low_level_init+0x110>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	78da      	ldrb	r2, [r3, #3]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800384c:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <low_level_init+0x110>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	791a      	ldrb	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003858:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <low_level_init+0x110>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	795a      	ldrb	r2, [r3, #5]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800386a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003872:	f043 030a 	orr.w	r3, r3, #10
 8003876:	b2da      	uxtb	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800387e:	4910      	ldr	r1, [pc, #64]	; (80038c0 <low_level_init+0x128>)
 8003880:	4810      	ldr	r0, [pc, #64]	; (80038c4 <low_level_init+0x12c>)
 8003882:	f7fd fbcc 	bl	800101e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8003886:	480f      	ldr	r0, [pc, #60]	; (80038c4 <low_level_init+0x12c>)
 8003888:	f7fd fbfb 	bl	8001082 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d103      	bne.n	800389a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fa38 	bl	8003d08 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003898:	e001      	b.n	800389e <low_level_init+0x106>
    Error_Handler();
 800389a:	f7fc fffb 	bl	8000894 <Error_Handler>
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20004bc8 	.word	0x20004bc8
 80038ac:	40028000 	.word	0x40028000
 80038b0:	20004b28 	.word	0x20004b28
 80038b4:	20004a88 	.word	0x20004a88
 80038b8:	20004c78 	.word	0x20004c78
 80038bc:	080122e4 	.word	0x080122e4
 80038c0:	2000000c 	.word	0x2000000c
 80038c4:	20004cb0 	.word	0x20004cb0

080038c8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b092      	sub	sp, #72	; 0x48
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80038e0:	f107 030c 	add.w	r3, r7, #12
 80038e4:	2230      	movs	r2, #48	; 0x30
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f00b f906 	bl	800eafa <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80038ee:	f107 030c 	add.w	r3, r7, #12
 80038f2:	2230      	movs	r2, #48	; 0x30
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f00b f8ff 	bl	800eafa <memset>

  for(q = p; q != NULL; q = q->next)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003900:	e045      	b.n	800398e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003904:	2b03      	cmp	r3, #3
 8003906:	d902      	bls.n	800390e <low_level_output+0x46>
      return ERR_IF;
 8003908:	f06f 030b 	mvn.w	r3, #11
 800390c:	e055      	b.n	80039ba <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800390e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003910:	6859      	ldr	r1, [r3, #4]
 8003912:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003914:	4613      	mov	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	3348      	adds	r3, #72	; 0x48
 800391e:	443b      	add	r3, r7
 8003920:	3b3c      	subs	r3, #60	; 0x3c
 8003922:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003926:	895b      	ldrh	r3, [r3, #10]
 8003928:	4619      	mov	r1, r3
 800392a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	3348      	adds	r3, #72	; 0x48
 8003936:	443b      	add	r3, r7
 8003938:	3b38      	subs	r3, #56	; 0x38
 800393a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800393c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800393e:	2b00      	cmp	r3, #0
 8003940:	d011      	beq.n	8003966 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003944:	1e5a      	subs	r2, r3, #1
 8003946:	f107 000c 	add.w	r0, r7, #12
 800394a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800394c:	460b      	mov	r3, r1
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	440b      	add	r3, r1
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	18c1      	adds	r1, r0, r3
 8003956:	4613      	mov	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	3348      	adds	r3, #72	; 0x48
 8003960:	443b      	add	r3, r7
 8003962:	3b34      	subs	r3, #52	; 0x34
 8003964:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800396e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003970:	4613      	mov	r3, r2
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	3348      	adds	r3, #72	; 0x48
 800397a:	443b      	add	r3, r7
 800397c:	3b34      	subs	r3, #52	; 0x34
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003984:	3301      	adds	r3, #1
 8003986:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	643b      	str	r3, [r7, #64]	; 0x40
 800398e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1b6      	bne.n	8003902 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	891b      	ldrh	r3, [r3, #8]
 8003998:	461a      	mov	r2, r3
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <low_level_output+0xfc>)
 800399c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <low_level_output+0xfc>)
 80039a0:	f107 030c 	add.w	r3, r7, #12
 80039a4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80039a6:	4a07      	ldr	r2, [pc, #28]	; (80039c4 <low_level_output+0xfc>)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80039ac:	2214      	movs	r2, #20
 80039ae:	4905      	ldr	r1, [pc, #20]	; (80039c4 <low_level_output+0xfc>)
 80039b0:	4805      	ldr	r0, [pc, #20]	; (80039c8 <low_level_output+0x100>)
 80039b2:	f7fd ff47 	bl	8001844 <HAL_ETH_Transmit>

  return errval;
 80039b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3748      	adds	r7, #72	; 0x48
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20004c78 	.word	0x20004c78
 80039c8:	20004bc8 	.word	0x20004bc8

080039cc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <low_level_input+0x2c>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d105      	bne.n	80039ec <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	4619      	mov	r1, r3
 80039e6:	4805      	ldr	r0, [pc, #20]	; (80039fc <low_level_input+0x30>)
 80039e8:	f7fd ffc0 	bl	800196c <HAL_ETH_ReadData>
  }

  return p;
 80039ec:	68fb      	ldr	r3, [r7, #12]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20004a84 	.word	0x20004a84
 80039fc:	20004bc8 	.word	0x20004bc8

08003a00 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff ffdd 	bl	80039cc <low_level_input>
 8003a12:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	4798      	blx	r3
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f001 fdc6 	bl	80055bc <pbuf_free>
      }
    }
  } while(p!=NULL);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1ea      	bne.n	8003a0c <ethernetif_input+0xc>
}
 8003a36:	bf00      	nop
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <ethernetif_init+0x1c>
 8003a4e:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <ethernetif_init+0x48>)
 8003a50:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8003a54:	490d      	ldr	r1, [pc, #52]	; (8003a8c <ethernetif_init+0x4c>)
 8003a56:	480e      	ldr	r0, [pc, #56]	; (8003a90 <ethernetif_init+0x50>)
 8003a58:	f00a ffea 	bl	800ea30 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2273      	movs	r2, #115	; 0x73
 8003a60:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2274      	movs	r2, #116	; 0x74
 8003a68:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <ethernetif_init+0x54>)
 8003a70:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <ethernetif_init+0x58>)
 8003a76:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff fe8d 	bl	8003798 <low_level_init>

  return ERR_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	0800f8f4 	.word	0x0800f8f4
 8003a8c:	0800f910 	.word	0x0800f910
 8003a90:	0800f920 	.word	0x0800f920
 8003a94:	0800ca41 	.word	0x0800ca41
 8003a98:	080038c9 	.word	0x080038c9

08003a9c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003aa8:	68f9      	ldr	r1, [r7, #12]
 8003aaa:	4807      	ldr	r0, [pc, #28]	; (8003ac8 <pbuf_free_custom+0x2c>)
 8003aac:	f000 feec 	bl	8004888 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <pbuf_free_custom+0x30>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d102      	bne.n	8003abe <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003ab8:	4b04      	ldr	r3, [pc, #16]	; (8003acc <pbuf_free_custom+0x30>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
  }
}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	080122e4 	.word	0x080122e4
 8003acc:	20004a84 	.word	0x20004a84

08003ad0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003ad4:	f7fd fc6a 	bl	80013ac <HAL_GetTick>
 8003ad8:	4603      	mov	r3, r0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08e      	sub	sp, #56	; 0x38
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a55      	ldr	r2, [pc, #340]	; (8003c54 <HAL_ETH_MspInit+0x174>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	f040 80a4 	bne.w	8003c4c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003b04:	2300      	movs	r3, #0
 8003b06:	623b      	str	r3, [r7, #32]
 8003b08:	4b53      	ldr	r3, [pc, #332]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	4a52      	ldr	r2, [pc, #328]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b12:	6313      	str	r3, [r2, #48]	; 0x30
 8003b14:	4b50      	ldr	r3, [pc, #320]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1c:	623b      	str	r3, [r7, #32]
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	2300      	movs	r3, #0
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	4b4c      	ldr	r3, [pc, #304]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	4a4b      	ldr	r2, [pc, #300]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b30:	4b49      	ldr	r3, [pc, #292]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	4b45      	ldr	r3, [pc, #276]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	4a44      	ldr	r2, [pc, #272]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4c:	4b42      	ldr	r3, [pc, #264]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	4b3e      	ldr	r3, [pc, #248]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	4a3d      	ldr	r2, [pc, #244]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b62:	f043 0304 	orr.w	r3, r3, #4
 8003b66:	6313      	str	r3, [r2, #48]	; 0x30
 8003b68:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	4a36      	ldr	r2, [pc, #216]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6313      	str	r3, [r2, #48]	; 0x30
 8003b84:	4b34      	ldr	r3, [pc, #208]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	4b30      	ldr	r3, [pc, #192]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	4a2f      	ldr	r2, [pc, #188]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003b9a:	f043 0302 	orr.w	r3, r3, #2
 8003b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bac:	2300      	movs	r3, #0
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	4a28      	ldr	r2, [pc, #160]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bba:	6313      	str	r3, [r2, #48]	; 0x30
 8003bbc:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <HAL_ETH_MspInit+0x178>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003bc8:	2332      	movs	r3, #50	; 0x32
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bd8:	230b      	movs	r3, #11
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003be0:	4619      	mov	r1, r3
 8003be2:	481e      	ldr	r0, [pc, #120]	; (8003c5c <HAL_ETH_MspInit+0x17c>)
 8003be4:	f7fe fdee 	bl	80027c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_7;
 8003be8:	2386      	movs	r3, #134	; 0x86
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bec:	2302      	movs	r3, #2
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bf8:	230b      	movs	r3, #11
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c00:	4619      	mov	r1, r3
 8003c02:	4817      	ldr	r0, [pc, #92]	; (8003c60 <HAL_ETH_MspInit+0x180>)
 8003c04:	f7fe fdde 	bl	80027c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c16:	2303      	movs	r3, #3
 8003c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c1a:	230b      	movs	r3, #11
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c22:	4619      	mov	r1, r3
 8003c24:	480f      	ldr	r0, [pc, #60]	; (8003c64 <HAL_ETH_MspInit+0x184>)
 8003c26:	f7fe fdcd 	bl	80027c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003c2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c30:	2302      	movs	r3, #2
 8003c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c3c:	230b      	movs	r3, #11
 8003c3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c44:	4619      	mov	r1, r3
 8003c46:	4808      	ldr	r0, [pc, #32]	; (8003c68 <HAL_ETH_MspInit+0x188>)
 8003c48:	f7fe fdbc 	bl	80027c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	3738      	adds	r7, #56	; 0x38
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40028000 	.word	0x40028000
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40020800 	.word	0x40020800
 8003c60:	40020000 	.word	0x40020000
 8003c64:	40020400 	.word	0x40020400
 8003c68:	40021800 	.word	0x40021800

08003c6c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003c70:	4802      	ldr	r0, [pc, #8]	; (8003c7c <ETH_PHY_IO_Init+0x10>)
 8003c72:	f7fe f94b 	bl	8001f0c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20004bc8 	.word	0x20004bc8

08003c80 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return 0;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	68f9      	ldr	r1, [r7, #12]
 8003ca2:	4807      	ldr	r0, [pc, #28]	; (8003cc0 <ETH_PHY_IO_ReadReg+0x30>)
 8003ca4:	f7fd ff9a 	bl	8001bdc <HAL_ETH_ReadPHYRegister>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	e000      	b.n	8003cb6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20004bc8 	.word	0x20004bc8

08003cc4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	68f9      	ldr	r1, [r7, #12]
 8003cd6:	4807      	ldr	r0, [pc, #28]	; (8003cf4 <ETH_PHY_IO_WriteReg+0x30>)
 8003cd8:	f7fd ffcb 	bl	8001c72 <HAL_ETH_WritePHYRegister>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce6:	e000      	b.n	8003cea <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20004bc8 	.word	0x20004bc8

08003cf8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003cfc:	f7fd fb56 	bl	80013ac <HAL_GetTick>
 8003d00:	4603      	mov	r3, r0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b0a0      	sub	sp, #128	; 0x80
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003d10:	f107 030c 	add.w	r3, r7, #12
 8003d14:	2264      	movs	r2, #100	; 0x64
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f00a feee 	bl	800eafa <memset>
  int32_t PHYLinkState = 0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d26:	2300      	movs	r3, #0
 8003d28:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003d2e:	483a      	ldr	r0, [pc, #232]	; (8003e18 <ethernet_link_check_state+0x110>)
 8003d30:	f7fd fa4f 	bl	80011d2 <LAN8742_GetLinkState>
 8003d34:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00c      	beq.n	8003d62 <ethernet_link_check_state+0x5a>
 8003d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	dc09      	bgt.n	8003d62 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8003d4e:	4833      	ldr	r0, [pc, #204]	; (8003e1c <ethernet_link_check_state+0x114>)
 8003d50:	f7fd fd1f 	bl	8001792 <HAL_ETH_Stop>
    netif_set_down(netif);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f001 f81b 	bl	8004d90 <netif_set_down>
    netif_set_link_down(netif);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f001 f87e 	bl	8004e5c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003d60:	e055      	b.n	8003e0e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d14e      	bne.n	8003e0e <ethernet_link_check_state+0x106>
 8003d70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	dd4b      	ble.n	8003e0e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8003d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d78:	3b02      	subs	r3, #2
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d82a      	bhi.n	8003dd4 <ethernet_link_check_state+0xcc>
 8003d7e:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <ethernet_link_check_state+0x7c>)
 8003d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d84:	08003d95 	.word	0x08003d95
 8003d88:	08003da7 	.word	0x08003da7
 8003d8c:	08003db7 	.word	0x08003db7
 8003d90:	08003dc7 	.word	0x08003dc7
      duplex = ETH_FULLDUPLEX_MODE;
 8003d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d98:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003d9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d9e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003da0:	2301      	movs	r3, #1
 8003da2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003da4:	e017      	b.n	8003dd6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003daa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dae:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003db0:	2301      	movs	r3, #1
 8003db2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003db4:	e00f      	b.n	8003dd6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003db6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dba:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003dc4:	e007      	b.n	8003dd6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003dd2:	e000      	b.n	8003dd6 <ethernet_link_check_state+0xce>
      break;
 8003dd4:	bf00      	nop
    if(linkchanged)
 8003dd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d018      	beq.n	8003e0e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	4619      	mov	r1, r3
 8003de2:	480e      	ldr	r0, [pc, #56]	; (8003e1c <ethernet_link_check_state+0x114>)
 8003de4:	f7fd ff8e 	bl	8001d04 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8003dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dee:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003df0:	f107 030c 	add.w	r3, r7, #12
 8003df4:	4619      	mov	r1, r3
 8003df6:	4809      	ldr	r0, [pc, #36]	; (8003e1c <ethernet_link_check_state+0x114>)
 8003df8:	f7fe f86e 	bl	8001ed8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003dfc:	4807      	ldr	r0, [pc, #28]	; (8003e1c <ethernet_link_check_state+0x114>)
 8003dfe:	f7fd fc69 	bl	80016d4 <HAL_ETH_Start>
      netif_set_up(netif);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 ff58 	bl	8004cb8 <netif_set_up>
      netif_set_link_up(netif);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fff3 	bl	8004df4 <netif_set_link_up>
}
 8003e0e:	bf00      	nop
 8003e10:	3780      	adds	r7, #128	; 0x80
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20004cb0 	.word	0x20004cb0
 8003e1c:	20004bc8 	.word	0x20004bc8

08003e20 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003e28:	4812      	ldr	r0, [pc, #72]	; (8003e74 <HAL_ETH_RxAllocateCallback+0x54>)
 8003e2a:	f000 fcbf 	bl	80047ac <memp_malloc_pool>
 8003e2e:	60f8      	str	r0, [r7, #12]
  if (p)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d014      	beq.n	8003e60 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f103 0220 	add.w	r2, r3, #32
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4a0d      	ldr	r2, [pc, #52]	; (8003e78 <HAL_ETH_RxAllocateCallback+0x58>)
 8003e44:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003e4e:	9201      	str	r2, [sp, #4]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2241      	movs	r2, #65	; 0x41
 8003e56:	2100      	movs	r1, #0
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f001 f9f5 	bl	8005248 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003e5e:	e005      	b.n	8003e6c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <HAL_ETH_RxAllocateCallback+0x5c>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
}
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	080122e4 	.word	0x080122e4
 8003e78:	08003a9d 	.word	0x08003a9d
 8003e7c:	20004a84 	.word	0x20004a84

08003e80 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3b20      	subs	r3, #32
 8003e9e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	887a      	ldrh	r2, [r7, #2]
 8003eb0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	69fa      	ldr	r2, [r7, #28]
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e003      	b.n	8003eca <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	e009      	b.n	8003eec <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	891a      	ldrh	r2, [r3, #8]
 8003edc:	887b      	ldrh	r3, [r7, #2]
 8003ede:	4413      	add	r3, r2
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f2      	bne.n	8003ed8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003ef2:	bf00      	nop
 8003ef4:	bf00      	nop
 8003ef6:	3724      	adds	r7, #36	; 0x24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	b21a      	sxth	r2, r3
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	b21b      	sxth	r3, r3
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	b21b      	sxth	r3, r3
 8003f1c:	b29b      	uxth	r3, r3
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	061a      	lsls	r2, r3, #24
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0e1b      	lsrs	r3, r3, #24
 8003f4e:	4313      	orrs	r3, r2
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003f66:	f000 f8d5 	bl	8004114 <mem_init>
  memp_init();
 8003f6a:	f000 fbdb 	bl	8004724 <memp_init>
  pbuf_init();
  netif_init();
 8003f6e:	f000 fcd9 	bl	8004924 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003f72:	f007 ff5f 	bl	800be34 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003f76:	f001 fdbf 	bl	8005af8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003f7a:	f007 fed1 	bl	800bd20 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <ptr_to_mem+0x20>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	4413      	add	r3, r2
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	2000533c 	.word	0x2000533c

08003fac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <mem_to_ptr+0x20>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	b29b      	uxth	r3, r3
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	2000533c 	.word	0x2000533c

08003fd0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003fd0:	b590      	push	{r4, r7, lr}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003fd8:	4b45      	ldr	r3, [pc, #276]	; (80040f0 <plug_holes+0x120>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d206      	bcs.n	8003ff0 <plug_holes+0x20>
 8003fe2:	4b44      	ldr	r3, [pc, #272]	; (80040f4 <plug_holes+0x124>)
 8003fe4:	f240 12df 	movw	r2, #479	; 0x1df
 8003fe8:	4943      	ldr	r1, [pc, #268]	; (80040f8 <plug_holes+0x128>)
 8003fea:	4844      	ldr	r0, [pc, #272]	; (80040fc <plug_holes+0x12c>)
 8003fec:	f00a fd20 	bl	800ea30 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003ff0:	4b43      	ldr	r3, [pc, #268]	; (8004100 <plug_holes+0x130>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d306      	bcc.n	8004008 <plug_holes+0x38>
 8003ffa:	4b3e      	ldr	r3, [pc, #248]	; (80040f4 <plug_holes+0x124>)
 8003ffc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004000:	4940      	ldr	r1, [pc, #256]	; (8004104 <plug_holes+0x134>)
 8004002:	483e      	ldr	r0, [pc, #248]	; (80040fc <plug_holes+0x12c>)
 8004004:	f00a fd14 	bl	800ea30 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	791b      	ldrb	r3, [r3, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d006      	beq.n	800401e <plug_holes+0x4e>
 8004010:	4b38      	ldr	r3, [pc, #224]	; (80040f4 <plug_holes+0x124>)
 8004012:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004016:	493c      	ldr	r1, [pc, #240]	; (8004108 <plug_holes+0x138>)
 8004018:	4838      	ldr	r0, [pc, #224]	; (80040fc <plug_holes+0x12c>)
 800401a:	f00a fd09 	bl	800ea30 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004026:	d906      	bls.n	8004036 <plug_holes+0x66>
 8004028:	4b32      	ldr	r3, [pc, #200]	; (80040f4 <plug_holes+0x124>)
 800402a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800402e:	4937      	ldr	r1, [pc, #220]	; (800410c <plug_holes+0x13c>)
 8004030:	4832      	ldr	r0, [pc, #200]	; (80040fc <plug_holes+0x12c>)
 8004032:	f00a fcfd 	bl	800ea30 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ffa4 	bl	8003f88 <ptr_to_mem>
 8004040:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	429a      	cmp	r2, r3
 8004048:	d024      	beq.n	8004094 <plug_holes+0xc4>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	791b      	ldrb	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d120      	bne.n	8004094 <plug_holes+0xc4>
 8004052:	4b2b      	ldr	r3, [pc, #172]	; (8004100 <plug_holes+0x130>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	429a      	cmp	r2, r3
 800405a:	d01b      	beq.n	8004094 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800405c:	4b2c      	ldr	r3, [pc, #176]	; (8004110 <plug_holes+0x140>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	429a      	cmp	r2, r3
 8004064:	d102      	bne.n	800406c <plug_holes+0x9c>
      lfree = mem;
 8004066:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <plug_holes+0x140>)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	881a      	ldrh	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800407c:	d00a      	beq.n	8004094 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ff80 	bl	8003f88 <ptr_to_mem>
 8004088:	4604      	mov	r4, r0
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff ff8e 	bl	8003fac <mem_to_ptr>
 8004090:	4603      	mov	r3, r0
 8004092:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	885b      	ldrh	r3, [r3, #2]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ff75 	bl	8003f88 <ptr_to_mem>
 800409e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d01f      	beq.n	80040e8 <plug_holes+0x118>
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	791b      	ldrb	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d11b      	bne.n	80040e8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80040b0:	4b17      	ldr	r3, [pc, #92]	; (8004110 <plug_holes+0x140>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d102      	bne.n	80040c0 <plug_holes+0xf0>
      lfree = pmem;
 80040ba:	4a15      	ldr	r2, [pc, #84]	; (8004110 <plug_holes+0x140>)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	881a      	ldrh	r2, [r3, #0]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80040d0:	d00a      	beq.n	80040e8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff ff56 	bl	8003f88 <ptr_to_mem>
 80040dc:	4604      	mov	r4, r0
 80040de:	68b8      	ldr	r0, [r7, #8]
 80040e0:	f7ff ff64 	bl	8003fac <mem_to_ptr>
 80040e4:	4603      	mov	r3, r0
 80040e6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd90      	pop	{r4, r7, pc}
 80040f0:	2000533c 	.word	0x2000533c
 80040f4:	0800f948 	.word	0x0800f948
 80040f8:	0800f978 	.word	0x0800f978
 80040fc:	0800f990 	.word	0x0800f990
 8004100:	20005340 	.word	0x20005340
 8004104:	0800f9b8 	.word	0x0800f9b8
 8004108:	0800f9d4 	.word	0x0800f9d4
 800410c:	0800f9f0 	.word	0x0800f9f0
 8004110:	20005344 	.word	0x20005344

08004114 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800411a:	4b18      	ldr	r3, [pc, #96]	; (800417c <mem_init+0x68>)
 800411c:	3303      	adds	r3, #3
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	461a      	mov	r2, r3
 8004124:	4b16      	ldr	r3, [pc, #88]	; (8004180 <mem_init+0x6c>)
 8004126:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004128:	4b15      	ldr	r3, [pc, #84]	; (8004180 <mem_init+0x6c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004134:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004142:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004146:	f7ff ff1f 	bl	8003f88 <ptr_to_mem>
 800414a:	4603      	mov	r3, r0
 800414c:	4a0d      	ldr	r2, [pc, #52]	; (8004184 <mem_init+0x70>)
 800414e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <mem_init+0x70>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <mem_init+0x70>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004160:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004162:	4b08      	ldr	r3, [pc, #32]	; (8004184 <mem_init+0x70>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800416a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800416c:	4b04      	ldr	r3, [pc, #16]	; (8004180 <mem_init+0x6c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a05      	ldr	r2, [pc, #20]	; (8004188 <mem_init+0x74>)
 8004172:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20004ce8 	.word	0x20004ce8
 8004180:	2000533c 	.word	0x2000533c
 8004184:	20005340 	.word	0x20005340
 8004188:	20005344 	.word	0x20005344

0800418c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ff09 	bl	8003fac <mem_to_ptr>
 800419a:	4603      	mov	r3, r0
 800419c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fef0 	bl	8003f88 <ptr_to_mem>
 80041a8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	885b      	ldrh	r3, [r3, #2]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff feea 	bl	8003f88 <ptr_to_mem>
 80041b4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80041be:	d818      	bhi.n	80041f2 <mem_link_valid+0x66>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	885b      	ldrh	r3, [r3, #2]
 80041c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80041c8:	d813      	bhi.n	80041f2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80041ce:	8afa      	ldrh	r2, [r7, #22]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d004      	beq.n	80041de <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	8afa      	ldrh	r2, [r7, #22]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d109      	bne.n	80041f2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80041de:	4b08      	ldr	r3, [pc, #32]	; (8004200 <mem_link_valid+0x74>)
 80041e0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d006      	beq.n	80041f6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	885b      	ldrh	r3, [r3, #2]
 80041ec:	8afa      	ldrh	r2, [r7, #22]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d001      	beq.n	80041f6 <mem_link_valid+0x6a>
    return 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <mem_link_valid+0x6c>
  }
  return 1;
 80041f6:	2301      	movs	r3, #1
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20005340 	.word	0x20005340

08004204 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d04c      	beq.n	80042ac <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <mem_free+0xb0>)
 800421e:	f240 2273 	movw	r2, #627	; 0x273
 8004222:	4925      	ldr	r1, [pc, #148]	; (80042b8 <mem_free+0xb4>)
 8004224:	4825      	ldr	r0, [pc, #148]	; (80042bc <mem_free+0xb8>)
 8004226:	f00a fc03 	bl	800ea30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800422a:	e040      	b.n	80042ae <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3b08      	subs	r3, #8
 8004230:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004232:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <mem_free+0xbc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	429a      	cmp	r2, r3
 800423a:	d306      	bcc.n	800424a <mem_free+0x46>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f103 020c 	add.w	r2, r3, #12
 8004242:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <mem_free+0xc0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d907      	bls.n	800425a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800424a:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <mem_free+0xb0>)
 800424c:	f240 227f 	movw	r2, #639	; 0x27f
 8004250:	491d      	ldr	r1, [pc, #116]	; (80042c8 <mem_free+0xc4>)
 8004252:	481a      	ldr	r0, [pc, #104]	; (80042bc <mem_free+0xb8>)
 8004254:	f00a fbec 	bl	800ea30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004258:	e029      	b.n	80042ae <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	791b      	ldrb	r3, [r3, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d107      	bne.n	8004272 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <mem_free+0xb0>)
 8004264:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004268:	4918      	ldr	r1, [pc, #96]	; (80042cc <mem_free+0xc8>)
 800426a:	4814      	ldr	r0, [pc, #80]	; (80042bc <mem_free+0xb8>)
 800426c:	f00a fbe0 	bl	800ea30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004270:	e01d      	b.n	80042ae <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff ff8a 	bl	800418c <mem_link_valid>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d107      	bne.n	800428e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <mem_free+0xb0>)
 8004280:	f240 2295 	movw	r2, #661	; 0x295
 8004284:	4912      	ldr	r1, [pc, #72]	; (80042d0 <mem_free+0xcc>)
 8004286:	480d      	ldr	r0, [pc, #52]	; (80042bc <mem_free+0xb8>)
 8004288:	f00a fbd2 	bl	800ea30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800428c:	e00f      	b.n	80042ae <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <mem_free+0xd0>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	429a      	cmp	r2, r3
 800429c:	d202      	bcs.n	80042a4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800429e:	4a0d      	ldr	r2, [pc, #52]	; (80042d4 <mem_free+0xd0>)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7ff fe93 	bl	8003fd0 <plug_holes>
 80042aa:	e000      	b.n	80042ae <mem_free+0xaa>
    return;
 80042ac:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	0800f948 	.word	0x0800f948
 80042b8:	0800fa1c 	.word	0x0800fa1c
 80042bc:	0800f990 	.word	0x0800f990
 80042c0:	2000533c 	.word	0x2000533c
 80042c4:	20005340 	.word	0x20005340
 80042c8:	0800fa40 	.word	0x0800fa40
 80042cc:	0800fa5c 	.word	0x0800fa5c
 80042d0:	0800fa84 	.word	0x0800fa84
 80042d4:	20005344 	.word	0x20005344

080042d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80042e4:	887b      	ldrh	r3, [r7, #2]
 80042e6:	3303      	adds	r3, #3
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f023 0303 	bic.w	r3, r3, #3
 80042ee:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80042f0:	8bfb      	ldrh	r3, [r7, #30]
 80042f2:	2b0b      	cmp	r3, #11
 80042f4:	d801      	bhi.n	80042fa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80042f6:	230c      	movs	r3, #12
 80042f8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80042fa:	8bfb      	ldrh	r3, [r7, #30]
 80042fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004300:	d803      	bhi.n	800430a <mem_trim+0x32>
 8004302:	8bfa      	ldrh	r2, [r7, #30]
 8004304:	887b      	ldrh	r3, [r7, #2]
 8004306:	429a      	cmp	r2, r3
 8004308:	d201      	bcs.n	800430e <mem_trim+0x36>
    return NULL;
 800430a:	2300      	movs	r3, #0
 800430c:	e0cc      	b.n	80044a8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800430e:	4b68      	ldr	r3, [pc, #416]	; (80044b0 <mem_trim+0x1d8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	429a      	cmp	r2, r3
 8004316:	d304      	bcc.n	8004322 <mem_trim+0x4a>
 8004318:	4b66      	ldr	r3, [pc, #408]	; (80044b4 <mem_trim+0x1dc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	429a      	cmp	r2, r3
 8004320:	d306      	bcc.n	8004330 <mem_trim+0x58>
 8004322:	4b65      	ldr	r3, [pc, #404]	; (80044b8 <mem_trim+0x1e0>)
 8004324:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004328:	4964      	ldr	r1, [pc, #400]	; (80044bc <mem_trim+0x1e4>)
 800432a:	4865      	ldr	r0, [pc, #404]	; (80044c0 <mem_trim+0x1e8>)
 800432c:	f00a fb80 	bl	800ea30 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004330:	4b5f      	ldr	r3, [pc, #380]	; (80044b0 <mem_trim+0x1d8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	429a      	cmp	r2, r3
 8004338:	d304      	bcc.n	8004344 <mem_trim+0x6c>
 800433a:	4b5e      	ldr	r3, [pc, #376]	; (80044b4 <mem_trim+0x1dc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	429a      	cmp	r2, r3
 8004342:	d301      	bcc.n	8004348 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	e0af      	b.n	80044a8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3b08      	subs	r3, #8
 800434c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800434e:	69b8      	ldr	r0, [r7, #24]
 8004350:	f7ff fe2c 	bl	8003fac <mem_to_ptr>
 8004354:	4603      	mov	r3, r0
 8004356:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	881a      	ldrh	r2, [r3, #0]
 800435c:	8afb      	ldrh	r3, [r7, #22]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b08      	subs	r3, #8
 8004364:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004366:	8bfa      	ldrh	r2, [r7, #30]
 8004368:	8abb      	ldrh	r3, [r7, #20]
 800436a:	429a      	cmp	r2, r3
 800436c:	d906      	bls.n	800437c <mem_trim+0xa4>
 800436e:	4b52      	ldr	r3, [pc, #328]	; (80044b8 <mem_trim+0x1e0>)
 8004370:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004374:	4953      	ldr	r1, [pc, #332]	; (80044c4 <mem_trim+0x1ec>)
 8004376:	4852      	ldr	r0, [pc, #328]	; (80044c0 <mem_trim+0x1e8>)
 8004378:	f00a fb5a 	bl	800ea30 <iprintf>
  if (newsize > size) {
 800437c:	8bfa      	ldrh	r2, [r7, #30]
 800437e:	8abb      	ldrh	r3, [r7, #20]
 8004380:	429a      	cmp	r2, r3
 8004382:	d901      	bls.n	8004388 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004384:	2300      	movs	r3, #0
 8004386:	e08f      	b.n	80044a8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004388:	8bfa      	ldrh	r2, [r7, #30]
 800438a:	8abb      	ldrh	r3, [r7, #20]
 800438c:	429a      	cmp	r2, r3
 800438e:	d101      	bne.n	8004394 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	e089      	b.n	80044a8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fdf5 	bl	8003f88 <ptr_to_mem>
 800439e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	791b      	ldrb	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d13f      	bne.n	8004428 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80043b0:	d106      	bne.n	80043c0 <mem_trim+0xe8>
 80043b2:	4b41      	ldr	r3, [pc, #260]	; (80044b8 <mem_trim+0x1e0>)
 80043b4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80043b8:	4943      	ldr	r1, [pc, #268]	; (80044c8 <mem_trim+0x1f0>)
 80043ba:	4841      	ldr	r0, [pc, #260]	; (80044c0 <mem_trim+0x1e8>)
 80043bc:	f00a fb38 	bl	800ea30 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80043c6:	8afa      	ldrh	r2, [r7, #22]
 80043c8:	8bfb      	ldrh	r3, [r7, #30]
 80043ca:	4413      	add	r3, r2
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3308      	adds	r3, #8
 80043d0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80043d2:	4b3e      	ldr	r3, [pc, #248]	; (80044cc <mem_trim+0x1f4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d106      	bne.n	80043ea <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80043dc:	89fb      	ldrh	r3, [r7, #14]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fdd2 	bl	8003f88 <ptr_to_mem>
 80043e4:	4603      	mov	r3, r0
 80043e6:	4a39      	ldr	r2, [pc, #228]	; (80044cc <mem_trim+0x1f4>)
 80043e8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80043ea:	89fb      	ldrh	r3, [r7, #14]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fdcb 	bl	8003f88 <ptr_to_mem>
 80043f2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2200      	movs	r2, #0
 80043f8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	89ba      	ldrh	r2, [r7, #12]
 80043fe:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	8afa      	ldrh	r2, [r7, #22]
 8004404:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	89fa      	ldrh	r2, [r7, #14]
 800440a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004414:	d047      	beq.n	80044a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fdb4 	bl	8003f88 <ptr_to_mem>
 8004420:	4602      	mov	r2, r0
 8004422:	89fb      	ldrh	r3, [r7, #14]
 8004424:	8053      	strh	r3, [r2, #2]
 8004426:	e03e      	b.n	80044a6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004428:	8bfb      	ldrh	r3, [r7, #30]
 800442a:	f103 0214 	add.w	r2, r3, #20
 800442e:	8abb      	ldrh	r3, [r7, #20]
 8004430:	429a      	cmp	r2, r3
 8004432:	d838      	bhi.n	80044a6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004434:	8afa      	ldrh	r2, [r7, #22]
 8004436:	8bfb      	ldrh	r3, [r7, #30]
 8004438:	4413      	add	r3, r2
 800443a:	b29b      	uxth	r3, r3
 800443c:	3308      	adds	r3, #8
 800443e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004448:	d106      	bne.n	8004458 <mem_trim+0x180>
 800444a:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <mem_trim+0x1e0>)
 800444c:	f240 3216 	movw	r2, #790	; 0x316
 8004450:	491d      	ldr	r1, [pc, #116]	; (80044c8 <mem_trim+0x1f0>)
 8004452:	481b      	ldr	r0, [pc, #108]	; (80044c0 <mem_trim+0x1e8>)
 8004454:	f00a faec 	bl	800ea30 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004458:	89fb      	ldrh	r3, [r7, #14]
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fd94 	bl	8003f88 <ptr_to_mem>
 8004460:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004462:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <mem_trim+0x1f4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	429a      	cmp	r2, r3
 800446a:	d202      	bcs.n	8004472 <mem_trim+0x19a>
      lfree = mem2;
 800446c:	4a17      	ldr	r2, [pc, #92]	; (80044cc <mem_trim+0x1f4>)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2200      	movs	r2, #0
 8004476:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	881a      	ldrh	r2, [r3, #0]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	8afa      	ldrh	r2, [r7, #22]
 8004484:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	89fa      	ldrh	r2, [r7, #14]
 800448a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004494:	d007      	beq.n	80044a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fd74 	bl	8003f88 <ptr_to_mem>
 80044a0:	4602      	mov	r2, r0
 80044a2:	89fb      	ldrh	r3, [r7, #14]
 80044a4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80044a6:	687b      	ldr	r3, [r7, #4]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3720      	adds	r7, #32
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	2000533c 	.word	0x2000533c
 80044b4:	20005340 	.word	0x20005340
 80044b8:	0800f948 	.word	0x0800f948
 80044bc:	0800fab8 	.word	0x0800fab8
 80044c0:	0800f990 	.word	0x0800f990
 80044c4:	0800fad0 	.word	0x0800fad0
 80044c8:	0800faf0 	.word	0x0800faf0
 80044cc:	20005344 	.word	0x20005344

080044d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <mem_malloc+0x14>
    return NULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e0d9      	b.n	8004698 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	3303      	adds	r3, #3
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f023 0303 	bic.w	r3, r3, #3
 80044ee:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80044f0:	8bbb      	ldrh	r3, [r7, #28]
 80044f2:	2b0b      	cmp	r3, #11
 80044f4:	d801      	bhi.n	80044fa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80044f6:	230c      	movs	r3, #12
 80044f8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80044fa:	8bbb      	ldrh	r3, [r7, #28]
 80044fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004500:	d803      	bhi.n	800450a <mem_malloc+0x3a>
 8004502:	8bba      	ldrh	r2, [r7, #28]
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	429a      	cmp	r2, r3
 8004508:	d201      	bcs.n	800450e <mem_malloc+0x3e>
    return NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	e0c4      	b.n	8004698 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800450e:	4b64      	ldr	r3, [pc, #400]	; (80046a0 <mem_malloc+0x1d0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fd4a 	bl	8003fac <mem_to_ptr>
 8004518:	4603      	mov	r3, r0
 800451a:	83fb      	strh	r3, [r7, #30]
 800451c:	e0b4      	b.n	8004688 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800451e:	8bfb      	ldrh	r3, [r7, #30]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fd31 	bl	8003f88 <ptr_to_mem>
 8004526:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	791b      	ldrb	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f040 80a4 	bne.w	800467a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	8bfb      	ldrh	r3, [r7, #30]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f1a3 0208 	sub.w	r2, r3, #8
 8004540:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004542:	429a      	cmp	r2, r3
 8004544:	f0c0 8099 	bcc.w	800467a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	8bfb      	ldrh	r3, [r7, #30]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f1a3 0208 	sub.w	r2, r3, #8
 8004556:	8bbb      	ldrh	r3, [r7, #28]
 8004558:	3314      	adds	r3, #20
 800455a:	429a      	cmp	r2, r3
 800455c:	d333      	bcc.n	80045c6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800455e:	8bfa      	ldrh	r2, [r7, #30]
 8004560:	8bbb      	ldrh	r3, [r7, #28]
 8004562:	4413      	add	r3, r2
 8004564:	b29b      	uxth	r3, r3
 8004566:	3308      	adds	r3, #8
 8004568:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800456a:	8a7b      	ldrh	r3, [r7, #18]
 800456c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004570:	d106      	bne.n	8004580 <mem_malloc+0xb0>
 8004572:	4b4c      	ldr	r3, [pc, #304]	; (80046a4 <mem_malloc+0x1d4>)
 8004574:	f240 3287 	movw	r2, #903	; 0x387
 8004578:	494b      	ldr	r1, [pc, #300]	; (80046a8 <mem_malloc+0x1d8>)
 800457a:	484c      	ldr	r0, [pc, #304]	; (80046ac <mem_malloc+0x1dc>)
 800457c:	f00a fa58 	bl	800ea30 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004580:	8a7b      	ldrh	r3, [r7, #18]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fd00 	bl	8003f88 <ptr_to_mem>
 8004588:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	881a      	ldrh	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8bfa      	ldrh	r2, [r7, #30]
 800459c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	8a7a      	ldrh	r2, [r7, #18]
 80045a2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2201      	movs	r2, #1
 80045a8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80045b2:	d00b      	beq.n	80045cc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fce5 	bl	8003f88 <ptr_to_mem>
 80045be:	4602      	mov	r2, r0
 80045c0:	8a7b      	ldrh	r3, [r7, #18]
 80045c2:	8053      	strh	r3, [r2, #2]
 80045c4:	e002      	b.n	80045cc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2201      	movs	r2, #1
 80045ca:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80045cc:	4b34      	ldr	r3, [pc, #208]	; (80046a0 <mem_malloc+0x1d0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d127      	bne.n	8004626 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80045d6:	4b32      	ldr	r3, [pc, #200]	; (80046a0 <mem_malloc+0x1d0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80045dc:	e005      	b.n	80045ea <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff fcd0 	bl	8003f88 <ptr_to_mem>
 80045e8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	791b      	ldrb	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d004      	beq.n	80045fc <mem_malloc+0x12c>
 80045f2:	4b2f      	ldr	r3, [pc, #188]	; (80046b0 <mem_malloc+0x1e0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d1f0      	bne.n	80045de <mem_malloc+0x10e>
          }
          lfree = cur;
 80045fc:	4a28      	ldr	r2, [pc, #160]	; (80046a0 <mem_malloc+0x1d0>)
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004602:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <mem_malloc+0x1d0>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	4b2a      	ldr	r3, [pc, #168]	; (80046b0 <mem_malloc+0x1e0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d00b      	beq.n	8004626 <mem_malloc+0x156>
 800460e:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <mem_malloc+0x1d0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	791b      	ldrb	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d006      	beq.n	8004626 <mem_malloc+0x156>
 8004618:	4b22      	ldr	r3, [pc, #136]	; (80046a4 <mem_malloc+0x1d4>)
 800461a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800461e:	4925      	ldr	r1, [pc, #148]	; (80046b4 <mem_malloc+0x1e4>)
 8004620:	4822      	ldr	r0, [pc, #136]	; (80046ac <mem_malloc+0x1dc>)
 8004622:	f00a fa05 	bl	800ea30 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004626:	8bba      	ldrh	r2, [r7, #28]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	4413      	add	r3, r2
 800462c:	3308      	adds	r3, #8
 800462e:	4a20      	ldr	r2, [pc, #128]	; (80046b0 <mem_malloc+0x1e0>)
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	4293      	cmp	r3, r2
 8004634:	d906      	bls.n	8004644 <mem_malloc+0x174>
 8004636:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <mem_malloc+0x1d4>)
 8004638:	f240 32b9 	movw	r2, #953	; 0x3b9
 800463c:	491e      	ldr	r1, [pc, #120]	; (80046b8 <mem_malloc+0x1e8>)
 800463e:	481b      	ldr	r0, [pc, #108]	; (80046ac <mem_malloc+0x1dc>)
 8004640:	f00a f9f6 	bl	800ea30 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d006      	beq.n	800465c <mem_malloc+0x18c>
 800464e:	4b15      	ldr	r3, [pc, #84]	; (80046a4 <mem_malloc+0x1d4>)
 8004650:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004654:	4919      	ldr	r1, [pc, #100]	; (80046bc <mem_malloc+0x1ec>)
 8004656:	4815      	ldr	r0, [pc, #84]	; (80046ac <mem_malloc+0x1dc>)
 8004658:	f00a f9ea 	bl	800ea30 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d006      	beq.n	8004674 <mem_malloc+0x1a4>
 8004666:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <mem_malloc+0x1d4>)
 8004668:	f240 32bd 	movw	r2, #957	; 0x3bd
 800466c:	4914      	ldr	r1, [pc, #80]	; (80046c0 <mem_malloc+0x1f0>)
 800466e:	480f      	ldr	r0, [pc, #60]	; (80046ac <mem_malloc+0x1dc>)
 8004670:	f00a f9de 	bl	800ea30 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	3308      	adds	r3, #8
 8004678:	e00e      	b.n	8004698 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800467a:	8bfb      	ldrh	r3, [r7, #30]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fc83 	bl	8003f88 <ptr_to_mem>
 8004682:	4603      	mov	r3, r0
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004688:	8bfa      	ldrh	r2, [r7, #30]
 800468a:	8bbb      	ldrh	r3, [r7, #28]
 800468c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004690:	429a      	cmp	r2, r3
 8004692:	f4ff af44 	bcc.w	800451e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20005344 	.word	0x20005344
 80046a4:	0800f948 	.word	0x0800f948
 80046a8:	0800faf0 	.word	0x0800faf0
 80046ac:	0800f990 	.word	0x0800f990
 80046b0:	20005340 	.word	0x20005340
 80046b4:	0800fb04 	.word	0x0800fb04
 80046b8:	0800fb20 	.word	0x0800fb20
 80046bc:	0800fb50 	.word	0x0800fb50
 80046c0:	0800fb80 	.word	0x0800fb80

080046c4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	3303      	adds	r3, #3
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	e011      	b.n	800470a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4413      	add	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3301      	adds	r3, #1
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	885b      	ldrh	r3, [r3, #2]
 800470e:	461a      	mov	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4293      	cmp	r3, r2
 8004714:	dbe7      	blt.n	80046e6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800472a:	2300      	movs	r3, #0
 800472c:	80fb      	strh	r3, [r7, #6]
 800472e:	e009      	b.n	8004744 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	4a08      	ldr	r2, [pc, #32]	; (8004754 <memp_init+0x30>)
 8004734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff ffc3 	bl	80046c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	3301      	adds	r3, #1
 8004742:	80fb      	strh	r3, [r7, #6]
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	2b08      	cmp	r3, #8
 8004748:	d9f2      	bls.n	8004730 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800474a:	bf00      	nop
 800474c:	bf00      	nop
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	0801235c 	.word	0x0801235c

08004758 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d012      	beq.n	8004794 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d006      	beq.n	8004790 <do_memp_malloc_pool+0x38>
 8004782:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <do_memp_malloc_pool+0x48>)
 8004784:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004788:	4906      	ldr	r1, [pc, #24]	; (80047a4 <do_memp_malloc_pool+0x4c>)
 800478a:	4807      	ldr	r0, [pc, #28]	; (80047a8 <do_memp_malloc_pool+0x50>)
 800478c:	f00a f950 	bl	800ea30 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	e000      	b.n	8004796 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	0800fba4 	.word	0x0800fba4
 80047a4:	0800fbd4 	.word	0x0800fbd4
 80047a8:	0800fbf8 	.word	0x0800fbf8

080047ac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <memp_malloc_pool+0x1c>
 80047ba:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <memp_malloc_pool+0x38>)
 80047bc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80047c0:	4909      	ldr	r1, [pc, #36]	; (80047e8 <memp_malloc_pool+0x3c>)
 80047c2:	480a      	ldr	r0, [pc, #40]	; (80047ec <memp_malloc_pool+0x40>)
 80047c4:	f00a f934 	bl	800ea30 <iprintf>
  if (desc == NULL) {
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <memp_malloc_pool+0x26>
    return NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	e003      	b.n	80047da <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff ffc0 	bl	8004758 <do_memp_malloc_pool>
 80047d8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	0800fba4 	.word	0x0800fba4
 80047e8:	0800fc20 	.word	0x0800fc20
 80047ec:	0800fbf8 	.word	0x0800fbf8

080047f0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d908      	bls.n	8004812 <memp_malloc+0x22>
 8004800:	4b0a      	ldr	r3, [pc, #40]	; (800482c <memp_malloc+0x3c>)
 8004802:	f240 1257 	movw	r2, #343	; 0x157
 8004806:	490a      	ldr	r1, [pc, #40]	; (8004830 <memp_malloc+0x40>)
 8004808:	480a      	ldr	r0, [pc, #40]	; (8004834 <memp_malloc+0x44>)
 800480a:	f00a f911 	bl	800ea30 <iprintf>
 800480e:	2300      	movs	r3, #0
 8004810:	e008      	b.n	8004824 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	4a08      	ldr	r2, [pc, #32]	; (8004838 <memp_malloc+0x48>)
 8004816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff ff9c 	bl	8004758 <do_memp_malloc_pool>
 8004820:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004822:	68fb      	ldr	r3, [r7, #12]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	0800fba4 	.word	0x0800fba4
 8004830:	0800fc34 	.word	0x0800fc34
 8004834:	0800fbf8 	.word	0x0800fbf8
 8004838:	0801235c 	.word	0x0801235c

0800483c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d006      	beq.n	800485e <do_memp_free_pool+0x22>
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <do_memp_free_pool+0x40>)
 8004852:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004856:	490a      	ldr	r1, [pc, #40]	; (8004880 <do_memp_free_pool+0x44>)
 8004858:	480a      	ldr	r0, [pc, #40]	; (8004884 <do_memp_free_pool+0x48>)
 800485a:	f00a f8e9 	bl	800ea30 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004874:	bf00      	nop
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	0800fba4 	.word	0x0800fba4
 8004880:	0800fc54 	.word	0x0800fc54
 8004884:	0800fbf8 	.word	0x0800fbf8

08004888 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d106      	bne.n	80048a6 <memp_free_pool+0x1e>
 8004898:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <memp_free_pool+0x3c>)
 800489a:	f240 1295 	movw	r2, #405	; 0x195
 800489e:	490a      	ldr	r1, [pc, #40]	; (80048c8 <memp_free_pool+0x40>)
 80048a0:	480a      	ldr	r0, [pc, #40]	; (80048cc <memp_free_pool+0x44>)
 80048a2:	f00a f8c5 	bl	800ea30 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <memp_free_pool+0x34>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d004      	beq.n	80048bc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80048b2:	6839      	ldr	r1, [r7, #0]
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff ffc1 	bl	800483c <do_memp_free_pool>
 80048ba:	e000      	b.n	80048be <memp_free_pool+0x36>
    return;
 80048bc:	bf00      	nop
}
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	0800fba4 	.word	0x0800fba4
 80048c8:	0800fc20 	.word	0x0800fc20
 80048cc:	0800fbf8 	.word	0x0800fbf8

080048d0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	6039      	str	r1, [r7, #0]
 80048da:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d907      	bls.n	80048f2 <memp_free+0x22>
 80048e2:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <memp_free+0x44>)
 80048e4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80048e8:	490b      	ldr	r1, [pc, #44]	; (8004918 <memp_free+0x48>)
 80048ea:	480c      	ldr	r0, [pc, #48]	; (800491c <memp_free+0x4c>)
 80048ec:	f00a f8a0 	bl	800ea30 <iprintf>
 80048f0:	e00c      	b.n	800490c <memp_free+0x3c>

  if (mem == NULL) {
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	4a09      	ldr	r2, [pc, #36]	; (8004920 <memp_free+0x50>)
 80048fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004900:	6839      	ldr	r1, [r7, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff ff9a 	bl	800483c <do_memp_free_pool>
 8004908:	e000      	b.n	800490c <memp_free+0x3c>
    return;
 800490a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	0800fba4 	.word	0x0800fba4
 8004918:	0800fc74 	.word	0x0800fc74
 800491c:	0800fbf8 	.word	0x0800fbf8
 8004920:	0801235c 	.word	0x0801235c

08004924 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d108      	bne.n	800495a <netif_add+0x26>
 8004948:	4b57      	ldr	r3, [pc, #348]	; (8004aa8 <netif_add+0x174>)
 800494a:	f240 1227 	movw	r2, #295	; 0x127
 800494e:	4957      	ldr	r1, [pc, #348]	; (8004aac <netif_add+0x178>)
 8004950:	4857      	ldr	r0, [pc, #348]	; (8004ab0 <netif_add+0x17c>)
 8004952:	f00a f86d 	bl	800ea30 <iprintf>
 8004956:	2300      	movs	r3, #0
 8004958:	e0a2      	b.n	8004aa0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	2b00      	cmp	r3, #0
 800495e:	d108      	bne.n	8004972 <netif_add+0x3e>
 8004960:	4b51      	ldr	r3, [pc, #324]	; (8004aa8 <netif_add+0x174>)
 8004962:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004966:	4953      	ldr	r1, [pc, #332]	; (8004ab4 <netif_add+0x180>)
 8004968:	4851      	ldr	r0, [pc, #324]	; (8004ab0 <netif_add+0x17c>)
 800496a:	f00a f861 	bl	800ea30 <iprintf>
 800496e:	2300      	movs	r3, #0
 8004970:	e096      	b.n	8004aa0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004978:	4b4f      	ldr	r3, [pc, #316]	; (8004ab8 <netif_add+0x184>)
 800497a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004982:	4b4d      	ldr	r3, [pc, #308]	; (8004ab8 <netif_add+0x184>)
 8004984:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800498c:	4b4a      	ldr	r3, [pc, #296]	; (8004ab8 <netif_add+0x184>)
 800498e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4a45      	ldr	r2, [pc, #276]	; (8004abc <netif_add+0x188>)
 80049a6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a3a      	ldr	r2, [r7, #32]
 80049c0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80049c2:	4b3f      	ldr	r3, [pc, #252]	; (8004ac0 <netif_add+0x18c>)
 80049c4:	781a      	ldrb	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049d0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f913 	bl	8004c04 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	4798      	blx	r3
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <netif_add+0xba>
    return NULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	e058      	b.n	8004aa0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049f4:	2bff      	cmp	r3, #255	; 0xff
 80049f6:	d103      	bne.n	8004a00 <netif_add+0xcc>
        netif->num = 0;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004a04:	4b2f      	ldr	r3, [pc, #188]	; (8004ac4 <netif_add+0x190>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	e02b      	b.n	8004a64 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d106      	bne.n	8004a22 <netif_add+0xee>
 8004a14:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <netif_add+0x174>)
 8004a16:	f240 128b 	movw	r2, #395	; 0x18b
 8004a1a:	492b      	ldr	r1, [pc, #172]	; (8004ac8 <netif_add+0x194>)
 8004a1c:	4824      	ldr	r0, [pc, #144]	; (8004ab0 <netif_add+0x17c>)
 8004a1e:	f00a f807 	bl	800ea30 <iprintf>
        num_netifs++;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3301      	adds	r3, #1
 8004a26:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2bff      	cmp	r3, #255	; 0xff
 8004a2c:	dd06      	ble.n	8004a3c <netif_add+0x108>
 8004a2e:	4b1e      	ldr	r3, [pc, #120]	; (8004aa8 <netif_add+0x174>)
 8004a30:	f240 128d 	movw	r2, #397	; 0x18d
 8004a34:	4925      	ldr	r1, [pc, #148]	; (8004acc <netif_add+0x198>)
 8004a36:	481e      	ldr	r0, [pc, #120]	; (8004ab0 <netif_add+0x17c>)
 8004a38:	f009 fffa 	bl	800ea30 <iprintf>
        if (netif2->num == netif->num) {
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d108      	bne.n	8004a5e <netif_add+0x12a>
          netif->num++;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a52:	3301      	adds	r3, #1
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004a5c:	e005      	b.n	8004a6a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1d0      	bne.n	8004a0c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1be      	bne.n	80049ee <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a76:	2bfe      	cmp	r3, #254	; 0xfe
 8004a78:	d103      	bne.n	8004a82 <netif_add+0x14e>
    netif_num = 0;
 8004a7a:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <netif_add+0x18c>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	e006      	b.n	8004a90 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a88:	3301      	adds	r3, #1
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <netif_add+0x18c>)
 8004a8e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004a90:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <netif_add+0x190>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004a98:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <netif_add+0x190>)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	0800fc90 	.word	0x0800fc90
 8004aac:	0800fd24 	.word	0x0800fd24
 8004ab0:	0800fce0 	.word	0x0800fce0
 8004ab4:	0800fd40 	.word	0x0800fd40
 8004ab8:	080123c0 	.word	0x080123c0
 8004abc:	08004edf 	.word	0x08004edf
 8004ac0:	2000823c 	.word	0x2000823c
 8004ac4:	20008234 	.word	0x20008234
 8004ac8:	0800fd64 	.word	0x0800fd64
 8004acc:	0800fd78 	.word	0x0800fd78

08004ad0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004ada:	6839      	ldr	r1, [r7, #0]
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f002 fdf3 	bl	80076c8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004ae2:	6839      	ldr	r1, [r7, #0]
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f007 fb2f 	bl	800c148 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <netif_do_set_ipaddr+0x20>
 8004b06:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <netif_do_set_ipaddr+0x88>)
 8004b08:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004b0c:	491c      	ldr	r1, [pc, #112]	; (8004b80 <netif_do_set_ipaddr+0x8c>)
 8004b0e:	481d      	ldr	r0, [pc, #116]	; (8004b84 <netif_do_set_ipaddr+0x90>)
 8004b10:	f009 ff8e 	bl	800ea30 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <netif_do_set_ipaddr+0x34>
 8004b1a:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <netif_do_set_ipaddr+0x88>)
 8004b1c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004b20:	4917      	ldr	r1, [pc, #92]	; (8004b80 <netif_do_set_ipaddr+0x8c>)
 8004b22:	4818      	ldr	r0, [pc, #96]	; (8004b84 <netif_do_set_ipaddr+0x90>)
 8004b24:	f009 ff84 	bl	800ea30 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d01c      	beq.n	8004b70 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004b46:	f107 0314 	add.w	r3, r7, #20
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff ffbf 	bl	8004ad0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <netif_do_set_ipaddr+0x6a>
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	e000      	b.n	8004b60 <netif_do_set_ipaddr+0x6c>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004b64:	2101      	movs	r1, #1
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f8d2 	bl	8004d10 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	0800fc90 	.word	0x0800fc90
 8004b80:	0800fda8 	.word	0x0800fda8
 8004b84:	0800fce0 	.word	0x0800fce0

08004b88 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3308      	adds	r3, #8
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d00a      	beq.n	8004bb8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <netif_do_set_netmask+0x26>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	e000      	b.n	8004bb0 <netif_do_set_netmask+0x28>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d00a      	beq.n	8004bf6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <netif_do_set_gw+0x26>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	e000      	b.n	8004bee <netif_do_set_gw+0x28>
 8004bec:	2300      	movs	r3, #0
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004c20:	4b1c      	ldr	r3, [pc, #112]	; (8004c94 <netif_set_addr+0x90>)
 8004c22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004c2a:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <netif_set_addr+0x90>)
 8004c2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004c34:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <netif_set_addr+0x90>)
 8004c36:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <netif_set_addr+0x42>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <netif_set_addr+0x46>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <netif_set_addr+0x48>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d006      	beq.n	8004c62 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004c54:	f107 0310 	add.w	r3, r7, #16
 8004c58:	461a      	mov	r2, r3
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff ff49 	bl	8004af4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7ff ff8e 	bl	8004b88 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f7ff ffa8 	bl	8004bc6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004c7c:	f107 0310 	add.w	r3, r7, #16
 8004c80:	461a      	mov	r2, r3
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7ff ff35 	bl	8004af4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004c8a:	bf00      	nop
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	080123c0 	.word	0x080123c0

08004c98 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004ca0:	4a04      	ldr	r2, [pc, #16]	; (8004cb4 <netif_set_default+0x1c>)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20008238 	.word	0x20008238

08004cb8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d107      	bne.n	8004cd6 <netif_set_up+0x1e>
 8004cc6:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <netif_set_up+0x4c>)
 8004cc8:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004ccc:	490e      	ldr	r1, [pc, #56]	; (8004d08 <netif_set_up+0x50>)
 8004cce:	480f      	ldr	r0, [pc, #60]	; (8004d0c <netif_set_up+0x54>)
 8004cd0:	f009 feae 	bl	800ea30 <iprintf>
 8004cd4:	e013      	b.n	8004cfe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10c      	bne.n	8004cfe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004cf6:	2103      	movs	r1, #3
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f809 	bl	8004d10 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	0800fc90 	.word	0x0800fc90
 8004d08:	0800fe18 	.word	0x0800fe18
 8004d0c:	0800fce0 	.word	0x0800fce0

08004d10 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <netif_issue_reports+0x20>
 8004d22:	4b18      	ldr	r3, [pc, #96]	; (8004d84 <netif_issue_reports+0x74>)
 8004d24:	f240 326d 	movw	r2, #877	; 0x36d
 8004d28:	4917      	ldr	r1, [pc, #92]	; (8004d88 <netif_issue_reports+0x78>)
 8004d2a:	4818      	ldr	r0, [pc, #96]	; (8004d8c <netif_issue_reports+0x7c>)
 8004d2c:	f009 fe80 	bl	800ea30 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d01e      	beq.n	8004d7c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d44:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d017      	beq.n	8004d7c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d013      	beq.n	8004d7e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3304      	adds	r3, #4
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f008 f951 	bl	800d01c <etharp_request>
 8004d7a:	e000      	b.n	8004d7e <netif_issue_reports+0x6e>
    return;
 8004d7c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	0800fc90 	.word	0x0800fc90
 8004d88:	0800fe34 	.word	0x0800fe34
 8004d8c:	0800fce0 	.word	0x0800fce0

08004d90 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d107      	bne.n	8004dae <netif_set_down+0x1e>
 8004d9e:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <netif_set_down+0x58>)
 8004da0:	f240 329b 	movw	r2, #923	; 0x39b
 8004da4:	4911      	ldr	r1, [pc, #68]	; (8004dec <netif_set_down+0x5c>)
 8004da6:	4812      	ldr	r0, [pc, #72]	; (8004df0 <netif_set_down+0x60>)
 8004da8:	f009 fe42 	bl	800ea30 <iprintf>
 8004dac:	e019      	b.n	8004de2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d012      	beq.n	8004de2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f007 fcdb 	bl	800c798 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	0800fc90 	.word	0x0800fc90
 8004dec:	0800fe58 	.word	0x0800fe58
 8004df0:	0800fce0 	.word	0x0800fce0

08004df4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d107      	bne.n	8004e12 <netif_set_link_up+0x1e>
 8004e02:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <netif_set_link_up+0x5c>)
 8004e04:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8004e08:	4912      	ldr	r1, [pc, #72]	; (8004e54 <netif_set_link_up+0x60>)
 8004e0a:	4813      	ldr	r0, [pc, #76]	; (8004e58 <netif_set_link_up+0x64>)
 8004e0c:	f009 fe10 	bl	800ea30 <iprintf>
 8004e10:	e01b      	b.n	8004e4a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d114      	bne.n	8004e4a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e26:	f043 0304 	orr.w	r3, r3, #4
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004e32:	2103      	movs	r1, #3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff ff6b 	bl	8004d10 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <netif_set_link_up+0x56>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	0800fc90 	.word	0x0800fc90
 8004e54:	0800fe78 	.word	0x0800fe78
 8004e58:	0800fce0 	.word	0x0800fce0

08004e5c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d107      	bne.n	8004e7a <netif_set_link_down+0x1e>
 8004e6a:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <netif_set_link_down+0x54>)
 8004e6c:	f240 4206 	movw	r2, #1030	; 0x406
 8004e70:	4910      	ldr	r1, [pc, #64]	; (8004eb4 <netif_set_link_down+0x58>)
 8004e72:	4811      	ldr	r0, [pc, #68]	; (8004eb8 <netif_set_link_down+0x5c>)
 8004e74:	f009 fddc 	bl	800ea30 <iprintf>
 8004e78:	e017      	b.n	8004eaa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d010      	beq.n	8004eaa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e8e:	f023 0304 	bic.w	r3, r3, #4
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <netif_set_link_down+0x4e>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	0800fc90 	.word	0x0800fc90
 8004eb4:	0800fe9c 	.word	0x0800fe9c
 8004eb8:	0800fce0 	.word	0x0800fce0

08004ebc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	61da      	str	r2, [r3, #28]
  }
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004eea:	f06f 030b 	mvn.w	r3, #11
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
	...

08004efc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d013      	beq.n	8004f34 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <netif_get_by_index+0x48>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	e00c      	b.n	8004f2e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	79fa      	ldrb	r2, [r7, #7]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d101      	bne.n	8004f28 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	e006      	b.n	8004f36 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1ef      	bne.n	8004f14 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20008234 	.word	0x20008234

08004f48 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <pbuf_free_ooseq+0x38>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004f54:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <pbuf_free_ooseq+0x3c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	e00a      	b.n	8004f72 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f002 fbed 	bl	8007744 <tcp_free_ooseq>
      return;
 8004f6a:	e005      	b.n	8004f78 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f1      	bne.n	8004f5c <pbuf_free_ooseq+0x14>
    }
  }
}
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	2000823d 	.word	0x2000823d
 8004f84:	2000824c 	.word	0x2000824c

08004f88 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004f8c:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <pbuf_pool_is_empty+0x14>)
 8004f8e:	2201      	movs	r2, #1
 8004f90:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004f92:	bf00      	nop
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	2000823d 	.word	0x2000823d

08004fa0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	4611      	mov	r1, r2
 8004fac:	461a      	mov	r2, r3
 8004fae:	460b      	mov	r3, r1
 8004fb0:	80fb      	strh	r3, [r7, #6]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	88fa      	ldrh	r2, [r7, #6]
 8004fc6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	88ba      	ldrh	r2, [r7, #4]
 8004fcc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004fce:	8b3b      	ldrh	r3, [r7, #24]
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	7f3a      	ldrb	r2, [r7, #28]
 8004fda:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	73da      	strb	r2, [r3, #15]
}
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08c      	sub	sp, #48	; 0x30
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	71fb      	strb	r3, [r7, #7]
 8004ffe:	460b      	mov	r3, r1
 8005000:	80bb      	strh	r3, [r7, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800500a:	887b      	ldrh	r3, [r7, #2]
 800500c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005010:	d07f      	beq.n	8005112 <pbuf_alloc+0x11e>
 8005012:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005016:	f300 80c8 	bgt.w	80051aa <pbuf_alloc+0x1b6>
 800501a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800501e:	d010      	beq.n	8005042 <pbuf_alloc+0x4e>
 8005020:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005024:	f300 80c1 	bgt.w	80051aa <pbuf_alloc+0x1b6>
 8005028:	2b01      	cmp	r3, #1
 800502a:	d002      	beq.n	8005032 <pbuf_alloc+0x3e>
 800502c:	2b41      	cmp	r3, #65	; 0x41
 800502e:	f040 80bc 	bne.w	80051aa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	88bb      	ldrh	r3, [r7, #4]
 8005036:	4619      	mov	r1, r3
 8005038:	2000      	movs	r0, #0
 800503a:	f000 f8d1 	bl	80051e0 <pbuf_alloc_reference>
 800503e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005040:	e0bd      	b.n	80051be <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005042:	2300      	movs	r3, #0
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800504a:	88bb      	ldrh	r3, [r7, #4]
 800504c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800504e:	2008      	movs	r0, #8
 8005050:	f7ff fbce 	bl	80047f0 <memp_malloc>
 8005054:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800505c:	f7ff ff94 	bl	8004f88 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <pbuf_alloc+0x78>
            pbuf_free(p);
 8005066:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005068:	f000 faa8 	bl	80055bc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800506c:	2300      	movs	r3, #0
 800506e:	e0a7      	b.n	80051c0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005070:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005072:	3303      	adds	r3, #3
 8005074:	b29b      	uxth	r3, r3
 8005076:	f023 0303 	bic.w	r3, r3, #3
 800507a:	b29b      	uxth	r3, r3
 800507c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005080:	b29b      	uxth	r3, r3
 8005082:	8b7a      	ldrh	r2, [r7, #26]
 8005084:	4293      	cmp	r3, r2
 8005086:	bf28      	it	cs
 8005088:	4613      	movcs	r3, r2
 800508a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800508c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800508e:	3310      	adds	r3, #16
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4413      	add	r3, r2
 8005094:	3303      	adds	r3, #3
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	4618      	mov	r0, r3
 800509c:	89f9      	ldrh	r1, [r7, #14]
 800509e:	8b7a      	ldrh	r2, [r7, #26]
 80050a0:	2300      	movs	r3, #0
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	887b      	ldrh	r3, [r7, #2]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	460b      	mov	r3, r1
 80050aa:	4601      	mov	r1, r0
 80050ac:	6938      	ldr	r0, [r7, #16]
 80050ae:	f7ff ff77 	bl	8004fa0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d006      	beq.n	80050cc <pbuf_alloc+0xd8>
 80050be:	4b42      	ldr	r3, [pc, #264]	; (80051c8 <pbuf_alloc+0x1d4>)
 80050c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050c4:	4941      	ldr	r1, [pc, #260]	; (80051cc <pbuf_alloc+0x1d8>)
 80050c6:	4842      	ldr	r0, [pc, #264]	; (80051d0 <pbuf_alloc+0x1dc>)
 80050c8:	f009 fcb2 	bl	800ea30 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80050cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050ce:	3303      	adds	r3, #3
 80050d0:	f023 0303 	bic.w	r3, r3, #3
 80050d4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80050d8:	d106      	bne.n	80050e8 <pbuf_alloc+0xf4>
 80050da:	4b3b      	ldr	r3, [pc, #236]	; (80051c8 <pbuf_alloc+0x1d4>)
 80050dc:	f44f 7281 	mov.w	r2, #258	; 0x102
 80050e0:	493c      	ldr	r1, [pc, #240]	; (80051d4 <pbuf_alloc+0x1e0>)
 80050e2:	483b      	ldr	r0, [pc, #236]	; (80051d0 <pbuf_alloc+0x1dc>)
 80050e4:	f009 fca4 	bl	800ea30 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d102      	bne.n	80050f4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
 80050f2:	e002      	b.n	80050fa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80050fe:	8b7a      	ldrh	r2, [r7, #26]
 8005100:	89fb      	ldrh	r3, [r7, #14]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800510a:	8b7b      	ldrh	r3, [r7, #26]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d19e      	bne.n	800504e <pbuf_alloc+0x5a>
      break;
 8005110:	e055      	b.n	80051be <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005112:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005114:	3303      	adds	r3, #3
 8005116:	b29b      	uxth	r3, r3
 8005118:	f023 0303 	bic.w	r3, r3, #3
 800511c:	b29a      	uxth	r2, r3
 800511e:	88bb      	ldrh	r3, [r7, #4]
 8005120:	3303      	adds	r3, #3
 8005122:	b29b      	uxth	r3, r3
 8005124:	f023 0303 	bic.w	r3, r3, #3
 8005128:	b29b      	uxth	r3, r3
 800512a:	4413      	add	r3, r2
 800512c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800512e:	8b3b      	ldrh	r3, [r7, #24]
 8005130:	3310      	adds	r3, #16
 8005132:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005134:	8b3a      	ldrh	r2, [r7, #24]
 8005136:	88bb      	ldrh	r3, [r7, #4]
 8005138:	3303      	adds	r3, #3
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	429a      	cmp	r2, r3
 8005140:	d306      	bcc.n	8005150 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005142:	8afa      	ldrh	r2, [r7, #22]
 8005144:	88bb      	ldrh	r3, [r7, #4]
 8005146:	3303      	adds	r3, #3
 8005148:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d201      	bcs.n	8005154 <pbuf_alloc+0x160>
        return NULL;
 8005150:	2300      	movs	r3, #0
 8005152:	e035      	b.n	80051c0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005154:	8afb      	ldrh	r3, [r7, #22]
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff f9ba 	bl	80044d0 <mem_malloc>
 800515c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <pbuf_alloc+0x174>
        return NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	e02b      	b.n	80051c0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005168:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800516a:	3310      	adds	r3, #16
 800516c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516e:	4413      	add	r3, r2
 8005170:	3303      	adds	r3, #3
 8005172:	f023 0303 	bic.w	r3, r3, #3
 8005176:	4618      	mov	r0, r3
 8005178:	88b9      	ldrh	r1, [r7, #4]
 800517a:	88ba      	ldrh	r2, [r7, #4]
 800517c:	2300      	movs	r3, #0
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	887b      	ldrh	r3, [r7, #2]
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	460b      	mov	r3, r1
 8005186:	4601      	mov	r1, r0
 8005188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800518a:	f7ff ff09 	bl	8004fa0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d010      	beq.n	80051bc <pbuf_alloc+0x1c8>
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <pbuf_alloc+0x1d4>)
 800519c:	f44f 7291 	mov.w	r2, #290	; 0x122
 80051a0:	490d      	ldr	r1, [pc, #52]	; (80051d8 <pbuf_alloc+0x1e4>)
 80051a2:	480b      	ldr	r0, [pc, #44]	; (80051d0 <pbuf_alloc+0x1dc>)
 80051a4:	f009 fc44 	bl	800ea30 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80051a8:	e008      	b.n	80051bc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80051aa:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <pbuf_alloc+0x1d4>)
 80051ac:	f240 1227 	movw	r2, #295	; 0x127
 80051b0:	490a      	ldr	r1, [pc, #40]	; (80051dc <pbuf_alloc+0x1e8>)
 80051b2:	4807      	ldr	r0, [pc, #28]	; (80051d0 <pbuf_alloc+0x1dc>)
 80051b4:	f009 fc3c 	bl	800ea30 <iprintf>
      return NULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	e001      	b.n	80051c0 <pbuf_alloc+0x1cc>
      break;
 80051bc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3728      	adds	r7, #40	; 0x28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	0800fec0 	.word	0x0800fec0
 80051cc:	0800fef0 	.word	0x0800fef0
 80051d0:	0800ff20 	.word	0x0800ff20
 80051d4:	0800ff48 	.word	0x0800ff48
 80051d8:	0800ff7c 	.word	0x0800ff7c
 80051dc:	0800ffa8 	.word	0x0800ffa8

080051e0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	807b      	strh	r3, [r7, #2]
 80051ec:	4613      	mov	r3, r2
 80051ee:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80051f0:	883b      	ldrh	r3, [r7, #0]
 80051f2:	2b41      	cmp	r3, #65	; 0x41
 80051f4:	d009      	beq.n	800520a <pbuf_alloc_reference+0x2a>
 80051f6:	883b      	ldrh	r3, [r7, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d006      	beq.n	800520a <pbuf_alloc_reference+0x2a>
 80051fc:	4b0f      	ldr	r3, [pc, #60]	; (800523c <pbuf_alloc_reference+0x5c>)
 80051fe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005202:	490f      	ldr	r1, [pc, #60]	; (8005240 <pbuf_alloc_reference+0x60>)
 8005204:	480f      	ldr	r0, [pc, #60]	; (8005244 <pbuf_alloc_reference+0x64>)
 8005206:	f009 fc13 	bl	800ea30 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800520a:	2007      	movs	r0, #7
 800520c:	f7ff faf0 	bl	80047f0 <memp_malloc>
 8005210:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005218:	2300      	movs	r3, #0
 800521a:	e00b      	b.n	8005234 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800521c:	8879      	ldrh	r1, [r7, #2]
 800521e:	887a      	ldrh	r2, [r7, #2]
 8005220:	2300      	movs	r3, #0
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	883b      	ldrh	r3, [r7, #0]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	460b      	mov	r3, r1
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff feb7 	bl	8004fa0 <pbuf_init_alloced_pbuf>
  return p;
 8005232:	68fb      	ldr	r3, [r7, #12]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	0800fec0 	.word	0x0800fec0
 8005240:	0800ffc4 	.word	0x0800ffc4
 8005244:	0800ff20 	.word	0x0800ff20

08005248 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af02      	add	r7, sp, #8
 800524e:	607b      	str	r3, [r7, #4]
 8005250:	4603      	mov	r3, r0
 8005252:	73fb      	strb	r3, [r7, #15]
 8005254:	460b      	mov	r3, r1
 8005256:	81bb      	strh	r3, [r7, #12]
 8005258:	4613      	mov	r3, r2
 800525a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005260:	8a7b      	ldrh	r3, [r7, #18]
 8005262:	3303      	adds	r3, #3
 8005264:	f023 0203 	bic.w	r2, r3, #3
 8005268:	89bb      	ldrh	r3, [r7, #12]
 800526a:	441a      	add	r2, r3
 800526c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800526e:	429a      	cmp	r2, r3
 8005270:	d901      	bls.n	8005276 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	e018      	b.n	80052a8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800527c:	8a7b      	ldrh	r3, [r7, #18]
 800527e:	3303      	adds	r3, #3
 8005280:	f023 0303 	bic.w	r3, r3, #3
 8005284:	6a3a      	ldr	r2, [r7, #32]
 8005286:	4413      	add	r3, r2
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	e001      	b.n	8005290 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	89b9      	ldrh	r1, [r7, #12]
 8005294:	89ba      	ldrh	r2, [r7, #12]
 8005296:	2302      	movs	r3, #2
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	897b      	ldrh	r3, [r7, #10]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	460b      	mov	r3, r1
 80052a0:	6979      	ldr	r1, [r7, #20]
 80052a2:	f7ff fe7d 	bl	8004fa0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80052a6:	687b      	ldr	r3, [r7, #4]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	460b      	mov	r3, r1
 80052ba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <pbuf_realloc+0x20>
 80052c2:	4b3a      	ldr	r3, [pc, #232]	; (80053ac <pbuf_realloc+0xfc>)
 80052c4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80052c8:	4939      	ldr	r1, [pc, #228]	; (80053b0 <pbuf_realloc+0x100>)
 80052ca:	483a      	ldr	r0, [pc, #232]	; (80053b4 <pbuf_realloc+0x104>)
 80052cc:	f009 fbb0 	bl	800ea30 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	891b      	ldrh	r3, [r3, #8]
 80052d4:	887a      	ldrh	r2, [r7, #2]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d263      	bcs.n	80053a2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	891a      	ldrh	r2, [r3, #8]
 80052de:	887b      	ldrh	r3, [r7, #2]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80052e4:	887b      	ldrh	r3, [r7, #2]
 80052e6:	817b      	strh	r3, [r7, #10]
  q = p;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80052ec:	e018      	b.n	8005320 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	895b      	ldrh	r3, [r3, #10]
 80052f2:	897a      	ldrh	r2, [r7, #10]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	891a      	ldrh	r2, [r3, #8]
 80052fc:	893b      	ldrh	r3, [r7, #8]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <pbuf_realloc+0x70>
 8005312:	4b26      	ldr	r3, [pc, #152]	; (80053ac <pbuf_realloc+0xfc>)
 8005314:	f240 12af 	movw	r2, #431	; 0x1af
 8005318:	4927      	ldr	r1, [pc, #156]	; (80053b8 <pbuf_realloc+0x108>)
 800531a:	4826      	ldr	r0, [pc, #152]	; (80053b4 <pbuf_realloc+0x104>)
 800531c:	f009 fb88 	bl	800ea30 <iprintf>
  while (rem_len > q->len) {
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	895b      	ldrh	r3, [r3, #10]
 8005324:	897a      	ldrh	r2, [r7, #10]
 8005326:	429a      	cmp	r2, r3
 8005328:	d8e1      	bhi.n	80052ee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	7b1b      	ldrb	r3, [r3, #12]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	2b00      	cmp	r3, #0
 8005334:	d121      	bne.n	800537a <pbuf_realloc+0xca>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	895b      	ldrh	r3, [r3, #10]
 800533a:	897a      	ldrh	r2, [r7, #10]
 800533c:	429a      	cmp	r2, r3
 800533e:	d01c      	beq.n	800537a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	7b5b      	ldrb	r3, [r3, #13]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d116      	bne.n	800537a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	b29a      	uxth	r2, r3
 8005356:	897b      	ldrh	r3, [r7, #10]
 8005358:	4413      	add	r3, r2
 800535a:	b29b      	uxth	r3, r3
 800535c:	4619      	mov	r1, r3
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7fe ffba 	bl	80042d8 <mem_trim>
 8005364:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <pbuf_realloc+0xca>
 800536c:	4b0f      	ldr	r3, [pc, #60]	; (80053ac <pbuf_realloc+0xfc>)
 800536e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005372:	4912      	ldr	r1, [pc, #72]	; (80053bc <pbuf_realloc+0x10c>)
 8005374:	480f      	ldr	r0, [pc, #60]	; (80053b4 <pbuf_realloc+0x104>)
 8005376:	f009 fb5b 	bl	800ea30 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	897a      	ldrh	r2, [r7, #10]
 800537e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	895a      	ldrh	r2, [r3, #10]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4618      	mov	r0, r3
 8005396:	f000 f911 	bl	80055bc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	e000      	b.n	80053a4 <pbuf_realloc+0xf4>
    return;
 80053a2:	bf00      	nop

}
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	0800fec0 	.word	0x0800fec0
 80053b0:	0800ffd8 	.word	0x0800ffd8
 80053b4:	0800ff20 	.word	0x0800ff20
 80053b8:	0800fff0 	.word	0x0800fff0
 80053bc:	08010008 	.word	0x08010008

080053c0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	4613      	mov	r3, r2
 80053cc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <pbuf_add_header_impl+0x22>
 80053d4:	4b2b      	ldr	r3, [pc, #172]	; (8005484 <pbuf_add_header_impl+0xc4>)
 80053d6:	f240 12df 	movw	r2, #479	; 0x1df
 80053da:	492b      	ldr	r1, [pc, #172]	; (8005488 <pbuf_add_header_impl+0xc8>)
 80053dc:	482b      	ldr	r0, [pc, #172]	; (800548c <pbuf_add_header_impl+0xcc>)
 80053de:	f009 fb27 	bl	800ea30 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <pbuf_add_header_impl+0x30>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ee:	d301      	bcc.n	80053f4 <pbuf_add_header_impl+0x34>
    return 1;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e043      	b.n	800547c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <pbuf_add_header_impl+0x3e>
    return 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e03e      	b.n	800547c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	891a      	ldrh	r2, [r3, #8]
 8005406:	8a7b      	ldrh	r3, [r7, #18]
 8005408:	4413      	add	r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	8a7a      	ldrh	r2, [r7, #18]
 800540e:	429a      	cmp	r2, r3
 8005410:	d901      	bls.n	8005416 <pbuf_add_header_impl+0x56>
    return 1;
 8005412:	2301      	movs	r3, #1
 8005414:	e032      	b.n	800547c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	7b1b      	ldrb	r3, [r3, #12]
 800541a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800541c:	8a3b      	ldrh	r3, [r7, #16]
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	425b      	negs	r3, r3
 800542e:	4413      	add	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3310      	adds	r3, #16
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	429a      	cmp	r2, r3
 800543a:	d20d      	bcs.n	8005458 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800543c:	2301      	movs	r3, #1
 800543e:	e01d      	b.n	800547c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d006      	beq.n	8005454 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	425b      	negs	r3, r3
 800544e:	4413      	add	r3, r2
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	e001      	b.n	8005458 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005454:	2301      	movs	r3, #1
 8005456:	e011      	b.n	800547c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	895a      	ldrh	r2, [r3, #10]
 8005462:	8a7b      	ldrh	r3, [r7, #18]
 8005464:	4413      	add	r3, r2
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	891a      	ldrh	r2, [r3, #8]
 8005470:	8a7b      	ldrh	r3, [r7, #18]
 8005472:	4413      	add	r3, r2
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	811a      	strh	r2, [r3, #8]


  return 0;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	0800fec0 	.word	0x0800fec0
 8005488:	08010024 	.word	0x08010024
 800548c:	0800ff20 	.word	0x0800ff20

08005490 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800549a:	2200      	movs	r2, #0
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff ff8e 	bl	80053c0 <pbuf_add_header_impl>
 80054a4:	4603      	mov	r3, r0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d106      	bne.n	80054ce <pbuf_remove_header+0x1e>
 80054c0:	4b20      	ldr	r3, [pc, #128]	; (8005544 <pbuf_remove_header+0x94>)
 80054c2:	f240 224b 	movw	r2, #587	; 0x24b
 80054c6:	4920      	ldr	r1, [pc, #128]	; (8005548 <pbuf_remove_header+0x98>)
 80054c8:	4820      	ldr	r0, [pc, #128]	; (800554c <pbuf_remove_header+0x9c>)
 80054ca:	f009 fab1 	bl	800ea30 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <pbuf_remove_header+0x2c>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054da:	d301      	bcc.n	80054e0 <pbuf_remove_header+0x30>
    return 1;
 80054dc:	2301      	movs	r3, #1
 80054de:	e02c      	b.n	800553a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <pbuf_remove_header+0x3a>
    return 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	e027      	b.n	800553a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	895b      	ldrh	r3, [r3, #10]
 80054f2:	89fa      	ldrh	r2, [r7, #14]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d908      	bls.n	800550a <pbuf_remove_header+0x5a>
 80054f8:	4b12      	ldr	r3, [pc, #72]	; (8005544 <pbuf_remove_header+0x94>)
 80054fa:	f240 2255 	movw	r2, #597	; 0x255
 80054fe:	4914      	ldr	r1, [pc, #80]	; (8005550 <pbuf_remove_header+0xa0>)
 8005500:	4812      	ldr	r0, [pc, #72]	; (800554c <pbuf_remove_header+0x9c>)
 8005502:	f009 fa95 	bl	800ea30 <iprintf>
 8005506:	2301      	movs	r3, #1
 8005508:	e017      	b.n	800553a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	441a      	add	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	895a      	ldrh	r2, [r3, #10]
 8005520:	89fb      	ldrh	r3, [r7, #14]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	b29a      	uxth	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	891a      	ldrh	r2, [r3, #8]
 800552e:	89fb      	ldrh	r3, [r7, #14]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	b29a      	uxth	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	0800fec0 	.word	0x0800fec0
 8005548:	08010024 	.word	0x08010024
 800554c:	0800ff20 	.word	0x0800ff20
 8005550:	08010030 	.word	0x08010030

08005554 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	460b      	mov	r3, r1
 800555e:	807b      	strh	r3, [r7, #2]
 8005560:	4613      	mov	r3, r2
 8005562:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005564:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005568:	2b00      	cmp	r3, #0
 800556a:	da08      	bge.n	800557e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800556c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005570:	425b      	negs	r3, r3
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff ff9b 	bl	80054b0 <pbuf_remove_header>
 800557a:	4603      	mov	r3, r0
 800557c:	e007      	b.n	800558e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800557e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005582:	787a      	ldrb	r2, [r7, #1]
 8005584:	4619      	mov	r1, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff ff1a 	bl	80053c0 <pbuf_add_header_impl>
 800558c:	4603      	mov	r3, r0
  }
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	460b      	mov	r3, r1
 80055a0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80055a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80055a6:	2201      	movs	r2, #1
 80055a8:	4619      	mov	r1, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff ffd2 	bl	8005554 <pbuf_header_impl>
 80055b0:	4603      	mov	r3, r0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d106      	bne.n	80055de <pbuf_free+0x22>
 80055d0:	4b38      	ldr	r3, [pc, #224]	; (80056b4 <pbuf_free+0xf8>)
 80055d2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80055d6:	4938      	ldr	r1, [pc, #224]	; (80056b8 <pbuf_free+0xfc>)
 80055d8:	4838      	ldr	r0, [pc, #224]	; (80056bc <pbuf_free+0x100>)
 80055da:	f009 fa29 	bl	800ea30 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	e063      	b.n	80056aa <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80055e6:	e05c      	b.n	80056a2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	7b9b      	ldrb	r3, [r3, #14]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d106      	bne.n	80055fe <pbuf_free+0x42>
 80055f0:	4b30      	ldr	r3, [pc, #192]	; (80056b4 <pbuf_free+0xf8>)
 80055f2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80055f6:	4932      	ldr	r1, [pc, #200]	; (80056c0 <pbuf_free+0x104>)
 80055f8:	4830      	ldr	r0, [pc, #192]	; (80056bc <pbuf_free+0x100>)
 80055fa:	f009 fa19 	bl	800ea30 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	7b9b      	ldrb	r3, [r3, #14]
 8005602:	3b01      	subs	r3, #1
 8005604:	b2da      	uxtb	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	739a      	strb	r2, [r3, #14]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	7b9b      	ldrb	r3, [r3, #14]
 800560e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005610:	7dbb      	ldrb	r3, [r7, #22]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d143      	bne.n	800569e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	7b1b      	ldrb	r3, [r3, #12]
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	7b5b      	ldrb	r3, [r3, #13]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d011      	beq.n	8005656 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <pbuf_free+0x90>
 800563e:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <pbuf_free+0xf8>)
 8005640:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005644:	491f      	ldr	r1, [pc, #124]	; (80056c4 <pbuf_free+0x108>)
 8005646:	481d      	ldr	r0, [pc, #116]	; (80056bc <pbuf_free+0x100>)
 8005648:	f009 f9f2 	bl	800ea30 <iprintf>
        pc->custom_free_function(p);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	4798      	blx	r3
 8005654:	e01d      	b.n	8005692 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d104      	bne.n	8005666 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	2008      	movs	r0, #8
 8005660:	f7ff f936 	bl	80048d0 <memp_free>
 8005664:	e015      	b.n	8005692 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d104      	bne.n	8005676 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	2007      	movs	r0, #7
 8005670:	f7ff f92e 	bl	80048d0 <memp_free>
 8005674:	e00d      	b.n	8005692 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d103      	bne.n	8005684 <pbuf_free+0xc8>
          mem_free(p);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fe fdc1 	bl	8004204 <mem_free>
 8005682:	e006      	b.n	8005692 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005684:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <pbuf_free+0xf8>)
 8005686:	f240 320f 	movw	r2, #783	; 0x30f
 800568a:	490f      	ldr	r1, [pc, #60]	; (80056c8 <pbuf_free+0x10c>)
 800568c:	480b      	ldr	r0, [pc, #44]	; (80056bc <pbuf_free+0x100>)
 800568e:	f009 f9cf 	bl	800ea30 <iprintf>
        }
      }
      count++;
 8005692:	7dfb      	ldrb	r3, [r7, #23]
 8005694:	3301      	adds	r3, #1
 8005696:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	607b      	str	r3, [r7, #4]
 800569c:	e001      	b.n	80056a2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d19f      	bne.n	80055e8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	0800fec0 	.word	0x0800fec0
 80056b8:	08010024 	.word	0x08010024
 80056bc:	0800ff20 	.word	0x0800ff20
 80056c0:	08010050 	.word	0x08010050
 80056c4:	08010068 	.word	0x08010068
 80056c8:	0801008c 	.word	0x0801008c

080056cc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80056d8:	e005      	b.n	80056e6 <pbuf_clen+0x1a>
    ++len;
 80056da:	89fb      	ldrh	r3, [r7, #14]
 80056dc:	3301      	adds	r3, #1
 80056de:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f6      	bne.n	80056da <pbuf_clen+0xe>
  }
  return len;
 80056ec:	89fb      	ldrh	r3, [r7, #14]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d010      	beq.n	800572c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	7b9b      	ldrb	r3, [r3, #14]
 800570e:	3301      	adds	r3, #1
 8005710:	b2da      	uxtb	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	7b9b      	ldrb	r3, [r3, #14]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <pbuf_ref+0x30>
 800571e:	4b05      	ldr	r3, [pc, #20]	; (8005734 <pbuf_ref+0x38>)
 8005720:	f240 3242 	movw	r2, #834	; 0x342
 8005724:	4904      	ldr	r1, [pc, #16]	; (8005738 <pbuf_ref+0x3c>)
 8005726:	4805      	ldr	r0, [pc, #20]	; (800573c <pbuf_ref+0x40>)
 8005728:	f009 f982 	bl	800ea30 <iprintf>
  }
}
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	0800fec0 	.word	0x0800fec0
 8005738:	080100a0 	.word	0x080100a0
 800573c:	0800ff20 	.word	0x0800ff20

08005740 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <pbuf_cat+0x16>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d107      	bne.n	8005766 <pbuf_cat+0x26>
 8005756:	4b20      	ldr	r3, [pc, #128]	; (80057d8 <pbuf_cat+0x98>)
 8005758:	f240 3259 	movw	r2, #857	; 0x359
 800575c:	491f      	ldr	r1, [pc, #124]	; (80057dc <pbuf_cat+0x9c>)
 800575e:	4820      	ldr	r0, [pc, #128]	; (80057e0 <pbuf_cat+0xa0>)
 8005760:	f009 f966 	bl	800ea30 <iprintf>
 8005764:	e034      	b.n	80057d0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	e00a      	b.n	8005782 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	891a      	ldrh	r2, [r3, #8]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	891b      	ldrh	r3, [r3, #8]
 8005774:	4413      	add	r3, r2
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	891a      	ldrh	r2, [r3, #8]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	895b      	ldrh	r3, [r3, #10]
 8005792:	429a      	cmp	r2, r3
 8005794:	d006      	beq.n	80057a4 <pbuf_cat+0x64>
 8005796:	4b10      	ldr	r3, [pc, #64]	; (80057d8 <pbuf_cat+0x98>)
 8005798:	f240 3262 	movw	r2, #866	; 0x362
 800579c:	4911      	ldr	r1, [pc, #68]	; (80057e4 <pbuf_cat+0xa4>)
 800579e:	4810      	ldr	r0, [pc, #64]	; (80057e0 <pbuf_cat+0xa0>)
 80057a0:	f009 f946 	bl	800ea30 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d006      	beq.n	80057ba <pbuf_cat+0x7a>
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <pbuf_cat+0x98>)
 80057ae:	f240 3263 	movw	r2, #867	; 0x363
 80057b2:	490d      	ldr	r1, [pc, #52]	; (80057e8 <pbuf_cat+0xa8>)
 80057b4:	480a      	ldr	r0, [pc, #40]	; (80057e0 <pbuf_cat+0xa0>)
 80057b6:	f009 f93b 	bl	800ea30 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	891a      	ldrh	r2, [r3, #8]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	891b      	ldrh	r3, [r3, #8]
 80057c2:	4413      	add	r3, r2
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	0800fec0 	.word	0x0800fec0
 80057dc:	080100b4 	.word	0x080100b4
 80057e0:	0800ff20 	.word	0x0800ff20
 80057e4:	080100ec 	.word	0x080100ec
 80057e8:	0801011c 	.word	0x0801011c

080057ec <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80057f6:	6839      	ldr	r1, [r7, #0]
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff ffa1 	bl	8005740 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80057fe:	6838      	ldr	r0, [r7, #0]
 8005800:	f7ff ff7c 	bl	80056fc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005804:	bf00      	nop
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	2300      	movs	r3, #0
 800581c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <pbuf_copy+0x2a>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <pbuf_copy+0x2a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	891a      	ldrh	r2, [r3, #8]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	891b      	ldrh	r3, [r3, #8]
 8005832:	429a      	cmp	r2, r3
 8005834:	d209      	bcs.n	800584a <pbuf_copy+0x3e>
 8005836:	4b57      	ldr	r3, [pc, #348]	; (8005994 <pbuf_copy+0x188>)
 8005838:	f240 32c9 	movw	r2, #969	; 0x3c9
 800583c:	4956      	ldr	r1, [pc, #344]	; (8005998 <pbuf_copy+0x18c>)
 800583e:	4857      	ldr	r0, [pc, #348]	; (800599c <pbuf_copy+0x190>)
 8005840:	f009 f8f6 	bl	800ea30 <iprintf>
 8005844:	f06f 030f 	mvn.w	r3, #15
 8005848:	e09f      	b.n	800598a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	895b      	ldrh	r3, [r3, #10]
 800584e:	461a      	mov	r2, r3
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	1ad2      	subs	r2, r2, r3
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	895b      	ldrh	r3, [r3, #10]
 8005858:	4619      	mov	r1, r3
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1acb      	subs	r3, r1, r3
 800585e:	429a      	cmp	r2, r3
 8005860:	d306      	bcc.n	8005870 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	895b      	ldrh	r3, [r3, #10]
 8005866:	461a      	mov	r2, r3
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	e005      	b.n	800587c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	895b      	ldrh	r3, [r3, #10]
 8005874:	461a      	mov	r2, r3
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	18d0      	adds	r0, r2, r3
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4413      	add	r3, r2
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4619      	mov	r1, r3
 8005890:	f009 f9ba 	bl	800ec08 <memcpy>
    offset_to += len;
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4413      	add	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	895b      	ldrh	r3, [r3, #10]
 80058a8:	461a      	mov	r2, r3
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d906      	bls.n	80058be <pbuf_copy+0xb2>
 80058b0:	4b38      	ldr	r3, [pc, #224]	; (8005994 <pbuf_copy+0x188>)
 80058b2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80058b6:	493a      	ldr	r1, [pc, #232]	; (80059a0 <pbuf_copy+0x194>)
 80058b8:	4838      	ldr	r0, [pc, #224]	; (800599c <pbuf_copy+0x190>)
 80058ba:	f009 f8b9 	bl	800ea30 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	895b      	ldrh	r3, [r3, #10]
 80058c2:	461a      	mov	r2, r3
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d906      	bls.n	80058d8 <pbuf_copy+0xcc>
 80058ca:	4b32      	ldr	r3, [pc, #200]	; (8005994 <pbuf_copy+0x188>)
 80058cc:	f240 32da 	movw	r2, #986	; 0x3da
 80058d0:	4934      	ldr	r1, [pc, #208]	; (80059a4 <pbuf_copy+0x198>)
 80058d2:	4832      	ldr	r0, [pc, #200]	; (800599c <pbuf_copy+0x190>)
 80058d4:	f009 f8ac 	bl	800ea30 <iprintf>
    if (offset_from >= p_from->len) {
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	895b      	ldrh	r3, [r3, #10]
 80058dc:	461a      	mov	r2, r3
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d304      	bcc.n	80058ee <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80058e4:	2300      	movs	r3, #0
 80058e6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	895b      	ldrh	r3, [r3, #10]
 80058f2:	461a      	mov	r2, r3
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d114      	bne.n	8005924 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10c      	bne.n	8005924 <pbuf_copy+0x118>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <pbuf_copy+0x118>
 8005910:	4b20      	ldr	r3, [pc, #128]	; (8005994 <pbuf_copy+0x188>)
 8005912:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005916:	4924      	ldr	r1, [pc, #144]	; (80059a8 <pbuf_copy+0x19c>)
 8005918:	4820      	ldr	r0, [pc, #128]	; (800599c <pbuf_copy+0x190>)
 800591a:	f009 f889 	bl	800ea30 <iprintf>
 800591e:	f06f 030f 	mvn.w	r3, #15
 8005922:	e032      	b.n	800598a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d013      	beq.n	8005952 <pbuf_copy+0x146>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	895a      	ldrh	r2, [r3, #10]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	891b      	ldrh	r3, [r3, #8]
 8005932:	429a      	cmp	r2, r3
 8005934:	d10d      	bne.n	8005952 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d009      	beq.n	8005952 <pbuf_copy+0x146>
 800593e:	4b15      	ldr	r3, [pc, #84]	; (8005994 <pbuf_copy+0x188>)
 8005940:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8005944:	4919      	ldr	r1, [pc, #100]	; (80059ac <pbuf_copy+0x1a0>)
 8005946:	4815      	ldr	r0, [pc, #84]	; (800599c <pbuf_copy+0x190>)
 8005948:	f009 f872 	bl	800ea30 <iprintf>
 800594c:	f06f 0305 	mvn.w	r3, #5
 8005950:	e01b      	b.n	800598a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d013      	beq.n	8005980 <pbuf_copy+0x174>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	895a      	ldrh	r2, [r3, #10]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	891b      	ldrh	r3, [r3, #8]
 8005960:	429a      	cmp	r2, r3
 8005962:	d10d      	bne.n	8005980 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d009      	beq.n	8005980 <pbuf_copy+0x174>
 800596c:	4b09      	ldr	r3, [pc, #36]	; (8005994 <pbuf_copy+0x188>)
 800596e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005972:	490e      	ldr	r1, [pc, #56]	; (80059ac <pbuf_copy+0x1a0>)
 8005974:	4809      	ldr	r0, [pc, #36]	; (800599c <pbuf_copy+0x190>)
 8005976:	f009 f85b 	bl	800ea30 <iprintf>
 800597a:	f06f 0305 	mvn.w	r3, #5
 800597e:	e004      	b.n	800598a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f47f af61 	bne.w	800584a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	0800fec0 	.word	0x0800fec0
 8005998:	08010168 	.word	0x08010168
 800599c:	0800ff20 	.word	0x0800ff20
 80059a0:	08010198 	.word	0x08010198
 80059a4:	080101b0 	.word	0x080101b0
 80059a8:	080101cc 	.word	0x080101cc
 80059ac:	080101dc 	.word	0x080101dc

080059b0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4611      	mov	r1, r2
 80059bc:	461a      	mov	r2, r3
 80059be:	460b      	mov	r3, r1
 80059c0:	80fb      	strh	r3, [r7, #6]
 80059c2:	4613      	mov	r3, r2
 80059c4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d108      	bne.n	80059e6 <pbuf_copy_partial+0x36>
 80059d4:	4b2b      	ldr	r3, [pc, #172]	; (8005a84 <pbuf_copy_partial+0xd4>)
 80059d6:	f240 420a 	movw	r2, #1034	; 0x40a
 80059da:	492b      	ldr	r1, [pc, #172]	; (8005a88 <pbuf_copy_partial+0xd8>)
 80059dc:	482b      	ldr	r0, [pc, #172]	; (8005a8c <pbuf_copy_partial+0xdc>)
 80059de:	f009 f827 	bl	800ea30 <iprintf>
 80059e2:	2300      	movs	r3, #0
 80059e4:	e04a      	b.n	8005a7c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d108      	bne.n	80059fe <pbuf_copy_partial+0x4e>
 80059ec:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <pbuf_copy_partial+0xd4>)
 80059ee:	f240 420b 	movw	r2, #1035	; 0x40b
 80059f2:	4927      	ldr	r1, [pc, #156]	; (8005a90 <pbuf_copy_partial+0xe0>)
 80059f4:	4825      	ldr	r0, [pc, #148]	; (8005a8c <pbuf_copy_partial+0xdc>)
 80059f6:	f009 f81b 	bl	800ea30 <iprintf>
 80059fa:	2300      	movs	r3, #0
 80059fc:	e03e      	b.n	8005a7c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	e034      	b.n	8005a6e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005a04:	88bb      	ldrh	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <pbuf_copy_partial+0x70>
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	895b      	ldrh	r3, [r3, #10]
 8005a0e:	88ba      	ldrh	r2, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d305      	bcc.n	8005a20 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	895b      	ldrh	r3, [r3, #10]
 8005a18:	88ba      	ldrh	r2, [r7, #4]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	80bb      	strh	r3, [r7, #4]
 8005a1e:	e023      	b.n	8005a68 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	895a      	ldrh	r2, [r3, #10]
 8005a24:	88bb      	ldrh	r3, [r7, #4]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005a2a:	8b3a      	ldrh	r2, [r7, #24]
 8005a2c:	88fb      	ldrh	r3, [r7, #6]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d901      	bls.n	8005a36 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005a36:	8b7b      	ldrh	r3, [r7, #26]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	18d0      	adds	r0, r2, r3
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	88bb      	ldrh	r3, [r7, #4]
 8005a42:	4413      	add	r3, r2
 8005a44:	8b3a      	ldrh	r2, [r7, #24]
 8005a46:	4619      	mov	r1, r3
 8005a48:	f009 f8de 	bl	800ec08 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005a4c:	8afa      	ldrh	r2, [r7, #22]
 8005a4e:	8b3b      	ldrh	r3, [r7, #24]
 8005a50:	4413      	add	r3, r2
 8005a52:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005a54:	8b7a      	ldrh	r2, [r7, #26]
 8005a56:	8b3b      	ldrh	r3, [r7, #24]
 8005a58:	4413      	add	r3, r2
 8005a5a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005a5c:	88fa      	ldrh	r2, [r7, #6]
 8005a5e:	8b3b      	ldrh	r3, [r7, #24]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005a64:	2300      	movs	r3, #0
 8005a66:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	88fb      	ldrh	r3, [r7, #6]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <pbuf_copy_partial+0xca>
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1c4      	bne.n	8005a04 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005a7a:	8afb      	ldrh	r3, [r7, #22]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3720      	adds	r7, #32
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	0800fec0 	.word	0x0800fec0
 8005a88:	08010208 	.word	0x08010208
 8005a8c:	0800ff20 	.word	0x0800ff20
 8005a90:	08010228 	.word	0x08010228

08005a94 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	603a      	str	r2, [r7, #0]
 8005a9e:	71fb      	strb	r3, [r7, #7]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	8919      	ldrh	r1, [r3, #8]
 8005aa8:	88ba      	ldrh	r2, [r7, #4]
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff faa1 	bl	8004ff4 <pbuf_alloc>
 8005ab2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <pbuf_clone+0x2a>
    return NULL;
 8005aba:	2300      	movs	r3, #0
 8005abc:	e011      	b.n	8005ae2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff fea3 	bl	800580c <pbuf_copy>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005aca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d006      	beq.n	8005ae0 <pbuf_clone+0x4c>
 8005ad2:	4b06      	ldr	r3, [pc, #24]	; (8005aec <pbuf_clone+0x58>)
 8005ad4:	f240 5224 	movw	r2, #1316	; 0x524
 8005ad8:	4905      	ldr	r1, [pc, #20]	; (8005af0 <pbuf_clone+0x5c>)
 8005ada:	4806      	ldr	r0, [pc, #24]	; (8005af4 <pbuf_clone+0x60>)
 8005adc:	f008 ffa8 	bl	800ea30 <iprintf>
  return q;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	0800fec0 	.word	0x0800fec0
 8005af0:	08010334 	.word	0x08010334
 8005af4:	0800ff20 	.word	0x0800ff20

08005af8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005afc:	f008 feaa 	bl	800e854 <rand>
 8005b00:	4603      	mov	r3, r0
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	4b01      	ldr	r3, [pc, #4]	; (8005b18 <tcp_init+0x20>)
 8005b12:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005b14:	bf00      	nop
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20000020 	.word	0x20000020

08005b1c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	7d1b      	ldrb	r3, [r3, #20]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d105      	bne.n	8005b38 <tcp_free+0x1c>
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <tcp_free+0x2c>)
 8005b2e:	22d4      	movs	r2, #212	; 0xd4
 8005b30:	4906      	ldr	r1, [pc, #24]	; (8005b4c <tcp_free+0x30>)
 8005b32:	4807      	ldr	r0, [pc, #28]	; (8005b50 <tcp_free+0x34>)
 8005b34:	f008 ff7c 	bl	800ea30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	f7fe fec8 	bl	80048d0 <memp_free>
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	080103c0 	.word	0x080103c0
 8005b4c:	080103f0 	.word	0x080103f0
 8005b50:	08010404 	.word	0x08010404

08005b54 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	7d1b      	ldrb	r3, [r3, #20]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d105      	bne.n	8005b70 <tcp_free_listen+0x1c>
 8005b64:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <tcp_free_listen+0x2c>)
 8005b66:	22df      	movs	r2, #223	; 0xdf
 8005b68:	4906      	ldr	r1, [pc, #24]	; (8005b84 <tcp_free_listen+0x30>)
 8005b6a:	4807      	ldr	r0, [pc, #28]	; (8005b88 <tcp_free_listen+0x34>)
 8005b6c:	f008 ff60 	bl	800ea30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	2002      	movs	r0, #2
 8005b74:	f7fe feac 	bl	80048d0 <memp_free>
}
 8005b78:	bf00      	nop
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	080103c0 	.word	0x080103c0
 8005b84:	0801042c 	.word	0x0801042c
 8005b88:	08010404 	.word	0x08010404

08005b8c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005b90:	f001 f85c 	bl	8006c4c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005b94:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <tcp_tmr+0x28>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <tcp_tmr+0x28>)
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	4b04      	ldr	r3, [pc, #16]	; (8005bb4 <tcp_tmr+0x28>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005bac:	f000 fd0e 	bl	80065cc <tcp_slowtmr>
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20008255 	.word	0x20008255

08005bb8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d105      	bne.n	8005bd4 <tcp_remove_listener+0x1c>
 8005bc8:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <tcp_remove_listener+0x48>)
 8005bca:	22ff      	movs	r2, #255	; 0xff
 8005bcc:	490d      	ldr	r1, [pc, #52]	; (8005c04 <tcp_remove_listener+0x4c>)
 8005bce:	480e      	ldr	r0, [pc, #56]	; (8005c08 <tcp_remove_listener+0x50>)
 8005bd0:	f008 ff2e 	bl	800ea30 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	e00a      	b.n	8005bf0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d102      	bne.n	8005bea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f1      	bne.n	8005bda <tcp_remove_listener+0x22>
    }
  }
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	080103c0 	.word	0x080103c0
 8005c04:	08010448 	.word	0x08010448
 8005c08:	08010404 	.word	0x08010404

08005c0c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <tcp_listen_closed+0x1c>
 8005c1a:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <tcp_listen_closed+0x60>)
 8005c1c:	f240 1211 	movw	r2, #273	; 0x111
 8005c20:	4913      	ldr	r1, [pc, #76]	; (8005c70 <tcp_listen_closed+0x64>)
 8005c22:	4814      	ldr	r0, [pc, #80]	; (8005c74 <tcp_listen_closed+0x68>)
 8005c24:	f008 ff04 	bl	800ea30 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	7d1b      	ldrb	r3, [r3, #20]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d006      	beq.n	8005c3e <tcp_listen_closed+0x32>
 8005c30:	4b0e      	ldr	r3, [pc, #56]	; (8005c6c <tcp_listen_closed+0x60>)
 8005c32:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005c36:	4910      	ldr	r1, [pc, #64]	; (8005c78 <tcp_listen_closed+0x6c>)
 8005c38:	480e      	ldr	r0, [pc, #56]	; (8005c74 <tcp_listen_closed+0x68>)
 8005c3a:	f008 fef9 	bl	800ea30 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005c3e:	2301      	movs	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	e00b      	b.n	8005c5c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005c44:	4a0d      	ldr	r2, [pc, #52]	; (8005c7c <tcp_listen_closed+0x70>)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff ffb1 	bl	8005bb8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d9f0      	bls.n	8005c44 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005c62:	bf00      	nop
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	080103c0 	.word	0x080103c0
 8005c70:	08010470 	.word	0x08010470
 8005c74:	08010404 	.word	0x08010404
 8005c78:	0801047c 	.word	0x0801047c
 8005c7c:	08012398 	.word	0x08012398

08005c80 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005c80:	b5b0      	push	{r4, r5, r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af04      	add	r7, sp, #16
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <tcp_close_shutdown+0x20>
 8005c92:	4b63      	ldr	r3, [pc, #396]	; (8005e20 <tcp_close_shutdown+0x1a0>)
 8005c94:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005c98:	4962      	ldr	r1, [pc, #392]	; (8005e24 <tcp_close_shutdown+0x1a4>)
 8005c9a:	4863      	ldr	r0, [pc, #396]	; (8005e28 <tcp_close_shutdown+0x1a8>)
 8005c9c:	f008 fec8 	bl	800ea30 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d066      	beq.n	8005d74 <tcp_close_shutdown+0xf4>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	7d1b      	ldrb	r3, [r3, #20]
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d003      	beq.n	8005cb6 <tcp_close_shutdown+0x36>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	7d1b      	ldrb	r3, [r3, #20]
 8005cb2:	2b07      	cmp	r3, #7
 8005cb4:	d15e      	bne.n	8005d74 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d104      	bne.n	8005cc8 <tcp_close_shutdown+0x48>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005cc6:	d055      	beq.n	8005d74 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	8b5b      	ldrh	r3, [r3, #26]
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d106      	bne.n	8005ce2 <tcp_close_shutdown+0x62>
 8005cd4:	4b52      	ldr	r3, [pc, #328]	; (8005e20 <tcp_close_shutdown+0x1a0>)
 8005cd6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005cda:	4954      	ldr	r1, [pc, #336]	; (8005e2c <tcp_close_shutdown+0x1ac>)
 8005cdc:	4852      	ldr	r0, [pc, #328]	; (8005e28 <tcp_close_shutdown+0x1a8>)
 8005cde:	f008 fea7 	bl	800ea30 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005cea:	687d      	ldr	r5, [r7, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3304      	adds	r3, #4
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	8ad2      	ldrh	r2, [r2, #22]
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	8b09      	ldrh	r1, [r1, #24]
 8005cf8:	9102      	str	r1, [sp, #8]
 8005cfa:	9201      	str	r2, [sp, #4]
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	462b      	mov	r3, r5
 8005d00:	4622      	mov	r2, r4
 8005d02:	4601      	mov	r1, r0
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f005 fd89 	bl	800b81c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 fb66 	bl	80073dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005d10:	4b47      	ldr	r3, [pc, #284]	; (8005e30 <tcp_close_shutdown+0x1b0>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d105      	bne.n	8005d26 <tcp_close_shutdown+0xa6>
 8005d1a:	4b45      	ldr	r3, [pc, #276]	; (8005e30 <tcp_close_shutdown+0x1b0>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4a43      	ldr	r2, [pc, #268]	; (8005e30 <tcp_close_shutdown+0x1b0>)
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	e013      	b.n	8005d4e <tcp_close_shutdown+0xce>
 8005d26:	4b42      	ldr	r3, [pc, #264]	; (8005e30 <tcp_close_shutdown+0x1b0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	e00c      	b.n	8005d48 <tcp_close_shutdown+0xc8>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d104      	bne.n	8005d42 <tcp_close_shutdown+0xc2>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	60da      	str	r2, [r3, #12]
 8005d40:	e005      	b.n	8005d4e <tcp_close_shutdown+0xce>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1ef      	bne.n	8005d2e <tcp_close_shutdown+0xae>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	60da      	str	r2, [r3, #12]
 8005d54:	4b37      	ldr	r3, [pc, #220]	; (8005e34 <tcp_close_shutdown+0x1b4>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005d5a:	4b37      	ldr	r3, [pc, #220]	; (8005e38 <tcp_close_shutdown+0x1b8>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d102      	bne.n	8005d6a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005d64:	f003 fffe 	bl	8009d64 <tcp_trigger_input_pcb_close>
 8005d68:	e002      	b.n	8005d70 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff fed6 	bl	8005b1c <tcp_free>
      }
      return ERR_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	e050      	b.n	8005e16 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	7d1b      	ldrb	r3, [r3, #20]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d03b      	beq.n	8005df4 <tcp_close_shutdown+0x174>
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	dc44      	bgt.n	8005e0a <tcp_close_shutdown+0x18a>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <tcp_close_shutdown+0x10a>
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d02a      	beq.n	8005dde <tcp_close_shutdown+0x15e>
 8005d88:	e03f      	b.n	8005e0a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	8adb      	ldrh	r3, [r3, #22]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d021      	beq.n	8005dd6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005d92:	4b2a      	ldr	r3, [pc, #168]	; (8005e3c <tcp_close_shutdown+0x1bc>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d105      	bne.n	8005da8 <tcp_close_shutdown+0x128>
 8005d9c:	4b27      	ldr	r3, [pc, #156]	; (8005e3c <tcp_close_shutdown+0x1bc>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	4a26      	ldr	r2, [pc, #152]	; (8005e3c <tcp_close_shutdown+0x1bc>)
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	e013      	b.n	8005dd0 <tcp_close_shutdown+0x150>
 8005da8:	4b24      	ldr	r3, [pc, #144]	; (8005e3c <tcp_close_shutdown+0x1bc>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	e00c      	b.n	8005dca <tcp_close_shutdown+0x14a>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d104      	bne.n	8005dc4 <tcp_close_shutdown+0x144>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	60da      	str	r2, [r3, #12]
 8005dc2:	e005      	b.n	8005dd0 <tcp_close_shutdown+0x150>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1ef      	bne.n	8005db0 <tcp_close_shutdown+0x130>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff fea0 	bl	8005b1c <tcp_free>
      break;
 8005ddc:	e01a      	b.n	8005e14 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff ff14 	bl	8005c0c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	4816      	ldr	r0, [pc, #88]	; (8005e40 <tcp_close_shutdown+0x1c0>)
 8005de8:	f001 fb48 	bl	800747c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff feb1 	bl	8005b54 <tcp_free_listen>
      break;
 8005df2:	e00f      	b.n	8005e14 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005df4:	6879      	ldr	r1, [r7, #4]
 8005df6:	480e      	ldr	r0, [pc, #56]	; (8005e30 <tcp_close_shutdown+0x1b0>)
 8005df8:	f001 fb40 	bl	800747c <tcp_pcb_remove>
 8005dfc:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <tcp_close_shutdown+0x1b4>)
 8005dfe:	2201      	movs	r2, #1
 8005e00:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff fe8a 	bl	8005b1c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005e08:	e004      	b.n	8005e14 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f81a 	bl	8005e44 <tcp_close_shutdown_fin>
 8005e10:	4603      	mov	r3, r0
 8005e12:	e000      	b.n	8005e16 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	080103c0 	.word	0x080103c0
 8005e24:	08010494 	.word	0x08010494
 8005e28:	08010404 	.word	0x08010404
 8005e2c:	080104b4 	.word	0x080104b4
 8005e30:	2000824c 	.word	0x2000824c
 8005e34:	20008254 	.word	0x20008254
 8005e38:	2000828c 	.word	0x2000828c
 8005e3c:	20008244 	.word	0x20008244
 8005e40:	20008248 	.word	0x20008248

08005e44 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <tcp_close_shutdown_fin+0x1c>
 8005e52:	4b2e      	ldr	r3, [pc, #184]	; (8005f0c <tcp_close_shutdown_fin+0xc8>)
 8005e54:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005e58:	492d      	ldr	r1, [pc, #180]	; (8005f10 <tcp_close_shutdown_fin+0xcc>)
 8005e5a:	482e      	ldr	r0, [pc, #184]	; (8005f14 <tcp_close_shutdown_fin+0xd0>)
 8005e5c:	f008 fde8 	bl	800ea30 <iprintf>

  switch (pcb->state) {
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	7d1b      	ldrb	r3, [r3, #20]
 8005e64:	2b07      	cmp	r3, #7
 8005e66:	d020      	beq.n	8005eaa <tcp_close_shutdown_fin+0x66>
 8005e68:	2b07      	cmp	r3, #7
 8005e6a:	dc2b      	bgt.n	8005ec4 <tcp_close_shutdown_fin+0x80>
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d002      	beq.n	8005e76 <tcp_close_shutdown_fin+0x32>
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d00d      	beq.n	8005e90 <tcp_close_shutdown_fin+0x4c>
 8005e74:	e026      	b.n	8005ec4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f004 fdde 	bl	800aa38 <tcp_send_fin>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d11f      	bne.n	8005ec8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2205      	movs	r2, #5
 8005e8c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005e8e:	e01b      	b.n	8005ec8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f004 fdd1 	bl	800aa38 <tcp_send_fin>
 8005e96:	4603      	mov	r3, r0
 8005e98:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d114      	bne.n	8005ecc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2205      	movs	r2, #5
 8005ea6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005ea8:	e010      	b.n	8005ecc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f004 fdc4 	bl	800aa38 <tcp_send_fin>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d109      	bne.n	8005ed0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2209      	movs	r2, #9
 8005ec0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005ec2:	e005      	b.n	8005ed0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	e01c      	b.n	8005f02 <tcp_close_shutdown_fin+0xbe>
      break;
 8005ec8:	bf00      	nop
 8005eca:	e002      	b.n	8005ed2 <tcp_close_shutdown_fin+0x8e>
      break;
 8005ecc:	bf00      	nop
 8005ece:	e000      	b.n	8005ed2 <tcp_close_shutdown_fin+0x8e>
      break;
 8005ed0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d103      	bne.n	8005ee2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f004 feea 	bl	800acb4 <tcp_output>
 8005ee0:	e00d      	b.n	8005efe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d108      	bne.n	8005efe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	8b5b      	ldrh	r3, [r3, #26]
 8005ef0:	f043 0308 	orr.w	r3, r3, #8
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	e001      	b.n	8005f02 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	080103c0 	.word	0x080103c0
 8005f10:	08010470 	.word	0x08010470
 8005f14:	08010404 	.word	0x08010404

08005f18 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <tcp_close+0x22>
 8005f26:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <tcp_close+0x4c>)
 8005f28:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005f2c:	490e      	ldr	r1, [pc, #56]	; (8005f68 <tcp_close+0x50>)
 8005f2e:	480f      	ldr	r0, [pc, #60]	; (8005f6c <tcp_close+0x54>)
 8005f30:	f008 fd7e 	bl	800ea30 <iprintf>
 8005f34:	f06f 030f 	mvn.w	r3, #15
 8005f38:	e00f      	b.n	8005f5a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	7d1b      	ldrb	r3, [r3, #20]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d006      	beq.n	8005f50 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8b5b      	ldrh	r3, [r3, #26]
 8005f46:	f043 0310 	orr.w	r3, r3, #16
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005f50:	2101      	movs	r1, #1
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff fe94 	bl	8005c80 <tcp_close_shutdown>
 8005f58:	4603      	mov	r3, r0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	080103c0 	.word	0x080103c0
 8005f68:	080104d0 	.word	0x080104d0
 8005f6c:	08010404 	.word	0x08010404

08005f70 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08e      	sub	sp, #56	; 0x38
 8005f74:	af04      	add	r7, sp, #16
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d107      	bne.n	8005f90 <tcp_abandon+0x20>
 8005f80:	4b52      	ldr	r3, [pc, #328]	; (80060cc <tcp_abandon+0x15c>)
 8005f82:	f240 223d 	movw	r2, #573	; 0x23d
 8005f86:	4952      	ldr	r1, [pc, #328]	; (80060d0 <tcp_abandon+0x160>)
 8005f88:	4852      	ldr	r0, [pc, #328]	; (80060d4 <tcp_abandon+0x164>)
 8005f8a:	f008 fd51 	bl	800ea30 <iprintf>
 8005f8e:	e099      	b.n	80060c4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	7d1b      	ldrb	r3, [r3, #20]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d106      	bne.n	8005fa6 <tcp_abandon+0x36>
 8005f98:	4b4c      	ldr	r3, [pc, #304]	; (80060cc <tcp_abandon+0x15c>)
 8005f9a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005f9e:	494e      	ldr	r1, [pc, #312]	; (80060d8 <tcp_abandon+0x168>)
 8005fa0:	484c      	ldr	r0, [pc, #304]	; (80060d4 <tcp_abandon+0x164>)
 8005fa2:	f008 fd45 	bl	800ea30 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	7d1b      	ldrb	r3, [r3, #20]
 8005faa:	2b0a      	cmp	r3, #10
 8005fac:	d107      	bne.n	8005fbe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	484a      	ldr	r0, [pc, #296]	; (80060dc <tcp_abandon+0x16c>)
 8005fb2:	f001 fa63 	bl	800747c <tcp_pcb_remove>
    tcp_free(pcb);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff fdb0 	bl	8005b1c <tcp_free>
 8005fbc:	e082      	b.n	80060c4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	7d1b      	ldrb	r3, [r3, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d126      	bne.n	8006036 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8adb      	ldrh	r3, [r3, #22]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d02e      	beq.n	800604e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005ff0:	4b3b      	ldr	r3, [pc, #236]	; (80060e0 <tcp_abandon+0x170>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d105      	bne.n	8006006 <tcp_abandon+0x96>
 8005ffa:	4b39      	ldr	r3, [pc, #228]	; (80060e0 <tcp_abandon+0x170>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	4a37      	ldr	r2, [pc, #220]	; (80060e0 <tcp_abandon+0x170>)
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	e013      	b.n	800602e <tcp_abandon+0xbe>
 8006006:	4b36      	ldr	r3, [pc, #216]	; (80060e0 <tcp_abandon+0x170>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	61fb      	str	r3, [r7, #28]
 800600c:	e00c      	b.n	8006028 <tcp_abandon+0xb8>
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	429a      	cmp	r2, r3
 8006016:	d104      	bne.n	8006022 <tcp_abandon+0xb2>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	60da      	str	r2, [r3, #12]
 8006020:	e005      	b.n	800602e <tcp_abandon+0xbe>
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1ef      	bne.n	800600e <tcp_abandon+0x9e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	60da      	str	r2, [r3, #12]
 8006034:	e00b      	b.n	800604e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	8adb      	ldrh	r3, [r3, #22]
 800603e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	4828      	ldr	r0, [pc, #160]	; (80060e4 <tcp_abandon+0x174>)
 8006044:	f001 fa1a 	bl	800747c <tcp_pcb_remove>
 8006048:	4b27      	ldr	r3, [pc, #156]	; (80060e8 <tcp_abandon+0x178>)
 800604a:	2201      	movs	r2, #1
 800604c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	2b00      	cmp	r3, #0
 8006054:	d004      	beq.n	8006060 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fed6 	bl	8006e0c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d004      	beq.n	8006072 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fecd 	bl	8006e0c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006076:	2b00      	cmp	r3, #0
 8006078:	d004      	beq.n	8006084 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fec4 	bl	8006e0c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00e      	beq.n	80060a8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	3304      	adds	r3, #4
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	8b12      	ldrh	r2, [r2, #24]
 8006094:	9202      	str	r2, [sp, #8]
 8006096:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006098:	9201      	str	r2, [sp, #4]
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	460b      	mov	r3, r1
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	69b9      	ldr	r1, [r7, #24]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f005 fbba 	bl	800b81c <tcp_rst>
    }
    last_state = pcb->state;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	7d1b      	ldrb	r3, [r3, #20]
 80060ac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7ff fd34 	bl	8005b1c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d004      	beq.n	80060c4 <tcp_abandon+0x154>
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f06f 010c 	mvn.w	r1, #12
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	4798      	blx	r3
  }
}
 80060c4:	3728      	adds	r7, #40	; 0x28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	080103c0 	.word	0x080103c0
 80060d0:	08010504 	.word	0x08010504
 80060d4:	08010404 	.word	0x08010404
 80060d8:	08010520 	.word	0x08010520
 80060dc:	20008250 	.word	0x20008250
 80060e0:	20008244 	.word	0x20008244
 80060e4:	2000824c 	.word	0x2000824c
 80060e8:	20008254 	.word	0x20008254

080060ec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80060f4:	2101      	movs	r1, #1
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff ff3a 	bl	8005f70 <tcp_abandon>
}
 80060fc:	bf00      	nop
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	4613      	mov	r3, r2
 8006110:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006112:	2304      	movs	r3, #4
 8006114:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800611c:	4b3e      	ldr	r3, [pc, #248]	; (8006218 <tcp_bind+0x114>)
 800611e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d109      	bne.n	800613a <tcp_bind+0x36>
 8006126:	4b3d      	ldr	r3, [pc, #244]	; (800621c <tcp_bind+0x118>)
 8006128:	f240 22a9 	movw	r2, #681	; 0x2a9
 800612c:	493c      	ldr	r1, [pc, #240]	; (8006220 <tcp_bind+0x11c>)
 800612e:	483d      	ldr	r0, [pc, #244]	; (8006224 <tcp_bind+0x120>)
 8006130:	f008 fc7e 	bl	800ea30 <iprintf>
 8006134:	f06f 030f 	mvn.w	r3, #15
 8006138:	e06a      	b.n	8006210 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	7d1b      	ldrb	r3, [r3, #20]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <tcp_bind+0x52>
 8006142:	4b36      	ldr	r3, [pc, #216]	; (800621c <tcp_bind+0x118>)
 8006144:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006148:	4937      	ldr	r1, [pc, #220]	; (8006228 <tcp_bind+0x124>)
 800614a:	4836      	ldr	r0, [pc, #216]	; (8006224 <tcp_bind+0x120>)
 800614c:	f008 fc70 	bl	800ea30 <iprintf>
 8006150:	f06f 0305 	mvn.w	r3, #5
 8006154:	e05c      	b.n	8006210 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d109      	bne.n	8006170 <tcp_bind+0x6c>
    port = tcp_new_port();
 800615c:	f000 f9f0 	bl	8006540 <tcp_new_port>
 8006160:	4603      	mov	r3, r0
 8006162:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006164:	88fb      	ldrh	r3, [r7, #6]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d135      	bne.n	80061d6 <tcp_bind+0xd2>
      return ERR_BUF;
 800616a:	f06f 0301 	mvn.w	r3, #1
 800616e:	e04f      	b.n	8006210 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006170:	2300      	movs	r3, #0
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	e02b      	b.n	80061ce <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006176:	4a2d      	ldr	r2, [pc, #180]	; (800622c <tcp_bind+0x128>)
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	e01e      	b.n	80061c2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	8adb      	ldrh	r3, [r3, #22]
 8006188:	88fa      	ldrh	r2, [r7, #6]
 800618a:	429a      	cmp	r2, r3
 800618c:	d116      	bne.n	80061bc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800618e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006190:	2b00      	cmp	r3, #0
 8006192:	d010      	beq.n	80061b6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00c      	beq.n	80061b6 <tcp_bind+0xb2>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d102      	bne.n	80061bc <tcp_bind+0xb8>
              return ERR_USE;
 80061b6:	f06f 0307 	mvn.w	r3, #7
 80061ba:	e029      	b.n	8006210 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1dd      	bne.n	8006184 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	3301      	adds	r3, #1
 80061cc:	61fb      	str	r3, [r7, #28]
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	dbcf      	blt.n	8006176 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00c      	beq.n	80061f6 <tcp_bind+0xf2>
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <tcp_bind+0xec>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	e000      	b.n	80061f2 <tcp_bind+0xee>
 80061f0:	2300      	movs	r3, #0
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	88fa      	ldrh	r2, [r7, #6]
 80061fa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80061fc:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <tcp_bind+0x12c>)
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	60da      	str	r2, [r3, #12]
 8006204:	4a0a      	ldr	r2, [pc, #40]	; (8006230 <tcp_bind+0x12c>)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	f005 fcc9 	bl	800bba0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3720      	adds	r7, #32
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	080123c0 	.word	0x080123c0
 800621c:	080103c0 	.word	0x080103c0
 8006220:	08010554 	.word	0x08010554
 8006224:	08010404 	.word	0x08010404
 8006228:	0801056c 	.word	0x0801056c
 800622c:	08012398 	.word	0x08012398
 8006230:	20008244 	.word	0x20008244

08006234 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	4613      	mov	r3, r2
 8006240:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d106      	bne.n	8006256 <tcp_accept_null+0x22>
 8006248:	4b07      	ldr	r3, [pc, #28]	; (8006268 <tcp_accept_null+0x34>)
 800624a:	f240 320f 	movw	r2, #783	; 0x30f
 800624e:	4907      	ldr	r1, [pc, #28]	; (800626c <tcp_accept_null+0x38>)
 8006250:	4807      	ldr	r0, [pc, #28]	; (8006270 <tcp_accept_null+0x3c>)
 8006252:	f008 fbed 	bl	800ea30 <iprintf>

  tcp_abort(pcb);
 8006256:	68b8      	ldr	r0, [r7, #8]
 8006258:	f7ff ff48 	bl	80060ec <tcp_abort>

  return ERR_ABRT;
 800625c:	f06f 030c 	mvn.w	r3, #12
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	080103c0 	.word	0x080103c0
 800626c:	08010594 	.word	0x08010594
 8006270:	08010404 	.word	0x08010404

08006274 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	2200      	movs	r2, #0
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f806 	bl	8006298 <tcp_listen_with_backlog_and_err>
 800628c:	4603      	mov	r3, r0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	460b      	mov	r3, r1
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d109      	bne.n	80062c4 <tcp_listen_with_backlog_and_err+0x2c>
 80062b0:	4b47      	ldr	r3, [pc, #284]	; (80063d0 <tcp_listen_with_backlog_and_err+0x138>)
 80062b2:	f240 3259 	movw	r2, #857	; 0x359
 80062b6:	4947      	ldr	r1, [pc, #284]	; (80063d4 <tcp_listen_with_backlog_and_err+0x13c>)
 80062b8:	4847      	ldr	r0, [pc, #284]	; (80063d8 <tcp_listen_with_backlog_and_err+0x140>)
 80062ba:	f008 fbb9 	bl	800ea30 <iprintf>
 80062be:	23f0      	movs	r3, #240	; 0xf0
 80062c0:	76fb      	strb	r3, [r7, #27]
 80062c2:	e079      	b.n	80063b8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	7d1b      	ldrb	r3, [r3, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d009      	beq.n	80062e0 <tcp_listen_with_backlog_and_err+0x48>
 80062cc:	4b40      	ldr	r3, [pc, #256]	; (80063d0 <tcp_listen_with_backlog_and_err+0x138>)
 80062ce:	f240 325a 	movw	r2, #858	; 0x35a
 80062d2:	4942      	ldr	r1, [pc, #264]	; (80063dc <tcp_listen_with_backlog_and_err+0x144>)
 80062d4:	4840      	ldr	r0, [pc, #256]	; (80063d8 <tcp_listen_with_backlog_and_err+0x140>)
 80062d6:	f008 fbab 	bl	800ea30 <iprintf>
 80062da:	23f1      	movs	r3, #241	; 0xf1
 80062dc:	76fb      	strb	r3, [r7, #27]
 80062de:	e06b      	b.n	80063b8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	7d1b      	ldrb	r3, [r3, #20]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d104      	bne.n	80062f2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80062ec:	23f7      	movs	r3, #247	; 0xf7
 80062ee:	76fb      	strb	r3, [r7, #27]
    goto done;
 80062f0:	e062      	b.n	80063b8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80062f2:	2002      	movs	r0, #2
 80062f4:	f7fe fa7c 	bl	80047f0 <memp_malloc>
 80062f8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8006300:	23ff      	movs	r3, #255	; 0xff
 8006302:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006304:	e058      	b.n	80063b8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8ada      	ldrh	r2, [r3, #22]
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	2201      	movs	r2, #1
 800631a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	7d5a      	ldrb	r2, [r3, #21]
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	7a5a      	ldrb	r2, [r3, #9]
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2200      	movs	r2, #0
 8006330:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	7ada      	ldrb	r2, [r3, #11]
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	7a9a      	ldrb	r2, [r3, #10]
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8adb      	ldrh	r3, [r3, #22]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d021      	beq.n	8006396 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006352:	4b23      	ldr	r3, [pc, #140]	; (80063e0 <tcp_listen_with_backlog_and_err+0x148>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	429a      	cmp	r2, r3
 800635a:	d105      	bne.n	8006368 <tcp_listen_with_backlog_and_err+0xd0>
 800635c:	4b20      	ldr	r3, [pc, #128]	; (80063e0 <tcp_listen_with_backlog_and_err+0x148>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	4a1f      	ldr	r2, [pc, #124]	; (80063e0 <tcp_listen_with_backlog_and_err+0x148>)
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e013      	b.n	8006390 <tcp_listen_with_backlog_and_err+0xf8>
 8006368:	4b1d      	ldr	r3, [pc, #116]	; (80063e0 <tcp_listen_with_backlog_and_err+0x148>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	e00c      	b.n	800638a <tcp_listen_with_backlog_and_err+0xf2>
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	429a      	cmp	r2, r3
 8006378:	d104      	bne.n	8006384 <tcp_listen_with_backlog_and_err+0xec>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	60da      	str	r2, [r3, #12]
 8006382:	e005      	b.n	8006390 <tcp_listen_with_backlog_and_err+0xf8>
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1ef      	bne.n	8006370 <tcp_listen_with_backlog_and_err+0xd8>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7ff fbc0 	bl	8005b1c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4a11      	ldr	r2, [pc, #68]	; (80063e4 <tcp_listen_with_backlog_and_err+0x14c>)
 80063a0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80063a2:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <tcp_listen_with_backlog_and_err+0x150>)
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	60da      	str	r2, [r3, #12]
 80063aa:	4a0f      	ldr	r2, [pc, #60]	; (80063e8 <tcp_listen_with_backlog_and_err+0x150>)
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	f005 fbf6 	bl	800bba0 <tcp_timer_needed>
  res = ERR_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	7efa      	ldrb	r2, [r7, #27]
 80063c2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80063c4:	69fb      	ldr	r3, [r7, #28]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3720      	adds	r7, #32
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	080103c0 	.word	0x080103c0
 80063d4:	080105b4 	.word	0x080105b4
 80063d8:	08010404 	.word	0x08010404
 80063dc:	080105e4 	.word	0x080105e4
 80063e0:	20008244 	.word	0x20008244
 80063e4:	08006235 	.word	0x08006235
 80063e8:	20008248 	.word	0x20008248

080063ec <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <tcp_update_rcv_ann_wnd+0x1c>
 80063fa:	4b25      	ldr	r3, [pc, #148]	; (8006490 <tcp_update_rcv_ann_wnd+0xa4>)
 80063fc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006400:	4924      	ldr	r1, [pc, #144]	; (8006494 <tcp_update_rcv_ann_wnd+0xa8>)
 8006402:	4825      	ldr	r0, [pc, #148]	; (8006498 <tcp_update_rcv_ann_wnd+0xac>)
 8006404:	f008 fb14 	bl	800ea30 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006410:	4413      	add	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800641c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006420:	bf28      	it	cs
 8006422:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006426:	b292      	uxth	r2, r2
 8006428:	4413      	add	r3, r2
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	db08      	blt.n	8006444 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	e020      	b.n	8006486 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	dd03      	ble.n	800645a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006458:	e014      	b.n	8006484 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800646c:	d306      	bcc.n	800647c <tcp_update_rcv_ann_wnd+0x90>
 800646e:	4b08      	ldr	r3, [pc, #32]	; (8006490 <tcp_update_rcv_ann_wnd+0xa4>)
 8006470:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006474:	4909      	ldr	r1, [pc, #36]	; (800649c <tcp_update_rcv_ann_wnd+0xb0>)
 8006476:	4808      	ldr	r0, [pc, #32]	; (8006498 <tcp_update_rcv_ann_wnd+0xac>)
 8006478:	f008 fada 	bl	800ea30 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	b29a      	uxth	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006484:	2300      	movs	r3, #0
  }
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	080103c0 	.word	0x080103c0
 8006494:	0801061c 	.word	0x0801061c
 8006498:	08010404 	.word	0x08010404
 800649c:	08010640 	.word	0x08010640

080064a0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d107      	bne.n	80064c2 <tcp_recved+0x22>
 80064b2:	4b1f      	ldr	r3, [pc, #124]	; (8006530 <tcp_recved+0x90>)
 80064b4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80064b8:	491e      	ldr	r1, [pc, #120]	; (8006534 <tcp_recved+0x94>)
 80064ba:	481f      	ldr	r0, [pc, #124]	; (8006538 <tcp_recved+0x98>)
 80064bc:	f008 fab8 	bl	800ea30 <iprintf>
 80064c0:	e032      	b.n	8006528 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	7d1b      	ldrb	r3, [r3, #20]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d106      	bne.n	80064d8 <tcp_recved+0x38>
 80064ca:	4b19      	ldr	r3, [pc, #100]	; (8006530 <tcp_recved+0x90>)
 80064cc:	f240 32d2 	movw	r2, #978	; 0x3d2
 80064d0:	491a      	ldr	r1, [pc, #104]	; (800653c <tcp_recved+0x9c>)
 80064d2:	4819      	ldr	r0, [pc, #100]	; (8006538 <tcp_recved+0x98>)
 80064d4:	f008 faac 	bl	800ea30 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80064dc:	887b      	ldrh	r3, [r7, #2]
 80064de:	4413      	add	r3, r2
 80064e0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80064e2:	89fb      	ldrh	r3, [r7, #14]
 80064e4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80064e8:	d804      	bhi.n	80064f4 <tcp_recved+0x54>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ee:	89fa      	ldrh	r2, [r7, #14]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d204      	bcs.n	80064fe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80064fa:	851a      	strh	r2, [r3, #40]	; 0x28
 80064fc:	e002      	b.n	8006504 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	89fa      	ldrh	r2, [r7, #14]
 8006502:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff ff71 	bl	80063ec <tcp_update_rcv_ann_wnd>
 800650a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006512:	d309      	bcc.n	8006528 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8b5b      	ldrh	r3, [r3, #26]
 8006518:	f043 0302 	orr.w	r3, r3, #2
 800651c:	b29a      	uxth	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f004 fbc6 	bl	800acb4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	080103c0 	.word	0x080103c0
 8006534:	0801065c 	.word	0x0801065c
 8006538:	08010404 	.word	0x08010404
 800653c:	08010674 	.word	0x08010674

08006540 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800654a:	4b1e      	ldr	r3, [pc, #120]	; (80065c4 <tcp_new_port+0x84>)
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	3301      	adds	r3, #1
 8006550:	b29a      	uxth	r2, r3
 8006552:	4b1c      	ldr	r3, [pc, #112]	; (80065c4 <tcp_new_port+0x84>)
 8006554:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006556:	4b1b      	ldr	r3, [pc, #108]	; (80065c4 <tcp_new_port+0x84>)
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800655e:	4293      	cmp	r3, r2
 8006560:	d103      	bne.n	800656a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006562:	4b18      	ldr	r3, [pc, #96]	; (80065c4 <tcp_new_port+0x84>)
 8006564:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006568:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800656a:	2300      	movs	r3, #0
 800656c:	71fb      	strb	r3, [r7, #7]
 800656e:	e01e      	b.n	80065ae <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	4a15      	ldr	r2, [pc, #84]	; (80065c8 <tcp_new_port+0x88>)
 8006574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	e011      	b.n	80065a2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	8ada      	ldrh	r2, [r3, #22]
 8006582:	4b10      	ldr	r3, [pc, #64]	; (80065c4 <tcp_new_port+0x84>)
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d108      	bne.n	800659c <tcp_new_port+0x5c>
        n++;
 800658a:	88bb      	ldrh	r3, [r7, #4]
 800658c:	3301      	adds	r3, #1
 800658e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006590:	88bb      	ldrh	r3, [r7, #4]
 8006592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006596:	d3d8      	bcc.n	800654a <tcp_new_port+0xa>
          return 0;
 8006598:	2300      	movs	r3, #0
 800659a:	e00d      	b.n	80065b8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	603b      	str	r3, [r7, #0]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1ea      	bne.n	800657e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80065a8:	79fb      	ldrb	r3, [r7, #7]
 80065aa:	3301      	adds	r3, #1
 80065ac:	71fb      	strb	r3, [r7, #7]
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d9dd      	bls.n	8006570 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80065b4:	4b03      	ldr	r3, [pc, #12]	; (80065c4 <tcp_new_port+0x84>)
 80065b6:	881b      	ldrh	r3, [r3, #0]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	20000020 	.word	0x20000020
 80065c8:	08012398 	.word	0x08012398

080065cc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80065cc:	b5b0      	push	{r4, r5, r7, lr}
 80065ce:	b090      	sub	sp, #64	; 0x40
 80065d0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80065d8:	4b94      	ldr	r3, [pc, #592]	; (800682c <tcp_slowtmr+0x260>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3301      	adds	r3, #1
 80065de:	4a93      	ldr	r2, [pc, #588]	; (800682c <tcp_slowtmr+0x260>)
 80065e0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80065e2:	4b93      	ldr	r3, [pc, #588]	; (8006830 <tcp_slowtmr+0x264>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	3301      	adds	r3, #1
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	4b91      	ldr	r3, [pc, #580]	; (8006830 <tcp_slowtmr+0x264>)
 80065ec:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80065f2:	4b90      	ldr	r3, [pc, #576]	; (8006834 <tcp_slowtmr+0x268>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80065f8:	e29f      	b.n	8006b3a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	7d1b      	ldrb	r3, [r3, #20]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <tcp_slowtmr+0x44>
 8006602:	4b8d      	ldr	r3, [pc, #564]	; (8006838 <tcp_slowtmr+0x26c>)
 8006604:	f240 42be 	movw	r2, #1214	; 0x4be
 8006608:	498c      	ldr	r1, [pc, #560]	; (800683c <tcp_slowtmr+0x270>)
 800660a:	488d      	ldr	r0, [pc, #564]	; (8006840 <tcp_slowtmr+0x274>)
 800660c:	f008 fa10 	bl	800ea30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006612:	7d1b      	ldrb	r3, [r3, #20]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d106      	bne.n	8006626 <tcp_slowtmr+0x5a>
 8006618:	4b87      	ldr	r3, [pc, #540]	; (8006838 <tcp_slowtmr+0x26c>)
 800661a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800661e:	4989      	ldr	r1, [pc, #548]	; (8006844 <tcp_slowtmr+0x278>)
 8006620:	4887      	ldr	r0, [pc, #540]	; (8006840 <tcp_slowtmr+0x274>)
 8006622:	f008 fa05 	bl	800ea30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006628:	7d1b      	ldrb	r3, [r3, #20]
 800662a:	2b0a      	cmp	r3, #10
 800662c:	d106      	bne.n	800663c <tcp_slowtmr+0x70>
 800662e:	4b82      	ldr	r3, [pc, #520]	; (8006838 <tcp_slowtmr+0x26c>)
 8006630:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006634:	4984      	ldr	r1, [pc, #528]	; (8006848 <tcp_slowtmr+0x27c>)
 8006636:	4882      	ldr	r0, [pc, #520]	; (8006840 <tcp_slowtmr+0x274>)
 8006638:	f008 f9fa 	bl	800ea30 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	7f9a      	ldrb	r2, [r3, #30]
 8006640:	4b7b      	ldr	r3, [pc, #492]	; (8006830 <tcp_slowtmr+0x264>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	429a      	cmp	r2, r3
 8006646:	d105      	bne.n	8006654 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006652:	e272      	b.n	8006b3a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006654:	4b76      	ldr	r3, [pc, #472]	; (8006830 <tcp_slowtmr+0x264>)
 8006656:	781a      	ldrb	r2, [r3, #0]
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	7d1b      	ldrb	r3, [r3, #20]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d10a      	bne.n	8006686 <tcp_slowtmr+0xba>
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006676:	2b05      	cmp	r3, #5
 8006678:	d905      	bls.n	8006686 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800667a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800667e:	3301      	adds	r3, #1
 8006680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006684:	e11e      	b.n	80068c4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006688:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800668c:	2b0b      	cmp	r3, #11
 800668e:	d905      	bls.n	800669c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006694:	3301      	adds	r3, #1
 8006696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800669a:	e113      	b.n	80068c4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d075      	beq.n	8006792 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d006      	beq.n	80066bc <tcp_slowtmr+0xf0>
 80066ae:	4b62      	ldr	r3, [pc, #392]	; (8006838 <tcp_slowtmr+0x26c>)
 80066b0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80066b4:	4965      	ldr	r1, [pc, #404]	; (800684c <tcp_slowtmr+0x280>)
 80066b6:	4862      	ldr	r0, [pc, #392]	; (8006840 <tcp_slowtmr+0x274>)
 80066b8:	f008 f9ba 	bl	800ea30 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d106      	bne.n	80066d2 <tcp_slowtmr+0x106>
 80066c4:	4b5c      	ldr	r3, [pc, #368]	; (8006838 <tcp_slowtmr+0x26c>)
 80066c6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80066ca:	4961      	ldr	r1, [pc, #388]	; (8006850 <tcp_slowtmr+0x284>)
 80066cc:	485c      	ldr	r0, [pc, #368]	; (8006840 <tcp_slowtmr+0x274>)
 80066ce:	f008 f9af 	bl	800ea30 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80066d8:	2b0b      	cmp	r3, #11
 80066da:	d905      	bls.n	80066e8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80066dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066e0:	3301      	adds	r3, #1
 80066e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80066e6:	e0ed      	b.n	80068c4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80066ee:	3b01      	subs	r3, #1
 80066f0:	4a58      	ldr	r2, [pc, #352]	; (8006854 <tcp_slowtmr+0x288>)
 80066f2:	5cd3      	ldrb	r3, [r2, r3]
 80066f4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80066fc:	7c7a      	ldrb	r2, [r7, #17]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d907      	bls.n	8006712 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006708:	3301      	adds	r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006718:	7c7a      	ldrb	r2, [r7, #17]
 800671a:	429a      	cmp	r2, r3
 800671c:	f200 80d2 	bhi.w	80068c4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006720:	2301      	movs	r3, #1
 8006722:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800672a:	2b00      	cmp	r3, #0
 800672c:	d108      	bne.n	8006740 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800672e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006730:	f005 f968 	bl	800ba04 <tcp_zero_window_probe>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d014      	beq.n	8006764 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800673a:	2300      	movs	r3, #0
 800673c:	623b      	str	r3, [r7, #32]
 800673e:	e011      	b.n	8006764 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006746:	4619      	mov	r1, r3
 8006748:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800674a:	f004 f82d 	bl	800a7a8 <tcp_split_unsent_seg>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d107      	bne.n	8006764 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006754:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006756:	f004 faad 	bl	800acb4 <tcp_output>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80ac 	beq.w	80068c4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800677a:	2b06      	cmp	r3, #6
 800677c:	f200 80a2 	bhi.w	80068c4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006782:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006786:	3301      	adds	r3, #1
 8006788:	b2da      	uxtb	r2, r3
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006790:	e098      	b.n	80068c4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006798:	2b00      	cmp	r3, #0
 800679a:	db0f      	blt.n	80067bc <tcp_slowtmr+0x1f0>
 800679c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80067a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d008      	beq.n	80067bc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	3301      	adds	r3, #1
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	b21a      	sxth	r2, r3
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80067c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80067c8:	429a      	cmp	r2, r3
 80067ca:	db7b      	blt.n	80068c4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80067cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067ce:	f004 fd65 	bl	800b29c <tcp_rexmit_rto_prepare>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <tcp_slowtmr+0x21c>
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d171      	bne.n	80068c4 <tcp_slowtmr+0x2f8>
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d06d      	beq.n	80068c4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ea:	7d1b      	ldrb	r3, [r3, #20]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d03a      	beq.n	8006866 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067f6:	2b0c      	cmp	r3, #12
 80067f8:	bf28      	it	cs
 80067fa:	230c      	movcs	r3, #12
 80067fc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006804:	10db      	asrs	r3, r3, #3
 8006806:	b21b      	sxth	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006810:	4413      	add	r3, r2
 8006812:	7efa      	ldrb	r2, [r7, #27]
 8006814:	4910      	ldr	r1, [pc, #64]	; (8006858 <tcp_slowtmr+0x28c>)
 8006816:	5c8a      	ldrb	r2, [r1, r2]
 8006818:	4093      	lsls	r3, r2
 800681a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006822:	4293      	cmp	r3, r2
 8006824:	dc1a      	bgt.n	800685c <tcp_slowtmr+0x290>
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	b21a      	sxth	r2, r3
 800682a:	e019      	b.n	8006860 <tcp_slowtmr+0x294>
 800682c:	20008240 	.word	0x20008240
 8006830:	20008256 	.word	0x20008256
 8006834:	2000824c 	.word	0x2000824c
 8006838:	080103c0 	.word	0x080103c0
 800683c:	08010704 	.word	0x08010704
 8006840:	08010404 	.word	0x08010404
 8006844:	08010730 	.word	0x08010730
 8006848:	0801075c 	.word	0x0801075c
 800684c:	0801078c 	.word	0x0801078c
 8006850:	080107c0 	.word	0x080107c0
 8006854:	08012390 	.word	0x08012390
 8006858:	08012380 	.word	0x08012380
 800685c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	2200      	movs	r2, #0
 800686a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006878:	4293      	cmp	r3, r2
 800687a:	bf28      	it	cs
 800687c:	4613      	movcs	r3, r2
 800687e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006880:	8a7b      	ldrh	r3, [r7, #18]
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	b29b      	uxth	r3, r3
 800689a:	429a      	cmp	r2, r3
 800689c:	d206      	bcs.n	80068ac <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80068ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ae:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80068be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068c0:	f004 fd5c 	bl	800b37c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	7d1b      	ldrb	r3, [r3, #20]
 80068c8:	2b06      	cmp	r3, #6
 80068ca:	d111      	bne.n	80068f0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	8b5b      	ldrh	r3, [r3, #26]
 80068d0:	f003 0310 	and.w	r3, r3, #16
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00b      	beq.n	80068f0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068d8:	4b9d      	ldr	r3, [pc, #628]	; (8006b50 <tcp_slowtmr+0x584>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b28      	cmp	r3, #40	; 0x28
 80068e4:	d904      	bls.n	80068f0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80068e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068ea:	3301      	adds	r3, #1
 80068ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80068f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f2:	7a5b      	ldrb	r3, [r3, #9]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d04c      	beq.n	8006996 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006900:	2b04      	cmp	r3, #4
 8006902:	d003      	beq.n	800690c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006908:	2b07      	cmp	r3, #7
 800690a:	d144      	bne.n	8006996 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800690c:	4b90      	ldr	r3, [pc, #576]	; (8006b50 <tcp_slowtmr+0x584>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800691c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006920:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006924:	498b      	ldr	r1, [pc, #556]	; (8006b54 <tcp_slowtmr+0x588>)
 8006926:	fba1 1303 	umull	r1, r3, r1, r3
 800692a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800692c:	429a      	cmp	r2, r3
 800692e:	d90a      	bls.n	8006946 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006934:	3301      	adds	r3, #1
 8006936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800693a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800693e:	3301      	adds	r3, #1
 8006940:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006944:	e027      	b.n	8006996 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006946:	4b82      	ldr	r3, [pc, #520]	; (8006b50 <tcp_slowtmr+0x584>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800695c:	4618      	mov	r0, r3
 800695e:	4b7e      	ldr	r3, [pc, #504]	; (8006b58 <tcp_slowtmr+0x58c>)
 8006960:	fb00 f303 	mul.w	r3, r0, r3
 8006964:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006966:	497b      	ldr	r1, [pc, #492]	; (8006b54 <tcp_slowtmr+0x588>)
 8006968:	fba1 1303 	umull	r1, r3, r1, r3
 800696c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800696e:	429a      	cmp	r2, r3
 8006970:	d911      	bls.n	8006996 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8006972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006974:	f005 f806 	bl	800b984 <tcp_keepalive>
 8006978:	4603      	mov	r3, r0
 800697a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800697e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006982:	2b00      	cmp	r3, #0
 8006984:	d107      	bne.n	8006996 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006988:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800698c:	3301      	adds	r3, #1
 800698e:	b2da      	uxtb	r2, r3
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800699a:	2b00      	cmp	r3, #0
 800699c:	d011      	beq.n	80069c2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800699e:	4b6c      	ldr	r3, [pc, #432]	; (8006b50 <tcp_slowtmr+0x584>)
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	1ad2      	subs	r2, r2, r3
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80069ae:	4619      	mov	r1, r3
 80069b0:	460b      	mov	r3, r1
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	440b      	add	r3, r1
 80069b6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d302      	bcc.n	80069c2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80069bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069be:	f000 fec1 	bl	8007744 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	7d1b      	ldrb	r3, [r3, #20]
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d10b      	bne.n	80069e2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80069ca:	4b61      	ldr	r3, [pc, #388]	; (8006b50 <tcp_slowtmr+0x584>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b28      	cmp	r3, #40	; 0x28
 80069d6:	d904      	bls.n	80069e2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80069d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069dc:	3301      	adds	r3, #1
 80069de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	7d1b      	ldrb	r3, [r3, #20]
 80069e6:	2b09      	cmp	r3, #9
 80069e8:	d10b      	bne.n	8006a02 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80069ea:	4b59      	ldr	r3, [pc, #356]	; (8006b50 <tcp_slowtmr+0x584>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2bf0      	cmp	r3, #240	; 0xf0
 80069f6:	d904      	bls.n	8006a02 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80069f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069fc:	3301      	adds	r3, #1
 80069fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d060      	beq.n	8006acc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a10:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006a12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a14:	f000 fce2 	bl	80073dc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d010      	beq.n	8006a40 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006a1e:	4b4f      	ldr	r3, [pc, #316]	; (8006b5c <tcp_slowtmr+0x590>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d106      	bne.n	8006a36 <tcp_slowtmr+0x46a>
 8006a28:	4b4d      	ldr	r3, [pc, #308]	; (8006b60 <tcp_slowtmr+0x594>)
 8006a2a:	f240 526d 	movw	r2, #1389	; 0x56d
 8006a2e:	494d      	ldr	r1, [pc, #308]	; (8006b64 <tcp_slowtmr+0x598>)
 8006a30:	484d      	ldr	r0, [pc, #308]	; (8006b68 <tcp_slowtmr+0x59c>)
 8006a32:	f007 fffd 	bl	800ea30 <iprintf>
        prev->next = pcb->next;
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	60da      	str	r2, [r3, #12]
 8006a3e:	e00f      	b.n	8006a60 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006a40:	4b46      	ldr	r3, [pc, #280]	; (8006b5c <tcp_slowtmr+0x590>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d006      	beq.n	8006a58 <tcp_slowtmr+0x48c>
 8006a4a:	4b45      	ldr	r3, [pc, #276]	; (8006b60 <tcp_slowtmr+0x594>)
 8006a4c:	f240 5271 	movw	r2, #1393	; 0x571
 8006a50:	4946      	ldr	r1, [pc, #280]	; (8006b6c <tcp_slowtmr+0x5a0>)
 8006a52:	4845      	ldr	r0, [pc, #276]	; (8006b68 <tcp_slowtmr+0x59c>)
 8006a54:	f007 ffec 	bl	800ea30 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	4a3f      	ldr	r2, [pc, #252]	; (8006b5c <tcp_slowtmr+0x590>)
 8006a5e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006a60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d013      	beq.n	8006a90 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006a70:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	3304      	adds	r3, #4
 8006a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a78:	8ad2      	ldrh	r2, [r2, #22]
 8006a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a7c:	8b09      	ldrh	r1, [r1, #24]
 8006a7e:	9102      	str	r1, [sp, #8]
 8006a80:	9201      	str	r2, [sp, #4]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	462b      	mov	r3, r5
 8006a86:	4622      	mov	r2, r4
 8006a88:	4601      	mov	r1, r0
 8006a8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a8c:	f004 fec6 	bl	800b81c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	7d1b      	ldrb	r3, [r3, #20]
 8006a9a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006aa6:	6838      	ldr	r0, [r7, #0]
 8006aa8:	f7ff f838 	bl	8005b1c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006aac:	4b30      	ldr	r3, [pc, #192]	; (8006b70 <tcp_slowtmr+0x5a4>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <tcp_slowtmr+0x4f6>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f06f 010c 	mvn.w	r1, #12
 8006abe:	68b8      	ldr	r0, [r7, #8]
 8006ac0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006ac2:	4b2b      	ldr	r3, [pc, #172]	; (8006b70 <tcp_slowtmr+0x5a4>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d037      	beq.n	8006b3a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006aca:	e590      	b.n	80065ee <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	7f1b      	ldrb	r3, [r3, #28]
 8006ada:	3301      	adds	r3, #1
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	7f1a      	ldrb	r2, [r3, #28]
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	7f5b      	ldrb	r3, [r3, #29]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d325      	bcc.n	8006b3a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	2200      	movs	r2, #0
 8006af2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006af4:	4b1e      	ldr	r3, [pc, #120]	; (8006b70 <tcp_slowtmr+0x5a4>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00b      	beq.n	8006b1c <tcp_slowtmr+0x550>
 8006b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b0c:	6912      	ldr	r2, [r2, #16]
 8006b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b10:	4610      	mov	r0, r2
 8006b12:	4798      	blx	r3
 8006b14:	4603      	mov	r3, r0
 8006b16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006b1a:	e002      	b.n	8006b22 <tcp_slowtmr+0x556>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006b22:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <tcp_slowtmr+0x5a4>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d000      	beq.n	8006b2c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8006b2a:	e560      	b.n	80065ee <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006b2c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d102      	bne.n	8006b3a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b36:	f004 f8bd 	bl	800acb4 <tcp_output>
  while (pcb != NULL) {
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f47f ad5c 	bne.w	80065fa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006b42:	2300      	movs	r3, #0
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006b46:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <tcp_slowtmr+0x5a8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006b4c:	e067      	b.n	8006c1e <tcp_slowtmr+0x652>
 8006b4e:	bf00      	nop
 8006b50:	20008240 	.word	0x20008240
 8006b54:	10624dd3 	.word	0x10624dd3
 8006b58:	000124f8 	.word	0x000124f8
 8006b5c:	2000824c 	.word	0x2000824c
 8006b60:	080103c0 	.word	0x080103c0
 8006b64:	080107f8 	.word	0x080107f8
 8006b68:	08010404 	.word	0x08010404
 8006b6c:	08010824 	.word	0x08010824
 8006b70:	20008254 	.word	0x20008254
 8006b74:	20008250 	.word	0x20008250
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	7d1b      	ldrb	r3, [r3, #20]
 8006b7c:	2b0a      	cmp	r3, #10
 8006b7e:	d006      	beq.n	8006b8e <tcp_slowtmr+0x5c2>
 8006b80:	4b2b      	ldr	r3, [pc, #172]	; (8006c30 <tcp_slowtmr+0x664>)
 8006b82:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006b86:	492b      	ldr	r1, [pc, #172]	; (8006c34 <tcp_slowtmr+0x668>)
 8006b88:	482b      	ldr	r0, [pc, #172]	; (8006c38 <tcp_slowtmr+0x66c>)
 8006b8a:	f007 ff51 	bl	800ea30 <iprintf>
    pcb_remove = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006b94:	4b29      	ldr	r3, [pc, #164]	; (8006c3c <tcp_slowtmr+0x670>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2bf0      	cmp	r3, #240	; 0xf0
 8006ba0:	d904      	bls.n	8006bac <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d02f      	beq.n	8006c14 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006bb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bb6:	f000 fc11 	bl	80073dc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d010      	beq.n	8006be2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006bc0:	4b1f      	ldr	r3, [pc, #124]	; (8006c40 <tcp_slowtmr+0x674>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d106      	bne.n	8006bd8 <tcp_slowtmr+0x60c>
 8006bca:	4b19      	ldr	r3, [pc, #100]	; (8006c30 <tcp_slowtmr+0x664>)
 8006bcc:	f240 52af 	movw	r2, #1455	; 0x5af
 8006bd0:	491c      	ldr	r1, [pc, #112]	; (8006c44 <tcp_slowtmr+0x678>)
 8006bd2:	4819      	ldr	r0, [pc, #100]	; (8006c38 <tcp_slowtmr+0x66c>)
 8006bd4:	f007 ff2c 	bl	800ea30 <iprintf>
        prev->next = pcb->next;
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	60da      	str	r2, [r3, #12]
 8006be0:	e00f      	b.n	8006c02 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006be2:	4b17      	ldr	r3, [pc, #92]	; (8006c40 <tcp_slowtmr+0x674>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d006      	beq.n	8006bfa <tcp_slowtmr+0x62e>
 8006bec:	4b10      	ldr	r3, [pc, #64]	; (8006c30 <tcp_slowtmr+0x664>)
 8006bee:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006bf2:	4915      	ldr	r1, [pc, #84]	; (8006c48 <tcp_slowtmr+0x67c>)
 8006bf4:	4810      	ldr	r0, [pc, #64]	; (8006c38 <tcp_slowtmr+0x66c>)
 8006bf6:	f007 ff1b 	bl	800ea30 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	4a10      	ldr	r2, [pc, #64]	; (8006c40 <tcp_slowtmr+0x674>)
 8006c00:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006c0c:	69f8      	ldr	r0, [r7, #28]
 8006c0e:	f7fe ff85 	bl	8005b1c <tcp_free>
 8006c12:	e004      	b.n	8006c1e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1a9      	bne.n	8006b78 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop
 8006c28:	3730      	adds	r7, #48	; 0x30
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	080103c0 	.word	0x080103c0
 8006c34:	08010850 	.word	0x08010850
 8006c38:	08010404 	.word	0x08010404
 8006c3c:	20008240 	.word	0x20008240
 8006c40:	20008250 	.word	0x20008250
 8006c44:	08010880 	.word	0x08010880
 8006c48:	080108a8 	.word	0x080108a8

08006c4c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006c52:	4b2d      	ldr	r3, [pc, #180]	; (8006d08 <tcp_fasttmr+0xbc>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	3301      	adds	r3, #1
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	4b2b      	ldr	r3, [pc, #172]	; (8006d08 <tcp_fasttmr+0xbc>)
 8006c5c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006c5e:	4b2b      	ldr	r3, [pc, #172]	; (8006d0c <tcp_fasttmr+0xc0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006c64:	e048      	b.n	8006cf8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	7f9a      	ldrb	r2, [r3, #30]
 8006c6a:	4b27      	ldr	r3, [pc, #156]	; (8006d08 <tcp_fasttmr+0xbc>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d03f      	beq.n	8006cf2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006c72:	4b25      	ldr	r3, [pc, #148]	; (8006d08 <tcp_fasttmr+0xbc>)
 8006c74:	781a      	ldrb	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	8b5b      	ldrh	r3, [r3, #26]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d010      	beq.n	8006ca8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	8b5b      	ldrh	r3, [r3, #26]
 8006c8a:	f043 0302 	orr.w	r3, r3, #2
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f004 f80d 	bl	800acb4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	8b5b      	ldrh	r3, [r3, #26]
 8006c9e:	f023 0303 	bic.w	r3, r3, #3
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8b5b      	ldrh	r3, [r3, #26]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d009      	beq.n	8006cc8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	8b5b      	ldrh	r3, [r3, #26]
 8006cb8:	f023 0308 	bic.w	r3, r3, #8
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff f8be 	bl	8005e44 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006cd6:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <tcp_fasttmr+0xc4>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f819 	bl	8006d14 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006ce2:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <tcp_fasttmr+0xc4>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d000      	beq.n	8006cec <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006cea:	e7b8      	b.n	8006c5e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	607b      	str	r3, [r7, #4]
 8006cf0:	e002      	b.n	8006cf8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1b3      	bne.n	8006c66 <tcp_fasttmr+0x1a>
    }
  }
}
 8006cfe:	bf00      	nop
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20008256 	.word	0x20008256
 8006d0c:	2000824c 	.word	0x2000824c
 8006d10:	20008254 	.word	0x20008254

08006d14 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006d14:	b590      	push	{r4, r7, lr}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <tcp_process_refused_data+0x22>
 8006d22:	4b37      	ldr	r3, [pc, #220]	; (8006e00 <tcp_process_refused_data+0xec>)
 8006d24:	f240 6209 	movw	r2, #1545	; 0x609
 8006d28:	4936      	ldr	r1, [pc, #216]	; (8006e04 <tcp_process_refused_data+0xf0>)
 8006d2a:	4837      	ldr	r0, [pc, #220]	; (8006e08 <tcp_process_refused_data+0xf4>)
 8006d2c:	f007 fe80 	bl	800ea30 <iprintf>
 8006d30:	f06f 030f 	mvn.w	r3, #15
 8006d34:	e060      	b.n	8006df8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d3a:	7b5b      	ldrb	r3, [r3, #13]
 8006d3c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d42:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00b      	beq.n	8006d6c <tcp_process_refused_data+0x58>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6918      	ldr	r0, [r3, #16]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	47a0      	blx	r4
 8006d66:	4603      	mov	r3, r0
 8006d68:	73fb      	strb	r3, [r7, #15]
 8006d6a:	e007      	b.n	8006d7c <tcp_process_refused_data+0x68>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	2000      	movs	r0, #0
 8006d74:	f000 f8c2 	bl	8006efc <tcp_recv_null>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d12a      	bne.n	8006dda <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d033      	beq.n	8006df6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d92:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006d96:	d005      	beq.n	8006da4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <tcp_process_refused_data+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6918      	ldr	r0, [r3, #16]
 8006db8:	2300      	movs	r3, #0
 8006dba:	2200      	movs	r2, #0
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	47a0      	blx	r4
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	73fb      	strb	r3, [r7, #15]
 8006dc4:	e001      	b.n	8006dca <tcp_process_refused_data+0xb6>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dce:	f113 0f0d 	cmn.w	r3, #13
 8006dd2:	d110      	bne.n	8006df6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006dd4:	f06f 030c 	mvn.w	r3, #12
 8006dd8:	e00e      	b.n	8006df8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dde:	f113 0f0d 	cmn.w	r3, #13
 8006de2:	d102      	bne.n	8006dea <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006de4:	f06f 030c 	mvn.w	r3, #12
 8006de8:	e006      	b.n	8006df8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006df0:	f06f 0304 	mvn.w	r3, #4
 8006df4:	e000      	b.n	8006df8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd90      	pop	{r4, r7, pc}
 8006e00:	080103c0 	.word	0x080103c0
 8006e04:	080108d0 	.word	0x080108d0
 8006e08:	08010404 	.word	0x08010404

08006e0c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006e14:	e007      	b.n	8006e26 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f80a 	bl	8006e36 <tcp_seg_free>
    seg = next;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1f4      	bne.n	8006e16 <tcp_segs_free+0xa>
  }
}
 8006e2c:	bf00      	nop
 8006e2e:	bf00      	nop
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00c      	beq.n	8006e5e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fe fbb3 	bl	80055bc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	2003      	movs	r0, #3
 8006e5a:	f7fd fd39 	bl	80048d0 <memp_free>
  }
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d107      	bne.n	8006e8a <tcp_setprio+0x22>
 8006e7a:	4b07      	ldr	r3, [pc, #28]	; (8006e98 <tcp_setprio+0x30>)
 8006e7c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8006e80:	4906      	ldr	r1, [pc, #24]	; (8006e9c <tcp_setprio+0x34>)
 8006e82:	4807      	ldr	r0, [pc, #28]	; (8006ea0 <tcp_setprio+0x38>)
 8006e84:	f007 fdd4 	bl	800ea30 <iprintf>
 8006e88:	e002      	b.n	8006e90 <tcp_setprio+0x28>

  pcb->prio = prio;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	78fa      	ldrb	r2, [r7, #3]
 8006e8e:	755a      	strb	r2, [r3, #21]
}
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	080103c0 	.word	0x080103c0
 8006e9c:	080108f8 	.word	0x080108f8
 8006ea0:	08010404 	.word	0x08010404

08006ea4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d106      	bne.n	8006ec0 <tcp_seg_copy+0x1c>
 8006eb2:	4b0f      	ldr	r3, [pc, #60]	; (8006ef0 <tcp_seg_copy+0x4c>)
 8006eb4:	f240 6282 	movw	r2, #1666	; 0x682
 8006eb8:	490e      	ldr	r1, [pc, #56]	; (8006ef4 <tcp_seg_copy+0x50>)
 8006eba:	480f      	ldr	r0, [pc, #60]	; (8006ef8 <tcp_seg_copy+0x54>)
 8006ebc:	f007 fdb8 	bl	800ea30 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006ec0:	2003      	movs	r0, #3
 8006ec2:	f7fd fc95 	bl	80047f0 <memp_malloc>
 8006ec6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <tcp_seg_copy+0x2e>
    return NULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e00a      	b.n	8006ee8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006ed2:	2210      	movs	r2, #16
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f007 fe96 	bl	800ec08 <memcpy>
  pbuf_ref(cseg->p);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fe fc0b 	bl	80056fc <pbuf_ref>
  return cseg;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	080103c0 	.word	0x080103c0
 8006ef4:	08010914 	.word	0x08010914
 8006ef8:	08010404 	.word	0x08010404

08006efc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d109      	bne.n	8006f24 <tcp_recv_null+0x28>
 8006f10:	4b12      	ldr	r3, [pc, #72]	; (8006f5c <tcp_recv_null+0x60>)
 8006f12:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006f16:	4912      	ldr	r1, [pc, #72]	; (8006f60 <tcp_recv_null+0x64>)
 8006f18:	4812      	ldr	r0, [pc, #72]	; (8006f64 <tcp_recv_null+0x68>)
 8006f1a:	f007 fd89 	bl	800ea30 <iprintf>
 8006f1e:	f06f 030f 	mvn.w	r3, #15
 8006f22:	e016      	b.n	8006f52 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d009      	beq.n	8006f3e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	891b      	ldrh	r3, [r3, #8]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	68b8      	ldr	r0, [r7, #8]
 8006f32:	f7ff fab5 	bl	80064a0 <tcp_recved>
    pbuf_free(p);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7fe fb40 	bl	80055bc <pbuf_free>
 8006f3c:	e008      	b.n	8006f50 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d104      	bne.n	8006f50 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006f46:	68b8      	ldr	r0, [r7, #8]
 8006f48:	f7fe ffe6 	bl	8005f18 <tcp_close>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	e000      	b.n	8006f52 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	080103c0 	.word	0x080103c0
 8006f60:	08010930 	.word	0x08010930
 8006f64:	08010404 	.word	0x08010404

08006f68 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	db01      	blt.n	8006f7e <tcp_kill_prio+0x16>
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	e000      	b.n	8006f80 <tcp_kill_prio+0x18>
 8006f7e:	237f      	movs	r3, #127	; 0x7f
 8006f80:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006f82:	7afb      	ldrb	r3, [r7, #11]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d034      	beq.n	8006ff2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006f88:	7afb      	ldrb	r3, [r7, #11]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f96:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <tcp_kill_prio+0x94>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	e01f      	b.n	8006fde <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	7d5b      	ldrb	r3, [r3, #21]
 8006fa2:	7afa      	ldrb	r2, [r7, #11]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d80c      	bhi.n	8006fc2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006fac:	7afa      	ldrb	r2, [r7, #11]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d112      	bne.n	8006fd8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006fb2:	4b13      	ldr	r3, [pc, #76]	; (8007000 <tcp_kill_prio+0x98>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d80a      	bhi.n	8006fd8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006fc2:	4b0f      	ldr	r3, [pc, #60]	; (8007000 <tcp_kill_prio+0x98>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	7d5b      	ldrb	r3, [r3, #21]
 8006fd6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1dc      	bne.n	8006f9e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d004      	beq.n	8006ff4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006fea:	6938      	ldr	r0, [r7, #16]
 8006fec:	f7ff f87e 	bl	80060ec <tcp_abort>
 8006ff0:	e000      	b.n	8006ff4 <tcp_kill_prio+0x8c>
    return;
 8006ff2:	bf00      	nop
  }
}
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	2000824c 	.word	0x2000824c
 8007000:	20008240 	.word	0x20008240

08007004 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	4603      	mov	r3, r0
 800700c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800700e:	79fb      	ldrb	r3, [r7, #7]
 8007010:	2b08      	cmp	r3, #8
 8007012:	d009      	beq.n	8007028 <tcp_kill_state+0x24>
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	2b09      	cmp	r3, #9
 8007018:	d006      	beq.n	8007028 <tcp_kill_state+0x24>
 800701a:	4b1a      	ldr	r3, [pc, #104]	; (8007084 <tcp_kill_state+0x80>)
 800701c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007020:	4919      	ldr	r1, [pc, #100]	; (8007088 <tcp_kill_state+0x84>)
 8007022:	481a      	ldr	r0, [pc, #104]	; (800708c <tcp_kill_state+0x88>)
 8007024:	f007 fd04 	bl	800ea30 <iprintf>

  inactivity = 0;
 8007028:	2300      	movs	r3, #0
 800702a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800702c:	2300      	movs	r3, #0
 800702e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007030:	4b17      	ldr	r3, [pc, #92]	; (8007090 <tcp_kill_state+0x8c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	e017      	b.n	8007068 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	7d1b      	ldrb	r3, [r3, #20]
 800703c:	79fa      	ldrb	r2, [r7, #7]
 800703e:	429a      	cmp	r2, r3
 8007040:	d10f      	bne.n	8007062 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007042:	4b14      	ldr	r3, [pc, #80]	; (8007094 <tcp_kill_state+0x90>)
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	429a      	cmp	r2, r3
 8007050:	d807      	bhi.n	8007062 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007052:	4b10      	ldr	r3, [pc, #64]	; (8007094 <tcp_kill_state+0x90>)
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e4      	bne.n	8007038 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007074:	2100      	movs	r1, #0
 8007076:	6938      	ldr	r0, [r7, #16]
 8007078:	f7fe ff7a 	bl	8005f70 <tcp_abandon>
  }
}
 800707c:	bf00      	nop
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	080103c0 	.word	0x080103c0
 8007088:	0801094c 	.word	0x0801094c
 800708c:	08010404 	.word	0x08010404
 8007090:	2000824c 	.word	0x2000824c
 8007094:	20008240 	.word	0x20008240

08007098 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80070a6:	4b12      	ldr	r3, [pc, #72]	; (80070f0 <tcp_kill_timewait+0x58>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	e012      	b.n	80070d4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80070ae:	4b11      	ldr	r3, [pc, #68]	; (80070f4 <tcp_kill_timewait+0x5c>)
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d807      	bhi.n	80070ce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80070be:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <tcp_kill_timewait+0x5c>)
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e9      	bne.n	80070ae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80070e0:	68b8      	ldr	r0, [r7, #8]
 80070e2:	f7ff f803 	bl	80060ec <tcp_abort>
  }
}
 80070e6:	bf00      	nop
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20008250 	.word	0x20008250
 80070f4:	20008240 	.word	0x20008240

080070f8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80070fe:	4b10      	ldr	r3, [pc, #64]	; (8007140 <tcp_handle_closepend+0x48>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007104:	e014      	b.n	8007130 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	8b5b      	ldrh	r3, [r3, #26]
 8007110:	f003 0308 	and.w	r3, r3, #8
 8007114:	2b00      	cmp	r3, #0
 8007116:	d009      	beq.n	800712c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	8b5b      	ldrh	r3, [r3, #26]
 800711c:	f023 0308 	bic.w	r3, r3, #8
 8007120:	b29a      	uxth	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7fe fe8c 	bl	8005e44 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e7      	bne.n	8007106 <tcp_handle_closepend+0xe>
  }
}
 8007136:	bf00      	nop
 8007138:	bf00      	nop
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	2000824c 	.word	0x2000824c

08007144 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800714e:	2001      	movs	r0, #1
 8007150:	f7fd fb4e 	bl	80047f0 <memp_malloc>
 8007154:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d126      	bne.n	80071aa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800715c:	f7ff ffcc 	bl	80070f8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007160:	f7ff ff9a 	bl	8007098 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007164:	2001      	movs	r0, #1
 8007166:	f7fd fb43 	bl	80047f0 <memp_malloc>
 800716a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d11b      	bne.n	80071aa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007172:	2009      	movs	r0, #9
 8007174:	f7ff ff46 	bl	8007004 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007178:	2001      	movs	r0, #1
 800717a:	f7fd fb39 	bl	80047f0 <memp_malloc>
 800717e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d111      	bne.n	80071aa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007186:	2008      	movs	r0, #8
 8007188:	f7ff ff3c 	bl	8007004 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800718c:	2001      	movs	r0, #1
 800718e:	f7fd fb2f 	bl	80047f0 <memp_malloc>
 8007192:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d107      	bne.n	80071aa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800719a:	79fb      	ldrb	r3, [r7, #7]
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff fee3 	bl	8006f68 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80071a2:	2001      	movs	r0, #1
 80071a4:	f7fd fb24 	bl	80047f0 <memp_malloc>
 80071a8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d03f      	beq.n	8007230 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80071b0:	229c      	movs	r2, #156	; 0x9c
 80071b2:	2100      	movs	r1, #0
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f007 fca0 	bl	800eafa <memset>
    pcb->prio = prio;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	79fa      	ldrb	r2, [r7, #7]
 80071be:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80071c6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80071d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	22ff      	movs	r2, #255	; 0xff
 80071de:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80071e6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2206      	movs	r2, #6
 80071ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2206      	movs	r2, #6
 80071f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071fc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007206:	4b0d      	ldr	r3, [pc, #52]	; (800723c <tcp_alloc+0xf8>)
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800720e:	4b0c      	ldr	r3, [pc, #48]	; (8007240 <tcp_alloc+0xfc>)
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800721c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4a08      	ldr	r2, [pc, #32]	; (8007244 <tcp_alloc+0x100>)
 8007224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4a07      	ldr	r2, [pc, #28]	; (8007248 <tcp_alloc+0x104>)
 800722c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007230:	68fb      	ldr	r3, [r7, #12]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20008240 	.word	0x20008240
 8007240:	20008256 	.word	0x20008256
 8007244:	08006efd 	.word	0x08006efd
 8007248:	006ddd00 	.word	0x006ddd00

0800724c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8007250:	2040      	movs	r0, #64	; 0x40
 8007252:	f7ff ff77 	bl	8007144 <tcp_alloc>
 8007256:	4603      	mov	r3, r0
}
 8007258:	4618      	mov	r0, r3
 800725a:	bd80      	pop	{r7, pc}

0800725c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	611a      	str	r2, [r3, #16]
  }
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
	...

08007280 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00e      	beq.n	80072ae <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	7d1b      	ldrb	r3, [r3, #20]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d106      	bne.n	80072a6 <tcp_recv+0x26>
 8007298:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <tcp_recv+0x38>)
 800729a:	f240 72df 	movw	r2, #2015	; 0x7df
 800729e:	4907      	ldr	r1, [pc, #28]	; (80072bc <tcp_recv+0x3c>)
 80072a0:	4807      	ldr	r0, [pc, #28]	; (80072c0 <tcp_recv+0x40>)
 80072a2:	f007 fbc5 	bl	800ea30 <iprintf>
    pcb->recv = recv;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	080103c0 	.word	0x080103c0
 80072bc:	0801095c 	.word	0x0801095c
 80072c0:	08010404 	.word	0x08010404

080072c4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00e      	beq.n	80072f2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	7d1b      	ldrb	r3, [r3, #20]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d106      	bne.n	80072ea <tcp_sent+0x26>
 80072dc:	4b07      	ldr	r3, [pc, #28]	; (80072fc <tcp_sent+0x38>)
 80072de:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80072e2:	4907      	ldr	r1, [pc, #28]	; (8007300 <tcp_sent+0x3c>)
 80072e4:	4807      	ldr	r0, [pc, #28]	; (8007304 <tcp_sent+0x40>)
 80072e6:	f007 fba3 	bl	800ea30 <iprintf>
    pcb->sent = sent;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	080103c0 	.word	0x080103c0
 8007300:	08010984 	.word	0x08010984
 8007304:	08010404 	.word	0x08010404

08007308 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00e      	beq.n	8007336 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7d1b      	ldrb	r3, [r3, #20]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d106      	bne.n	800732e <tcp_err+0x26>
 8007320:	4b07      	ldr	r3, [pc, #28]	; (8007340 <tcp_err+0x38>)
 8007322:	f640 020d 	movw	r2, #2061	; 0x80d
 8007326:	4907      	ldr	r1, [pc, #28]	; (8007344 <tcp_err+0x3c>)
 8007328:	4807      	ldr	r0, [pc, #28]	; (8007348 <tcp_err+0x40>)
 800732a:	f007 fb81 	bl	800ea30 <iprintf>
    pcb->errf = err;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8007336:	bf00      	nop
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	080103c0 	.word	0x080103c0
 8007344:	080109ac 	.word	0x080109ac
 8007348:	08010404 	.word	0x08010404

0800734c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d008      	beq.n	800736e <tcp_accept+0x22>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	7d1b      	ldrb	r3, [r3, #20]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d104      	bne.n	800736e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	619a      	str	r2, [r3, #24]
  }
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
	...

0800737c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4613      	mov	r3, r2
 8007388:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d107      	bne.n	80073a0 <tcp_poll+0x24>
 8007390:	4b0e      	ldr	r3, [pc, #56]	; (80073cc <tcp_poll+0x50>)
 8007392:	f640 023d 	movw	r2, #2109	; 0x83d
 8007396:	490e      	ldr	r1, [pc, #56]	; (80073d0 <tcp_poll+0x54>)
 8007398:	480e      	ldr	r0, [pc, #56]	; (80073d4 <tcp_poll+0x58>)
 800739a:	f007 fb49 	bl	800ea30 <iprintf>
 800739e:	e011      	b.n	80073c4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	7d1b      	ldrb	r3, [r3, #20]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d106      	bne.n	80073b6 <tcp_poll+0x3a>
 80073a8:	4b08      	ldr	r3, [pc, #32]	; (80073cc <tcp_poll+0x50>)
 80073aa:	f640 023e 	movw	r2, #2110	; 0x83e
 80073ae:	490a      	ldr	r1, [pc, #40]	; (80073d8 <tcp_poll+0x5c>)
 80073b0:	4808      	ldr	r0, [pc, #32]	; (80073d4 <tcp_poll+0x58>)
 80073b2:	f007 fb3d 	bl	800ea30 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	79fa      	ldrb	r2, [r7, #7]
 80073c2:	775a      	strb	r2, [r3, #29]
}
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	080103c0 	.word	0x080103c0
 80073d0:	080109d4 	.word	0x080109d4
 80073d4:	08010404 	.word	0x08010404
 80073d8:	080109ec 	.word	0x080109ec

080073dc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d107      	bne.n	80073fa <tcp_pcb_purge+0x1e>
 80073ea:	4b21      	ldr	r3, [pc, #132]	; (8007470 <tcp_pcb_purge+0x94>)
 80073ec:	f640 0251 	movw	r2, #2129	; 0x851
 80073f0:	4920      	ldr	r1, [pc, #128]	; (8007474 <tcp_pcb_purge+0x98>)
 80073f2:	4821      	ldr	r0, [pc, #132]	; (8007478 <tcp_pcb_purge+0x9c>)
 80073f4:	f007 fb1c 	bl	800ea30 <iprintf>
 80073f8:	e037      	b.n	800746a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	7d1b      	ldrb	r3, [r3, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d033      	beq.n	800746a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007406:	2b0a      	cmp	r3, #10
 8007408:	d02f      	beq.n	800746a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800740e:	2b01      	cmp	r3, #1
 8007410:	d02b      	beq.n	800746a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007416:	2b00      	cmp	r3, #0
 8007418:	d007      	beq.n	800742a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe f8cc 	bl	80055bc <pbuf_free>
      pcb->refused_data = NULL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f986 	bl	8007744 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800743e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fce1 	bl	8006e0c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fcdc 	bl	8006e0c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	66da      	str	r2, [r3, #108]	; 0x6c
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	080103c0 	.word	0x080103c0
 8007474:	08010a0c 	.word	0x08010a0c
 8007478:	08010404 	.word	0x08010404

0800747c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d106      	bne.n	800749a <tcp_pcb_remove+0x1e>
 800748c:	4b3e      	ldr	r3, [pc, #248]	; (8007588 <tcp_pcb_remove+0x10c>)
 800748e:	f640 0283 	movw	r2, #2179	; 0x883
 8007492:	493e      	ldr	r1, [pc, #248]	; (800758c <tcp_pcb_remove+0x110>)
 8007494:	483e      	ldr	r0, [pc, #248]	; (8007590 <tcp_pcb_remove+0x114>)
 8007496:	f007 facb 	bl	800ea30 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d106      	bne.n	80074ae <tcp_pcb_remove+0x32>
 80074a0:	4b39      	ldr	r3, [pc, #228]	; (8007588 <tcp_pcb_remove+0x10c>)
 80074a2:	f640 0284 	movw	r2, #2180	; 0x884
 80074a6:	493b      	ldr	r1, [pc, #236]	; (8007594 <tcp_pcb_remove+0x118>)
 80074a8:	4839      	ldr	r0, [pc, #228]	; (8007590 <tcp_pcb_remove+0x114>)
 80074aa:	f007 fac1 	bl	800ea30 <iprintf>

  TCP_RMV(pcblist, pcb);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d105      	bne.n	80074c4 <tcp_pcb_remove+0x48>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68da      	ldr	r2, [r3, #12]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	e013      	b.n	80074ec <tcp_pcb_remove+0x70>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	e00c      	b.n	80074e6 <tcp_pcb_remove+0x6a>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d104      	bne.n	80074e0 <tcp_pcb_remove+0x64>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	60da      	str	r2, [r3, #12]
 80074de:	e005      	b.n	80074ec <tcp_pcb_remove+0x70>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1ef      	bne.n	80074cc <tcp_pcb_remove+0x50>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	2200      	movs	r2, #0
 80074f0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80074f2:	6838      	ldr	r0, [r7, #0]
 80074f4:	f7ff ff72 	bl	80073dc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	7d1b      	ldrb	r3, [r3, #20]
 80074fc:	2b0a      	cmp	r3, #10
 80074fe:	d013      	beq.n	8007528 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007504:	2b01      	cmp	r3, #1
 8007506:	d00f      	beq.n	8007528 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	8b5b      	ldrh	r3, [r3, #26]
 800750c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	8b5b      	ldrh	r3, [r3, #26]
 8007518:	f043 0302 	orr.w	r3, r3, #2
 800751c:	b29a      	uxth	r2, r3
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007522:	6838      	ldr	r0, [r7, #0]
 8007524:	f003 fbc6 	bl	800acb4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	7d1b      	ldrb	r3, [r3, #20]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d020      	beq.n	8007572 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d006      	beq.n	8007546 <tcp_pcb_remove+0xca>
 8007538:	4b13      	ldr	r3, [pc, #76]	; (8007588 <tcp_pcb_remove+0x10c>)
 800753a:	f640 0293 	movw	r2, #2195	; 0x893
 800753e:	4916      	ldr	r1, [pc, #88]	; (8007598 <tcp_pcb_remove+0x11c>)
 8007540:	4813      	ldr	r0, [pc, #76]	; (8007590 <tcp_pcb_remove+0x114>)
 8007542:	f007 fa75 	bl	800ea30 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754a:	2b00      	cmp	r3, #0
 800754c:	d006      	beq.n	800755c <tcp_pcb_remove+0xe0>
 800754e:	4b0e      	ldr	r3, [pc, #56]	; (8007588 <tcp_pcb_remove+0x10c>)
 8007550:	f640 0294 	movw	r2, #2196	; 0x894
 8007554:	4911      	ldr	r1, [pc, #68]	; (800759c <tcp_pcb_remove+0x120>)
 8007556:	480e      	ldr	r0, [pc, #56]	; (8007590 <tcp_pcb_remove+0x114>)
 8007558:	f007 fa6a 	bl	800ea30 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007560:	2b00      	cmp	r3, #0
 8007562:	d006      	beq.n	8007572 <tcp_pcb_remove+0xf6>
 8007564:	4b08      	ldr	r3, [pc, #32]	; (8007588 <tcp_pcb_remove+0x10c>)
 8007566:	f640 0296 	movw	r2, #2198	; 0x896
 800756a:	490d      	ldr	r1, [pc, #52]	; (80075a0 <tcp_pcb_remove+0x124>)
 800756c:	4808      	ldr	r0, [pc, #32]	; (8007590 <tcp_pcb_remove+0x114>)
 800756e:	f007 fa5f 	bl	800ea30 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2200      	movs	r2, #0
 8007576:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2200      	movs	r2, #0
 800757c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800757e:	bf00      	nop
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	080103c0 	.word	0x080103c0
 800758c:	08010a28 	.word	0x08010a28
 8007590:	08010404 	.word	0x08010404
 8007594:	08010a44 	.word	0x08010a44
 8007598:	08010a64 	.word	0x08010a64
 800759c:	08010a7c 	.word	0x08010a7c
 80075a0:	08010a98 	.word	0x08010a98

080075a4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d106      	bne.n	80075c0 <tcp_next_iss+0x1c>
 80075b2:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <tcp_next_iss+0x38>)
 80075b4:	f640 02af 	movw	r2, #2223	; 0x8af
 80075b8:	4909      	ldr	r1, [pc, #36]	; (80075e0 <tcp_next_iss+0x3c>)
 80075ba:	480a      	ldr	r0, [pc, #40]	; (80075e4 <tcp_next_iss+0x40>)
 80075bc:	f007 fa38 	bl	800ea30 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80075c0:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <tcp_next_iss+0x44>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	4b09      	ldr	r3, [pc, #36]	; (80075ec <tcp_next_iss+0x48>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4413      	add	r3, r2
 80075ca:	4a07      	ldr	r2, [pc, #28]	; (80075e8 <tcp_next_iss+0x44>)
 80075cc:	6013      	str	r3, [r2, #0]
  return iss;
 80075ce:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <tcp_next_iss+0x44>)
 80075d0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	080103c0 	.word	0x080103c0
 80075e0:	08010ab0 	.word	0x08010ab0
 80075e4:	08010404 	.word	0x08010404
 80075e8:	20000024 	.word	0x20000024
 80075ec:	20008240 	.word	0x20008240

080075f0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
 80075fc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d106      	bne.n	8007612 <tcp_eff_send_mss_netif+0x22>
 8007604:	4b14      	ldr	r3, [pc, #80]	; (8007658 <tcp_eff_send_mss_netif+0x68>)
 8007606:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800760a:	4914      	ldr	r1, [pc, #80]	; (800765c <tcp_eff_send_mss_netif+0x6c>)
 800760c:	4814      	ldr	r0, [pc, #80]	; (8007660 <tcp_eff_send_mss_netif+0x70>)
 800760e:	f007 fa0f 	bl	800ea30 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007618:	89fb      	ldrh	r3, [r7, #14]
 800761a:	e019      	b.n	8007650 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007620:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007622:	8afb      	ldrh	r3, [r7, #22]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d012      	beq.n	800764e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007628:	2328      	movs	r3, #40	; 0x28
 800762a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800762c:	8afa      	ldrh	r2, [r7, #22]
 800762e:	8abb      	ldrh	r3, [r7, #20]
 8007630:	429a      	cmp	r2, r3
 8007632:	d904      	bls.n	800763e <tcp_eff_send_mss_netif+0x4e>
 8007634:	8afa      	ldrh	r2, [r7, #22]
 8007636:	8abb      	ldrh	r3, [r7, #20]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	b29b      	uxth	r3, r3
 800763c:	e000      	b.n	8007640 <tcp_eff_send_mss_netif+0x50>
 800763e:	2300      	movs	r3, #0
 8007640:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007642:	8a7a      	ldrh	r2, [r7, #18]
 8007644:	89fb      	ldrh	r3, [r7, #14]
 8007646:	4293      	cmp	r3, r2
 8007648:	bf28      	it	cs
 800764a:	4613      	movcs	r3, r2
 800764c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800764e:	89fb      	ldrh	r3, [r7, #14]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	080103c0 	.word	0x080103c0
 800765c:	08010acc 	.word	0x08010acc
 8007660:	08010404 	.word	0x08010404

08007664 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d119      	bne.n	80076ac <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007678:	4b10      	ldr	r3, [pc, #64]	; (80076bc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800767a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800767e:	4910      	ldr	r1, [pc, #64]	; (80076c0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007680:	4810      	ldr	r0, [pc, #64]	; (80076c4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007682:	f007 f9d5 	bl	800ea30 <iprintf>

  while (pcb != NULL) {
 8007686:	e011      	b.n	80076ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	429a      	cmp	r2, r3
 8007692:	d108      	bne.n	80076a6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7fe fd26 	bl	80060ec <tcp_abort>
      pcb = next;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	60fb      	str	r3, [r7, #12]
 80076a4:	e002      	b.n	80076ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1ea      	bne.n	8007688 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80076b2:	bf00      	nop
 80076b4:	bf00      	nop
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	080103c0 	.word	0x080103c0
 80076c0:	08010af4 	.word	0x08010af4
 80076c4:	08010404 	.word	0x08010404

080076c8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d02a      	beq.n	800772e <tcp_netif_ip_addr_changed+0x66>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d026      	beq.n	800772e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80076e0:	4b15      	ldr	r3, [pc, #84]	; (8007738 <tcp_netif_ip_addr_changed+0x70>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff ffbc 	bl	8007664 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80076ec:	4b13      	ldr	r3, [pc, #76]	; (800773c <tcp_netif_ip_addr_changed+0x74>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff ffb6 	bl	8007664 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d017      	beq.n	800772e <tcp_netif_ip_addr_changed+0x66>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d013      	beq.n	800772e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007706:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <tcp_netif_ip_addr_changed+0x78>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	e00c      	b.n	8007728 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d103      	bne.n	8007722 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1ef      	bne.n	800770e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800772e:	bf00      	nop
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	2000824c 	.word	0x2000824c
 800773c:	20008244 	.word	0x20008244
 8007740:	20008248 	.word	0x20008248

08007744 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007750:	2b00      	cmp	r3, #0
 8007752:	d007      	beq.n	8007764 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007758:	4618      	mov	r0, r3
 800775a:	f7ff fb57 	bl	8006e0c <tcp_segs_free>
    pcb->ooseq = NULL;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800776c:	b590      	push	{r4, r7, lr}
 800776e:	b08d      	sub	sp, #52	; 0x34
 8007770:	af04      	add	r7, sp, #16
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d105      	bne.n	8007788 <tcp_input+0x1c>
 800777c:	4b9b      	ldr	r3, [pc, #620]	; (80079ec <tcp_input+0x280>)
 800777e:	2283      	movs	r2, #131	; 0x83
 8007780:	499b      	ldr	r1, [pc, #620]	; (80079f0 <tcp_input+0x284>)
 8007782:	489c      	ldr	r0, [pc, #624]	; (80079f4 <tcp_input+0x288>)
 8007784:	f007 f954 	bl	800ea30 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	4a9a      	ldr	r2, [pc, #616]	; (80079f8 <tcp_input+0x28c>)
 800778e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	895b      	ldrh	r3, [r3, #10]
 8007794:	2b13      	cmp	r3, #19
 8007796:	f240 83d1 	bls.w	8007f3c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800779a:	4b98      	ldr	r3, [pc, #608]	; (80079fc <tcp_input+0x290>)
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	4a97      	ldr	r2, [pc, #604]	; (80079fc <tcp_input+0x290>)
 80077a0:	6812      	ldr	r2, [r2, #0]
 80077a2:	4611      	mov	r1, r2
 80077a4:	4618      	mov	r0, r3
 80077a6:	f006 f86f 	bl	800d888 <ip4_addr_isbroadcast_u32>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f040 83c7 	bne.w	8007f40 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80077b2:	4b92      	ldr	r3, [pc, #584]	; (80079fc <tcp_input+0x290>)
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80077ba:	2be0      	cmp	r3, #224	; 0xe0
 80077bc:	f000 83c0 	beq.w	8007f40 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80077c0:	4b8d      	ldr	r3, [pc, #564]	; (80079f8 <tcp_input+0x28c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	899b      	ldrh	r3, [r3, #12]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fc fb99 	bl	8003f00 <lwip_htons>
 80077ce:	4603      	mov	r3, r0
 80077d0:	0b1b      	lsrs	r3, r3, #12
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80077da:	7cbb      	ldrb	r3, [r7, #18]
 80077dc:	2b13      	cmp	r3, #19
 80077de:	f240 83b1 	bls.w	8007f44 <tcp_input+0x7d8>
 80077e2:	7cbb      	ldrb	r3, [r7, #18]
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	891b      	ldrh	r3, [r3, #8]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	f200 83aa 	bhi.w	8007f44 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80077f0:	7cbb      	ldrb	r3, [r7, #18]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	3b14      	subs	r3, #20
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	4b81      	ldr	r3, [pc, #516]	; (8007a00 <tcp_input+0x294>)
 80077fa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80077fc:	4b81      	ldr	r3, [pc, #516]	; (8007a04 <tcp_input+0x298>)
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	895a      	ldrh	r2, [r3, #10]
 8007806:	7cbb      	ldrb	r3, [r7, #18]
 8007808:	b29b      	uxth	r3, r3
 800780a:	429a      	cmp	r2, r3
 800780c:	d309      	bcc.n	8007822 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800780e:	4b7c      	ldr	r3, [pc, #496]	; (8007a00 <tcp_input+0x294>)
 8007810:	881a      	ldrh	r2, [r3, #0]
 8007812:	4b7d      	ldr	r3, [pc, #500]	; (8007a08 <tcp_input+0x29c>)
 8007814:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007816:	7cbb      	ldrb	r3, [r7, #18]
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7fd fe48 	bl	80054b0 <pbuf_remove_header>
 8007820:	e04e      	b.n	80078c0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d105      	bne.n	8007836 <tcp_input+0xca>
 800782a:	4b70      	ldr	r3, [pc, #448]	; (80079ec <tcp_input+0x280>)
 800782c:	22c2      	movs	r2, #194	; 0xc2
 800782e:	4977      	ldr	r1, [pc, #476]	; (8007a0c <tcp_input+0x2a0>)
 8007830:	4870      	ldr	r0, [pc, #448]	; (80079f4 <tcp_input+0x288>)
 8007832:	f007 f8fd 	bl	800ea30 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007836:	2114      	movs	r1, #20
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7fd fe39 	bl	80054b0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	895a      	ldrh	r2, [r3, #10]
 8007842:	4b71      	ldr	r3, [pc, #452]	; (8007a08 <tcp_input+0x29c>)
 8007844:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007846:	4b6e      	ldr	r3, [pc, #440]	; (8007a00 <tcp_input+0x294>)
 8007848:	881a      	ldrh	r2, [r3, #0]
 800784a:	4b6f      	ldr	r3, [pc, #444]	; (8007a08 <tcp_input+0x29c>)
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007852:	4b6d      	ldr	r3, [pc, #436]	; (8007a08 <tcp_input+0x29c>)
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7fd fe29 	bl	80054b0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	895b      	ldrh	r3, [r3, #10]
 8007864:	8a3a      	ldrh	r2, [r7, #16]
 8007866:	429a      	cmp	r2, r3
 8007868:	f200 836e 	bhi.w	8007f48 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	4a64      	ldr	r2, [pc, #400]	; (8007a04 <tcp_input+0x298>)
 8007874:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	8a3a      	ldrh	r2, [r7, #16]
 800787c:	4611      	mov	r1, r2
 800787e:	4618      	mov	r0, r3
 8007880:	f7fd fe16 	bl	80054b0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	891a      	ldrh	r2, [r3, #8]
 8007888:	8a3b      	ldrh	r3, [r7, #16]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	b29a      	uxth	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	895b      	ldrh	r3, [r3, #10]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d005      	beq.n	80078a6 <tcp_input+0x13a>
 800789a:	4b54      	ldr	r3, [pc, #336]	; (80079ec <tcp_input+0x280>)
 800789c:	22df      	movs	r2, #223	; 0xdf
 800789e:	495c      	ldr	r1, [pc, #368]	; (8007a10 <tcp_input+0x2a4>)
 80078a0:	4854      	ldr	r0, [pc, #336]	; (80079f4 <tcp_input+0x288>)
 80078a2:	f007 f8c5 	bl	800ea30 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	891a      	ldrh	r2, [r3, #8]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	891b      	ldrh	r3, [r3, #8]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d005      	beq.n	80078c0 <tcp_input+0x154>
 80078b4:	4b4d      	ldr	r3, [pc, #308]	; (80079ec <tcp_input+0x280>)
 80078b6:	22e0      	movs	r2, #224	; 0xe0
 80078b8:	4956      	ldr	r1, [pc, #344]	; (8007a14 <tcp_input+0x2a8>)
 80078ba:	484e      	ldr	r0, [pc, #312]	; (80079f4 <tcp_input+0x288>)
 80078bc:	f007 f8b8 	bl	800ea30 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80078c0:	4b4d      	ldr	r3, [pc, #308]	; (80079f8 <tcp_input+0x28c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	4a4b      	ldr	r2, [pc, #300]	; (80079f8 <tcp_input+0x28c>)
 80078ca:	6814      	ldr	r4, [r2, #0]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fc fb17 	bl	8003f00 <lwip_htons>
 80078d2:	4603      	mov	r3, r0
 80078d4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80078d6:	4b48      	ldr	r3, [pc, #288]	; (80079f8 <tcp_input+0x28c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	885b      	ldrh	r3, [r3, #2]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	4a46      	ldr	r2, [pc, #280]	; (80079f8 <tcp_input+0x28c>)
 80078e0:	6814      	ldr	r4, [r2, #0]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fc fb0c 	bl	8003f00 <lwip_htons>
 80078e8:	4603      	mov	r3, r0
 80078ea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80078ec:	4b42      	ldr	r3, [pc, #264]	; (80079f8 <tcp_input+0x28c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	4a41      	ldr	r2, [pc, #260]	; (80079f8 <tcp_input+0x28c>)
 80078f4:	6814      	ldr	r4, [r2, #0]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fc fb17 	bl	8003f2a <lwip_htonl>
 80078fc:	4603      	mov	r3, r0
 80078fe:	6063      	str	r3, [r4, #4]
 8007900:	6863      	ldr	r3, [r4, #4]
 8007902:	4a45      	ldr	r2, [pc, #276]	; (8007a18 <tcp_input+0x2ac>)
 8007904:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007906:	4b3c      	ldr	r3, [pc, #240]	; (80079f8 <tcp_input+0x28c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	4a3a      	ldr	r2, [pc, #232]	; (80079f8 <tcp_input+0x28c>)
 800790e:	6814      	ldr	r4, [r2, #0]
 8007910:	4618      	mov	r0, r3
 8007912:	f7fc fb0a 	bl	8003f2a <lwip_htonl>
 8007916:	4603      	mov	r3, r0
 8007918:	60a3      	str	r3, [r4, #8]
 800791a:	68a3      	ldr	r3, [r4, #8]
 800791c:	4a3f      	ldr	r2, [pc, #252]	; (8007a1c <tcp_input+0x2b0>)
 800791e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007920:	4b35      	ldr	r3, [pc, #212]	; (80079f8 <tcp_input+0x28c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	89db      	ldrh	r3, [r3, #14]
 8007926:	b29b      	uxth	r3, r3
 8007928:	4a33      	ldr	r2, [pc, #204]	; (80079f8 <tcp_input+0x28c>)
 800792a:	6814      	ldr	r4, [r2, #0]
 800792c:	4618      	mov	r0, r3
 800792e:	f7fc fae7 	bl	8003f00 <lwip_htons>
 8007932:	4603      	mov	r3, r0
 8007934:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007936:	4b30      	ldr	r3, [pc, #192]	; (80079f8 <tcp_input+0x28c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	899b      	ldrh	r3, [r3, #12]
 800793c:	b29b      	uxth	r3, r3
 800793e:	4618      	mov	r0, r3
 8007940:	f7fc fade 	bl	8003f00 <lwip_htons>
 8007944:	4603      	mov	r3, r0
 8007946:	b2db      	uxtb	r3, r3
 8007948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800794c:	b2da      	uxtb	r2, r3
 800794e:	4b34      	ldr	r3, [pc, #208]	; (8007a20 <tcp_input+0x2b4>)
 8007950:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	891a      	ldrh	r2, [r3, #8]
 8007956:	4b33      	ldr	r3, [pc, #204]	; (8007a24 <tcp_input+0x2b8>)
 8007958:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800795a:	4b31      	ldr	r3, [pc, #196]	; (8007a20 <tcp_input+0x2b4>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00c      	beq.n	8007980 <tcp_input+0x214>
    tcplen++;
 8007966:	4b2f      	ldr	r3, [pc, #188]	; (8007a24 <tcp_input+0x2b8>)
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	3301      	adds	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	4b2d      	ldr	r3, [pc, #180]	; (8007a24 <tcp_input+0x2b8>)
 8007970:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	891a      	ldrh	r2, [r3, #8]
 8007976:	4b2b      	ldr	r3, [pc, #172]	; (8007a24 <tcp_input+0x2b8>)
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	429a      	cmp	r2, r3
 800797c:	f200 82e6 	bhi.w	8007f4c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007980:	2300      	movs	r3, #0
 8007982:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007984:	4b28      	ldr	r3, [pc, #160]	; (8007a28 <tcp_input+0x2bc>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	61fb      	str	r3, [r7, #28]
 800798a:	e09d      	b.n	8007ac8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	7d1b      	ldrb	r3, [r3, #20]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d105      	bne.n	80079a0 <tcp_input+0x234>
 8007994:	4b15      	ldr	r3, [pc, #84]	; (80079ec <tcp_input+0x280>)
 8007996:	22fb      	movs	r2, #251	; 0xfb
 8007998:	4924      	ldr	r1, [pc, #144]	; (8007a2c <tcp_input+0x2c0>)
 800799a:	4816      	ldr	r0, [pc, #88]	; (80079f4 <tcp_input+0x288>)
 800799c:	f007 f848 	bl	800ea30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	7d1b      	ldrb	r3, [r3, #20]
 80079a4:	2b0a      	cmp	r3, #10
 80079a6:	d105      	bne.n	80079b4 <tcp_input+0x248>
 80079a8:	4b10      	ldr	r3, [pc, #64]	; (80079ec <tcp_input+0x280>)
 80079aa:	22fc      	movs	r2, #252	; 0xfc
 80079ac:	4920      	ldr	r1, [pc, #128]	; (8007a30 <tcp_input+0x2c4>)
 80079ae:	4811      	ldr	r0, [pc, #68]	; (80079f4 <tcp_input+0x288>)
 80079b0:	f007 f83e 	bl	800ea30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	7d1b      	ldrb	r3, [r3, #20]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d105      	bne.n	80079c8 <tcp_input+0x25c>
 80079bc:	4b0b      	ldr	r3, [pc, #44]	; (80079ec <tcp_input+0x280>)
 80079be:	22fd      	movs	r2, #253	; 0xfd
 80079c0:	491c      	ldr	r1, [pc, #112]	; (8007a34 <tcp_input+0x2c8>)
 80079c2:	480c      	ldr	r0, [pc, #48]	; (80079f4 <tcp_input+0x288>)
 80079c4:	f007 f834 	bl	800ea30 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	7a1b      	ldrb	r3, [r3, #8]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d033      	beq.n	8007a38 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	7a1a      	ldrb	r2, [r3, #8]
 80079d4:	4b09      	ldr	r3, [pc, #36]	; (80079fc <tcp_input+0x290>)
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079dc:	3301      	adds	r3, #1
 80079de:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d029      	beq.n	8007a38 <tcp_input+0x2cc>
      prev = pcb;
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	61bb      	str	r3, [r7, #24]
      continue;
 80079e8:	e06b      	b.n	8007ac2 <tcp_input+0x356>
 80079ea:	bf00      	nop
 80079ec:	08010b28 	.word	0x08010b28
 80079f0:	08010b5c 	.word	0x08010b5c
 80079f4:	08010b74 	.word	0x08010b74
 80079f8:	20008268 	.word	0x20008268
 80079fc:	20004cd0 	.word	0x20004cd0
 8007a00:	2000826c 	.word	0x2000826c
 8007a04:	20008270 	.word	0x20008270
 8007a08:	2000826e 	.word	0x2000826e
 8007a0c:	08010b9c 	.word	0x08010b9c
 8007a10:	08010bac 	.word	0x08010bac
 8007a14:	08010bb8 	.word	0x08010bb8
 8007a18:	20008278 	.word	0x20008278
 8007a1c:	2000827c 	.word	0x2000827c
 8007a20:	20008284 	.word	0x20008284
 8007a24:	20008282 	.word	0x20008282
 8007a28:	2000824c 	.word	0x2000824c
 8007a2c:	08010bd8 	.word	0x08010bd8
 8007a30:	08010c00 	.word	0x08010c00
 8007a34:	08010c2c 	.word	0x08010c2c
    }

    if (pcb->remote_port == tcphdr->src &&
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	8b1a      	ldrh	r2, [r3, #24]
 8007a3c:	4b72      	ldr	r3, [pc, #456]	; (8007c08 <tcp_input+0x49c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d13a      	bne.n	8007abe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	8ada      	ldrh	r2, [r3, #22]
 8007a4c:	4b6e      	ldr	r3, [pc, #440]	; (8007c08 <tcp_input+0x49c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	885b      	ldrh	r3, [r3, #2]
 8007a52:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d132      	bne.n	8007abe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	4b6b      	ldr	r3, [pc, #428]	; (8007c0c <tcp_input+0x4a0>)
 8007a5e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d12c      	bne.n	8007abe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4b68      	ldr	r3, [pc, #416]	; (8007c0c <tcp_input+0x4a0>)
 8007a6a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d126      	bne.n	8007abe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d106      	bne.n	8007a88 <tcp_input+0x31c>
 8007a7a:	4b65      	ldr	r3, [pc, #404]	; (8007c10 <tcp_input+0x4a4>)
 8007a7c:	f240 120d 	movw	r2, #269	; 0x10d
 8007a80:	4964      	ldr	r1, [pc, #400]	; (8007c14 <tcp_input+0x4a8>)
 8007a82:	4865      	ldr	r0, [pc, #404]	; (8007c18 <tcp_input+0x4ac>)
 8007a84:	f006 ffd4 	bl	800ea30 <iprintf>
      if (prev != NULL) {
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <tcp_input+0x338>
        prev->next = pcb->next;
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007a96:	4b61      	ldr	r3, [pc, #388]	; (8007c1c <tcp_input+0x4b0>)
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007a9e:	4a5f      	ldr	r2, [pc, #380]	; (8007c1c <tcp_input+0x4b0>)
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	69fa      	ldr	r2, [r7, #28]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d111      	bne.n	8007ad2 <tcp_input+0x366>
 8007aae:	4b58      	ldr	r3, [pc, #352]	; (8007c10 <tcp_input+0x4a4>)
 8007ab0:	f240 1215 	movw	r2, #277	; 0x115
 8007ab4:	495a      	ldr	r1, [pc, #360]	; (8007c20 <tcp_input+0x4b4>)
 8007ab6:	4858      	ldr	r0, [pc, #352]	; (8007c18 <tcp_input+0x4ac>)
 8007ab8:	f006 ffba 	bl	800ea30 <iprintf>
      break;
 8007abc:	e009      	b.n	8007ad2 <tcp_input+0x366>
    }
    prev = pcb;
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	61fb      	str	r3, [r7, #28]
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f47f af5e 	bne.w	800798c <tcp_input+0x220>
 8007ad0:	e000      	b.n	8007ad4 <tcp_input+0x368>
      break;
 8007ad2:	bf00      	nop
  }

  if (pcb == NULL) {
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f040 80aa 	bne.w	8007c30 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007adc:	4b51      	ldr	r3, [pc, #324]	; (8007c24 <tcp_input+0x4b8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	61fb      	str	r3, [r7, #28]
 8007ae2:	e03f      	b.n	8007b64 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	7d1b      	ldrb	r3, [r3, #20]
 8007ae8:	2b0a      	cmp	r3, #10
 8007aea:	d006      	beq.n	8007afa <tcp_input+0x38e>
 8007aec:	4b48      	ldr	r3, [pc, #288]	; (8007c10 <tcp_input+0x4a4>)
 8007aee:	f240 121f 	movw	r2, #287	; 0x11f
 8007af2:	494d      	ldr	r1, [pc, #308]	; (8007c28 <tcp_input+0x4bc>)
 8007af4:	4848      	ldr	r0, [pc, #288]	; (8007c18 <tcp_input+0x4ac>)
 8007af6:	f006 ff9b 	bl	800ea30 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	7a1b      	ldrb	r3, [r3, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d009      	beq.n	8007b16 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	7a1a      	ldrb	r2, [r3, #8]
 8007b06:	4b41      	ldr	r3, [pc, #260]	; (8007c0c <tcp_input+0x4a0>)
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b0e:	3301      	adds	r3, #1
 8007b10:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d122      	bne.n	8007b5c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	8b1a      	ldrh	r2, [r3, #24]
 8007b1a:	4b3b      	ldr	r3, [pc, #236]	; (8007c08 <tcp_input+0x49c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d11b      	bne.n	8007b5e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	8ada      	ldrh	r2, [r3, #22]
 8007b2a:	4b37      	ldr	r3, [pc, #220]	; (8007c08 <tcp_input+0x49c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	885b      	ldrh	r3, [r3, #2]
 8007b30:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d113      	bne.n	8007b5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	4b34      	ldr	r3, [pc, #208]	; (8007c0c <tcp_input+0x4a0>)
 8007b3c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d10d      	bne.n	8007b5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	4b31      	ldr	r3, [pc, #196]	; (8007c0c <tcp_input+0x4a0>)
 8007b48:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d107      	bne.n	8007b5e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007b4e:	69f8      	ldr	r0, [r7, #28]
 8007b50:	f000 fb56 	bl	8008200 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7fd fd31 	bl	80055bc <pbuf_free>
        return;
 8007b5a:	e1fd      	b.n	8007f58 <tcp_input+0x7ec>
        continue;
 8007b5c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	61fb      	str	r3, [r7, #28]
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1bc      	bne.n	8007ae4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007b6e:	4b2f      	ldr	r3, [pc, #188]	; (8007c2c <tcp_input+0x4c0>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	617b      	str	r3, [r7, #20]
 8007b74:	e02a      	b.n	8007bcc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	7a1b      	ldrb	r3, [r3, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00c      	beq.n	8007b98 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	7a1a      	ldrb	r2, [r3, #8]
 8007b82:	4b22      	ldr	r3, [pc, #136]	; (8007c0c <tcp_input+0x4a0>)
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d002      	beq.n	8007b98 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	61bb      	str	r3, [r7, #24]
        continue;
 8007b96:	e016      	b.n	8007bc6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	8ada      	ldrh	r2, [r3, #22]
 8007b9c:	4b1a      	ldr	r3, [pc, #104]	; (8007c08 <tcp_input+0x49c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	885b      	ldrh	r3, [r3, #2]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d10c      	bne.n	8007bc2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	4b17      	ldr	r3, [pc, #92]	; (8007c0c <tcp_input+0x4a0>)
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d00f      	beq.n	8007bd4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00d      	beq.n	8007bd6 <tcp_input+0x46a>
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d009      	beq.n	8007bd6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	617b      	str	r3, [r7, #20]
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1d1      	bne.n	8007b76 <tcp_input+0x40a>
 8007bd2:	e000      	b.n	8007bd6 <tcp_input+0x46a>
            break;
 8007bd4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d029      	beq.n	8007c30 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007bea:	4b10      	ldr	r3, [pc, #64]	; (8007c2c <tcp_input+0x4c0>)
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007bf2:	4a0e      	ldr	r2, [pc, #56]	; (8007c2c <tcp_input+0x4c0>)
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007bf8:	6978      	ldr	r0, [r7, #20]
 8007bfa:	f000 fa03 	bl	8008004 <tcp_listen_input>
      }
      pbuf_free(p);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fd fcdc 	bl	80055bc <pbuf_free>
      return;
 8007c04:	e1a8      	b.n	8007f58 <tcp_input+0x7ec>
 8007c06:	bf00      	nop
 8007c08:	20008268 	.word	0x20008268
 8007c0c:	20004cd0 	.word	0x20004cd0
 8007c10:	08010b28 	.word	0x08010b28
 8007c14:	08010c54 	.word	0x08010c54
 8007c18:	08010b74 	.word	0x08010b74
 8007c1c:	2000824c 	.word	0x2000824c
 8007c20:	08010c80 	.word	0x08010c80
 8007c24:	20008250 	.word	0x20008250
 8007c28:	08010cac 	.word	0x08010cac
 8007c2c:	20008248 	.word	0x20008248
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 8158 	beq.w	8007ee8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007c38:	4b95      	ldr	r3, [pc, #596]	; (8007e90 <tcp_input+0x724>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	891a      	ldrh	r2, [r3, #8]
 8007c42:	4b93      	ldr	r3, [pc, #588]	; (8007e90 <tcp_input+0x724>)
 8007c44:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007c46:	4a92      	ldr	r2, [pc, #584]	; (8007e90 <tcp_input+0x724>)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007c4c:	4b91      	ldr	r3, [pc, #580]	; (8007e94 <tcp_input+0x728>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a8f      	ldr	r2, [pc, #572]	; (8007e90 <tcp_input+0x724>)
 8007c52:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007c54:	4b90      	ldr	r3, [pc, #576]	; (8007e98 <tcp_input+0x72c>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007c5a:	4b90      	ldr	r3, [pc, #576]	; (8007e9c <tcp_input+0x730>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007c60:	4b8f      	ldr	r3, [pc, #572]	; (8007ea0 <tcp_input+0x734>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007c66:	4b8f      	ldr	r3, [pc, #572]	; (8007ea4 <tcp_input+0x738>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	f003 0308 	and.w	r3, r3, #8
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d006      	beq.n	8007c80 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7b5b      	ldrb	r3, [r3, #13]
 8007c76:	f043 0301 	orr.w	r3, r3, #1
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d017      	beq.n	8007cb8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007c88:	69f8      	ldr	r0, [r7, #28]
 8007c8a:	f7ff f843 	bl	8006d14 <tcp_process_refused_data>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	f113 0f0d 	cmn.w	r3, #13
 8007c94:	d007      	beq.n	8007ca6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00c      	beq.n	8007cb8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007c9e:	4b82      	ldr	r3, [pc, #520]	; (8007ea8 <tcp_input+0x73c>)
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d008      	beq.n	8007cb8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f040 80e3 	bne.w	8007e76 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007cb0:	69f8      	ldr	r0, [r7, #28]
 8007cb2:	f003 fe05 	bl	800b8c0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007cb6:	e0de      	b.n	8007e76 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007cb8:	4a7c      	ldr	r2, [pc, #496]	; (8007eac <tcp_input+0x740>)
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007cbe:	69f8      	ldr	r0, [r7, #28]
 8007cc0:	f000 fb18 	bl	80082f4 <tcp_process>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007cc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007ccc:	f113 0f0d 	cmn.w	r3, #13
 8007cd0:	f000 80d3 	beq.w	8007e7a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007cd4:	4b71      	ldr	r3, [pc, #452]	; (8007e9c <tcp_input+0x730>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	f003 0308 	and.w	r3, r3, #8
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d015      	beq.n	8007d0c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d008      	beq.n	8007cfc <tcp_input+0x590>
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf0:	69fa      	ldr	r2, [r7, #28]
 8007cf2:	6912      	ldr	r2, [r2, #16]
 8007cf4:	f06f 010d 	mvn.w	r1, #13
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007cfc:	69f9      	ldr	r1, [r7, #28]
 8007cfe:	486c      	ldr	r0, [pc, #432]	; (8007eb0 <tcp_input+0x744>)
 8007d00:	f7ff fbbc 	bl	800747c <tcp_pcb_remove>
        tcp_free(pcb);
 8007d04:	69f8      	ldr	r0, [r7, #28]
 8007d06:	f7fd ff09 	bl	8005b1c <tcp_free>
 8007d0a:	e0da      	b.n	8007ec2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007d10:	4b63      	ldr	r3, [pc, #396]	; (8007ea0 <tcp_input+0x734>)
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d01d      	beq.n	8007d54 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007d18:	4b61      	ldr	r3, [pc, #388]	; (8007ea0 <tcp_input+0x734>)
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <tcp_input+0x5d2>
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d2e:	69fa      	ldr	r2, [r7, #28]
 8007d30:	6910      	ldr	r0, [r2, #16]
 8007d32:	89fa      	ldrh	r2, [r7, #14]
 8007d34:	69f9      	ldr	r1, [r7, #28]
 8007d36:	4798      	blx	r3
 8007d38:	4603      	mov	r3, r0
 8007d3a:	74fb      	strb	r3, [r7, #19]
 8007d3c:	e001      	b.n	8007d42 <tcp_input+0x5d6>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007d42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d46:	f113 0f0d 	cmn.w	r3, #13
 8007d4a:	f000 8098 	beq.w	8007e7e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007d4e:	4b54      	ldr	r3, [pc, #336]	; (8007ea0 <tcp_input+0x734>)
 8007d50:	2200      	movs	r2, #0
 8007d52:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007d54:	69f8      	ldr	r0, [r7, #28]
 8007d56:	f000 f915 	bl	8007f84 <tcp_input_delayed_close>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f040 8090 	bne.w	8007e82 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007d62:	4b4d      	ldr	r3, [pc, #308]	; (8007e98 <tcp_input+0x72c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d041      	beq.n	8007dee <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d006      	beq.n	8007d80 <tcp_input+0x614>
 8007d72:	4b50      	ldr	r3, [pc, #320]	; (8007eb4 <tcp_input+0x748>)
 8007d74:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007d78:	494f      	ldr	r1, [pc, #316]	; (8007eb8 <tcp_input+0x74c>)
 8007d7a:	4850      	ldr	r0, [pc, #320]	; (8007ebc <tcp_input+0x750>)
 8007d7c:	f006 fe58 	bl	800ea30 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	8b5b      	ldrh	r3, [r3, #26]
 8007d84:	f003 0310 	and.w	r3, r3, #16
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d008      	beq.n	8007d9e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007d8c:	4b42      	ldr	r3, [pc, #264]	; (8007e98 <tcp_input+0x72c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fd fc13 	bl	80055bc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007d96:	69f8      	ldr	r0, [r7, #28]
 8007d98:	f7fe f9a8 	bl	80060ec <tcp_abort>
            goto aborted;
 8007d9c:	e091      	b.n	8007ec2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00c      	beq.n	8007dc2 <tcp_input+0x656>
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	6918      	ldr	r0, [r3, #16]
 8007db2:	4b39      	ldr	r3, [pc, #228]	; (8007e98 <tcp_input+0x72c>)
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	2300      	movs	r3, #0
 8007db8:	69f9      	ldr	r1, [r7, #28]
 8007dba:	47a0      	blx	r4
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	74fb      	strb	r3, [r7, #19]
 8007dc0:	e008      	b.n	8007dd4 <tcp_input+0x668>
 8007dc2:	4b35      	ldr	r3, [pc, #212]	; (8007e98 <tcp_input+0x72c>)
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	69f9      	ldr	r1, [r7, #28]
 8007dca:	2000      	movs	r0, #0
 8007dcc:	f7ff f896 	bl	8006efc <tcp_recv_null>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007dd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007dd8:	f113 0f0d 	cmn.w	r3, #13
 8007ddc:	d053      	beq.n	8007e86 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007dde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007de6:	4b2c      	ldr	r3, [pc, #176]	; (8007e98 <tcp_input+0x72c>)
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007dee:	4b2b      	ldr	r3, [pc, #172]	; (8007e9c <tcp_input+0x730>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	f003 0320 	and.w	r3, r3, #32
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d030      	beq.n	8007e5c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d009      	beq.n	8007e16 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e06:	7b5a      	ldrb	r2, [r3, #13]
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e0c:	f042 0220 	orr.w	r2, r2, #32
 8007e10:	b2d2      	uxtb	r2, r2
 8007e12:	735a      	strb	r2, [r3, #13]
 8007e14:	e022      	b.n	8007e5c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e1a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007e1e:	d005      	beq.n	8007e2c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e24:	3301      	adds	r3, #1
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00b      	beq.n	8007e4e <tcp_input+0x6e2>
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	6918      	ldr	r0, [r3, #16]
 8007e40:	2300      	movs	r3, #0
 8007e42:	2200      	movs	r2, #0
 8007e44:	69f9      	ldr	r1, [r7, #28]
 8007e46:	47a0      	blx	r4
 8007e48:	4603      	mov	r3, r0
 8007e4a:	74fb      	strb	r3, [r7, #19]
 8007e4c:	e001      	b.n	8007e52 <tcp_input+0x6e6>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007e52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e56:	f113 0f0d 	cmn.w	r3, #13
 8007e5a:	d016      	beq.n	8007e8a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007e5c:	4b13      	ldr	r3, [pc, #76]	; (8007eac <tcp_input+0x740>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007e62:	69f8      	ldr	r0, [r7, #28]
 8007e64:	f000 f88e 	bl	8007f84 <tcp_input_delayed_close>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d128      	bne.n	8007ec0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007e6e:	69f8      	ldr	r0, [r7, #28]
 8007e70:	f002 ff20 	bl	800acb4 <tcp_output>
 8007e74:	e025      	b.n	8007ec2 <tcp_input+0x756>
        goto aborted;
 8007e76:	bf00      	nop
 8007e78:	e023      	b.n	8007ec2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007e7a:	bf00      	nop
 8007e7c:	e021      	b.n	8007ec2 <tcp_input+0x756>
              goto aborted;
 8007e7e:	bf00      	nop
 8007e80:	e01f      	b.n	8007ec2 <tcp_input+0x756>
          goto aborted;
 8007e82:	bf00      	nop
 8007e84:	e01d      	b.n	8007ec2 <tcp_input+0x756>
            goto aborted;
 8007e86:	bf00      	nop
 8007e88:	e01b      	b.n	8007ec2 <tcp_input+0x756>
              goto aborted;
 8007e8a:	bf00      	nop
 8007e8c:	e019      	b.n	8007ec2 <tcp_input+0x756>
 8007e8e:	bf00      	nop
 8007e90:	20008258 	.word	0x20008258
 8007e94:	20008268 	.word	0x20008268
 8007e98:	20008288 	.word	0x20008288
 8007e9c:	20008285 	.word	0x20008285
 8007ea0:	20008280 	.word	0x20008280
 8007ea4:	20008284 	.word	0x20008284
 8007ea8:	20008282 	.word	0x20008282
 8007eac:	2000828c 	.word	0x2000828c
 8007eb0:	2000824c 	.word	0x2000824c
 8007eb4:	08010b28 	.word	0x08010b28
 8007eb8:	08010cdc 	.word	0x08010cdc
 8007ebc:	08010b74 	.word	0x08010b74
          goto aborted;
 8007ec0:	bf00      	nop
    tcp_input_pcb = NULL;
 8007ec2:	4b27      	ldr	r3, [pc, #156]	; (8007f60 <tcp_input+0x7f4>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007ec8:	4b26      	ldr	r3, [pc, #152]	; (8007f64 <tcp_input+0x7f8>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007ece:	4b26      	ldr	r3, [pc, #152]	; (8007f68 <tcp_input+0x7fc>)
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d03f      	beq.n	8007f56 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007ed6:	4b24      	ldr	r3, [pc, #144]	; (8007f68 <tcp_input+0x7fc>)
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fd fb6e 	bl	80055bc <pbuf_free>
      inseg.p = NULL;
 8007ee0:	4b21      	ldr	r3, [pc, #132]	; (8007f68 <tcp_input+0x7fc>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007ee6:	e036      	b.n	8007f56 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007ee8:	4b20      	ldr	r3, [pc, #128]	; (8007f6c <tcp_input+0x800>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	899b      	ldrh	r3, [r3, #12]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fc f805 	bl	8003f00 <lwip_htons>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d118      	bne.n	8007f34 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f02:	4b1b      	ldr	r3, [pc, #108]	; (8007f70 <tcp_input+0x804>)
 8007f04:	6819      	ldr	r1, [r3, #0]
 8007f06:	4b1b      	ldr	r3, [pc, #108]	; (8007f74 <tcp_input+0x808>)
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	4b1a      	ldr	r3, [pc, #104]	; (8007f78 <tcp_input+0x80c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f12:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <tcp_input+0x800>)
 8007f14:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f16:	885b      	ldrh	r3, [r3, #2]
 8007f18:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f1a:	4a14      	ldr	r2, [pc, #80]	; (8007f6c <tcp_input+0x800>)
 8007f1c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f1e:	8812      	ldrh	r2, [r2, #0]
 8007f20:	b292      	uxth	r2, r2
 8007f22:	9202      	str	r2, [sp, #8]
 8007f24:	9301      	str	r3, [sp, #4]
 8007f26:	4b15      	ldr	r3, [pc, #84]	; (8007f7c <tcp_input+0x810>)
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	4b15      	ldr	r3, [pc, #84]	; (8007f80 <tcp_input+0x814>)
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	2000      	movs	r0, #0
 8007f30:	f003 fc74 	bl	800b81c <tcp_rst>
    pbuf_free(p);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7fd fb41 	bl	80055bc <pbuf_free>
  return;
 8007f3a:	e00c      	b.n	8007f56 <tcp_input+0x7ea>
    goto dropped;
 8007f3c:	bf00      	nop
 8007f3e:	e006      	b.n	8007f4e <tcp_input+0x7e2>
    goto dropped;
 8007f40:	bf00      	nop
 8007f42:	e004      	b.n	8007f4e <tcp_input+0x7e2>
    goto dropped;
 8007f44:	bf00      	nop
 8007f46:	e002      	b.n	8007f4e <tcp_input+0x7e2>
      goto dropped;
 8007f48:	bf00      	nop
 8007f4a:	e000      	b.n	8007f4e <tcp_input+0x7e2>
      goto dropped;
 8007f4c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fd fb34 	bl	80055bc <pbuf_free>
 8007f54:	e000      	b.n	8007f58 <tcp_input+0x7ec>
  return;
 8007f56:	bf00      	nop
}
 8007f58:	3724      	adds	r7, #36	; 0x24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd90      	pop	{r4, r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	2000828c 	.word	0x2000828c
 8007f64:	20008288 	.word	0x20008288
 8007f68:	20008258 	.word	0x20008258
 8007f6c:	20008268 	.word	0x20008268
 8007f70:	2000827c 	.word	0x2000827c
 8007f74:	20008282 	.word	0x20008282
 8007f78:	20008278 	.word	0x20008278
 8007f7c:	20004ce0 	.word	0x20004ce0
 8007f80:	20004ce4 	.word	0x20004ce4

08007f84 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d106      	bne.n	8007fa0 <tcp_input_delayed_close+0x1c>
 8007f92:	4b17      	ldr	r3, [pc, #92]	; (8007ff0 <tcp_input_delayed_close+0x6c>)
 8007f94:	f240 225a 	movw	r2, #602	; 0x25a
 8007f98:	4916      	ldr	r1, [pc, #88]	; (8007ff4 <tcp_input_delayed_close+0x70>)
 8007f9a:	4817      	ldr	r0, [pc, #92]	; (8007ff8 <tcp_input_delayed_close+0x74>)
 8007f9c:	f006 fd48 	bl	800ea30 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007fa0:	4b16      	ldr	r3, [pc, #88]	; (8007ffc <tcp_input_delayed_close+0x78>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	f003 0310 	and.w	r3, r3, #16
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01c      	beq.n	8007fe6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	8b5b      	ldrh	r3, [r3, #26]
 8007fb0:	f003 0310 	and.w	r3, r3, #16
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10d      	bne.n	8007fd4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d008      	beq.n	8007fd4 <tcp_input_delayed_close+0x50>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	6912      	ldr	r2, [r2, #16]
 8007fcc:	f06f 010e 	mvn.w	r1, #14
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	480a      	ldr	r0, [pc, #40]	; (8008000 <tcp_input_delayed_close+0x7c>)
 8007fd8:	f7ff fa50 	bl	800747c <tcp_pcb_remove>
    tcp_free(pcb);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7fd fd9d 	bl	8005b1c <tcp_free>
    return 1;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	08010b28 	.word	0x08010b28
 8007ff4:	08010cf8 	.word	0x08010cf8
 8007ff8:	08010b74 	.word	0x08010b74
 8007ffc:	20008285 	.word	0x20008285
 8008000:	2000824c 	.word	0x2000824c

08008004 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008004:	b590      	push	{r4, r7, lr}
 8008006:	b08b      	sub	sp, #44	; 0x2c
 8008008:	af04      	add	r7, sp, #16
 800800a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800800c:	4b6f      	ldr	r3, [pc, #444]	; (80081cc <tcp_listen_input+0x1c8>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	f003 0304 	and.w	r3, r3, #4
 8008014:	2b00      	cmp	r3, #0
 8008016:	f040 80d2 	bne.w	80081be <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d106      	bne.n	800802e <tcp_listen_input+0x2a>
 8008020:	4b6b      	ldr	r3, [pc, #428]	; (80081d0 <tcp_listen_input+0x1cc>)
 8008022:	f240 2281 	movw	r2, #641	; 0x281
 8008026:	496b      	ldr	r1, [pc, #428]	; (80081d4 <tcp_listen_input+0x1d0>)
 8008028:	486b      	ldr	r0, [pc, #428]	; (80081d8 <tcp_listen_input+0x1d4>)
 800802a:	f006 fd01 	bl	800ea30 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800802e:	4b67      	ldr	r3, [pc, #412]	; (80081cc <tcp_listen_input+0x1c8>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	f003 0310 	and.w	r3, r3, #16
 8008036:	2b00      	cmp	r3, #0
 8008038:	d019      	beq.n	800806e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800803a:	4b68      	ldr	r3, [pc, #416]	; (80081dc <tcp_listen_input+0x1d8>)
 800803c:	6819      	ldr	r1, [r3, #0]
 800803e:	4b68      	ldr	r3, [pc, #416]	; (80081e0 <tcp_listen_input+0x1dc>)
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	4b67      	ldr	r3, [pc, #412]	; (80081e4 <tcp_listen_input+0x1e0>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800804a:	4b67      	ldr	r3, [pc, #412]	; (80081e8 <tcp_listen_input+0x1e4>)
 800804c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800804e:	885b      	ldrh	r3, [r3, #2]
 8008050:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008052:	4a65      	ldr	r2, [pc, #404]	; (80081e8 <tcp_listen_input+0x1e4>)
 8008054:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008056:	8812      	ldrh	r2, [r2, #0]
 8008058:	b292      	uxth	r2, r2
 800805a:	9202      	str	r2, [sp, #8]
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	4b63      	ldr	r3, [pc, #396]	; (80081ec <tcp_listen_input+0x1e8>)
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	4b63      	ldr	r3, [pc, #396]	; (80081f0 <tcp_listen_input+0x1ec>)
 8008064:	4602      	mov	r2, r0
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f003 fbd8 	bl	800b81c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800806c:	e0a9      	b.n	80081c2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800806e:	4b57      	ldr	r3, [pc, #348]	; (80081cc <tcp_listen_input+0x1c8>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 80a3 	beq.w	80081c2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	7d5b      	ldrb	r3, [r3, #21]
 8008080:	4618      	mov	r0, r3
 8008082:	f7ff f85f 	bl	8007144 <tcp_alloc>
 8008086:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d111      	bne.n	80080b2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00a      	beq.n	80080ac <tcp_listen_input+0xa8>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	6910      	ldr	r0, [r2, #16]
 800809e:	f04f 32ff 	mov.w	r2, #4294967295
 80080a2:	2100      	movs	r1, #0
 80080a4:	4798      	blx	r3
 80080a6:	4603      	mov	r3, r0
 80080a8:	73bb      	strb	r3, [r7, #14]
      return;
 80080aa:	e08b      	b.n	80081c4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80080ac:	23f0      	movs	r3, #240	; 0xf0
 80080ae:	73bb      	strb	r3, [r7, #14]
      return;
 80080b0:	e088      	b.n	80081c4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80080b2:	4b50      	ldr	r3, [pc, #320]	; (80081f4 <tcp_listen_input+0x1f0>)
 80080b4:	695a      	ldr	r2, [r3, #20]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80080ba:	4b4e      	ldr	r3, [pc, #312]	; (80081f4 <tcp_listen_input+0x1f0>)
 80080bc:	691a      	ldr	r2, [r3, #16]
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	8ada      	ldrh	r2, [r3, #22]
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80080ca:	4b47      	ldr	r3, [pc, #284]	; (80081e8 <tcp_listen_input+0x1e4>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2203      	movs	r2, #3
 80080da:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80080dc:	4b41      	ldr	r3, [pc, #260]	; (80081e4 <tcp_listen_input+0x1e0>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80080ee:	6978      	ldr	r0, [r7, #20]
 80080f0:	f7ff fa58 	bl	80075a4 <tcp_next_iss>
 80080f4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800810e:	4b35      	ldr	r3, [pc, #212]	; (80081e4 <tcp_listen_input+0x1e0>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	1e5a      	subs	r2, r3, #1
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	7a5b      	ldrb	r3, [r3, #9]
 800812a:	f003 030c 	and.w	r3, r3, #12
 800812e:	b2da      	uxtb	r2, r3
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	7a1a      	ldrb	r2, [r3, #8]
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800813c:	4b2e      	ldr	r3, [pc, #184]	; (80081f8 <tcp_listen_input+0x1f4>)
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	60da      	str	r2, [r3, #12]
 8008144:	4a2c      	ldr	r2, [pc, #176]	; (80081f8 <tcp_listen_input+0x1f4>)
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	f003 fd29 	bl	800bba0 <tcp_timer_needed>
 800814e:	4b2b      	ldr	r3, [pc, #172]	; (80081fc <tcp_listen_input+0x1f8>)
 8008150:	2201      	movs	r2, #1
 8008152:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008154:	6978      	ldr	r0, [r7, #20]
 8008156:	f001 fd8f 	bl	8009c78 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800815a:	4b23      	ldr	r3, [pc, #140]	; (80081e8 <tcp_listen_input+0x1e4>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	89db      	ldrh	r3, [r3, #14]
 8008160:	b29a      	uxth	r2, r3
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	3304      	adds	r3, #4
 800817c:	4618      	mov	r0, r3
 800817e:	f005 f8ed 	bl	800d35c <ip4_route>
 8008182:	4601      	mov	r1, r0
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	3304      	adds	r3, #4
 8008188:	461a      	mov	r2, r3
 800818a:	4620      	mov	r0, r4
 800818c:	f7ff fa30 	bl	80075f0 <tcp_eff_send_mss_netif>
 8008190:	4603      	mov	r3, r0
 8008192:	461a      	mov	r2, r3
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008198:	2112      	movs	r1, #18
 800819a:	6978      	ldr	r0, [r7, #20]
 800819c:	f002 fc9c 	bl	800aad8 <tcp_enqueue_flags>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80081a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d004      	beq.n	80081b6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80081ac:	2100      	movs	r1, #0
 80081ae:	6978      	ldr	r0, [r7, #20]
 80081b0:	f7fd fede 	bl	8005f70 <tcp_abandon>
      return;
 80081b4:	e006      	b.n	80081c4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80081b6:	6978      	ldr	r0, [r7, #20]
 80081b8:	f002 fd7c 	bl	800acb4 <tcp_output>
  return;
 80081bc:	e001      	b.n	80081c2 <tcp_listen_input+0x1be>
    return;
 80081be:	bf00      	nop
 80081c0:	e000      	b.n	80081c4 <tcp_listen_input+0x1c0>
  return;
 80081c2:	bf00      	nop
}
 80081c4:	371c      	adds	r7, #28
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd90      	pop	{r4, r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20008284 	.word	0x20008284
 80081d0:	08010b28 	.word	0x08010b28
 80081d4:	08010d20 	.word	0x08010d20
 80081d8:	08010b74 	.word	0x08010b74
 80081dc:	2000827c 	.word	0x2000827c
 80081e0:	20008282 	.word	0x20008282
 80081e4:	20008278 	.word	0x20008278
 80081e8:	20008268 	.word	0x20008268
 80081ec:	20004ce0 	.word	0x20004ce0
 80081f0:	20004ce4 	.word	0x20004ce4
 80081f4:	20004cd0 	.word	0x20004cd0
 80081f8:	2000824c 	.word	0x2000824c
 80081fc:	20008254 	.word	0x20008254

08008200 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af04      	add	r7, sp, #16
 8008206:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008208:	4b2f      	ldr	r3, [pc, #188]	; (80082c8 <tcp_timewait_input+0xc8>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	f003 0304 	and.w	r3, r3, #4
 8008210:	2b00      	cmp	r3, #0
 8008212:	d153      	bne.n	80082bc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d106      	bne.n	8008228 <tcp_timewait_input+0x28>
 800821a:	4b2c      	ldr	r3, [pc, #176]	; (80082cc <tcp_timewait_input+0xcc>)
 800821c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008220:	492b      	ldr	r1, [pc, #172]	; (80082d0 <tcp_timewait_input+0xd0>)
 8008222:	482c      	ldr	r0, [pc, #176]	; (80082d4 <tcp_timewait_input+0xd4>)
 8008224:	f006 fc04 	bl	800ea30 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008228:	4b27      	ldr	r3, [pc, #156]	; (80082c8 <tcp_timewait_input+0xc8>)
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d02a      	beq.n	800828a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008234:	4b28      	ldr	r3, [pc, #160]	; (80082d8 <tcp_timewait_input+0xd8>)
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	db2d      	blt.n	800829e <tcp_timewait_input+0x9e>
 8008242:	4b25      	ldr	r3, [pc, #148]	; (80082d8 <tcp_timewait_input+0xd8>)
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	6879      	ldr	r1, [r7, #4]
 800824c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800824e:	440b      	add	r3, r1
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	dc23      	bgt.n	800829e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008256:	4b21      	ldr	r3, [pc, #132]	; (80082dc <tcp_timewait_input+0xdc>)
 8008258:	6819      	ldr	r1, [r3, #0]
 800825a:	4b21      	ldr	r3, [pc, #132]	; (80082e0 <tcp_timewait_input+0xe0>)
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	4b1d      	ldr	r3, [pc, #116]	; (80082d8 <tcp_timewait_input+0xd8>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008266:	4b1f      	ldr	r3, [pc, #124]	; (80082e4 <tcp_timewait_input+0xe4>)
 8008268:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800826a:	885b      	ldrh	r3, [r3, #2]
 800826c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800826e:	4a1d      	ldr	r2, [pc, #116]	; (80082e4 <tcp_timewait_input+0xe4>)
 8008270:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008272:	8812      	ldrh	r2, [r2, #0]
 8008274:	b292      	uxth	r2, r2
 8008276:	9202      	str	r2, [sp, #8]
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	4b1b      	ldr	r3, [pc, #108]	; (80082e8 <tcp_timewait_input+0xe8>)
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	4b1b      	ldr	r3, [pc, #108]	; (80082ec <tcp_timewait_input+0xec>)
 8008280:	4602      	mov	r2, r0
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f003 faca 	bl	800b81c <tcp_rst>
      return;
 8008288:	e01b      	b.n	80082c2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800828a:	4b0f      	ldr	r3, [pc, #60]	; (80082c8 <tcp_timewait_input+0xc8>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008296:	4b16      	ldr	r3, [pc, #88]	; (80082f0 <tcp_timewait_input+0xf0>)
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800829e:	4b10      	ldr	r3, [pc, #64]	; (80082e0 <tcp_timewait_input+0xe0>)
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00c      	beq.n	80082c0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	8b5b      	ldrh	r3, [r3, #26]
 80082aa:	f043 0302 	orr.w	r3, r3, #2
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f002 fcfd 	bl	800acb4 <tcp_output>
  }
  return;
 80082ba:	e001      	b.n	80082c0 <tcp_timewait_input+0xc0>
    return;
 80082bc:	bf00      	nop
 80082be:	e000      	b.n	80082c2 <tcp_timewait_input+0xc2>
  return;
 80082c0:	bf00      	nop
}
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20008284 	.word	0x20008284
 80082cc:	08010b28 	.word	0x08010b28
 80082d0:	08010d40 	.word	0x08010d40
 80082d4:	08010b74 	.word	0x08010b74
 80082d8:	20008278 	.word	0x20008278
 80082dc:	2000827c 	.word	0x2000827c
 80082e0:	20008282 	.word	0x20008282
 80082e4:	20008268 	.word	0x20008268
 80082e8:	20004ce0 	.word	0x20004ce0
 80082ec:	20004ce4 	.word	0x20004ce4
 80082f0:	20008240 	.word	0x20008240

080082f4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80082f4:	b590      	push	{r4, r7, lr}
 80082f6:	b08d      	sub	sp, #52	; 0x34
 80082f8:	af04      	add	r7, sp, #16
 80082fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d106      	bne.n	8008318 <tcp_process+0x24>
 800830a:	4b9d      	ldr	r3, [pc, #628]	; (8008580 <tcp_process+0x28c>)
 800830c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008310:	499c      	ldr	r1, [pc, #624]	; (8008584 <tcp_process+0x290>)
 8008312:	489d      	ldr	r0, [pc, #628]	; (8008588 <tcp_process+0x294>)
 8008314:	f006 fb8c 	bl	800ea30 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008318:	4b9c      	ldr	r3, [pc, #624]	; (800858c <tcp_process+0x298>)
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	d04e      	beq.n	80083c2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	7d1b      	ldrb	r3, [r3, #20]
 8008328:	2b02      	cmp	r3, #2
 800832a:	d108      	bne.n	800833e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008330:	4b97      	ldr	r3, [pc, #604]	; (8008590 <tcp_process+0x29c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d123      	bne.n	8008380 <tcp_process+0x8c>
        acceptable = 1;
 8008338:	2301      	movs	r3, #1
 800833a:	76fb      	strb	r3, [r7, #27]
 800833c:	e020      	b.n	8008380 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008342:	4b94      	ldr	r3, [pc, #592]	; (8008594 <tcp_process+0x2a0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	429a      	cmp	r2, r3
 8008348:	d102      	bne.n	8008350 <tcp_process+0x5c>
        acceptable = 1;
 800834a:	2301      	movs	r3, #1
 800834c:	76fb      	strb	r3, [r7, #27]
 800834e:	e017      	b.n	8008380 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008350:	4b90      	ldr	r3, [pc, #576]	; (8008594 <tcp_process+0x2a0>)
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	db10      	blt.n	8008380 <tcp_process+0x8c>
 800835e:	4b8d      	ldr	r3, [pc, #564]	; (8008594 <tcp_process+0x2a0>)
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	6879      	ldr	r1, [r7, #4]
 8008368:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800836a:	440b      	add	r3, r1
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	dc06      	bgt.n	8008380 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	8b5b      	ldrh	r3, [r3, #26]
 8008376:	f043 0302 	orr.w	r3, r3, #2
 800837a:	b29a      	uxth	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008380:	7efb      	ldrb	r3, [r7, #27]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d01b      	beq.n	80083be <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	7d1b      	ldrb	r3, [r3, #20]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d106      	bne.n	800839c <tcp_process+0xa8>
 800838e:	4b7c      	ldr	r3, [pc, #496]	; (8008580 <tcp_process+0x28c>)
 8008390:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008394:	4980      	ldr	r1, [pc, #512]	; (8008598 <tcp_process+0x2a4>)
 8008396:	487c      	ldr	r0, [pc, #496]	; (8008588 <tcp_process+0x294>)
 8008398:	f006 fb4a 	bl	800ea30 <iprintf>
      recv_flags |= TF_RESET;
 800839c:	4b7f      	ldr	r3, [pc, #508]	; (800859c <tcp_process+0x2a8>)
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	f043 0308 	orr.w	r3, r3, #8
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	4b7d      	ldr	r3, [pc, #500]	; (800859c <tcp_process+0x2a8>)
 80083a8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	8b5b      	ldrh	r3, [r3, #26]
 80083ae:	f023 0301 	bic.w	r3, r3, #1
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80083b8:	f06f 030d 	mvn.w	r3, #13
 80083bc:	e37a      	b.n	8008ab4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	e378      	b.n	8008ab4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80083c2:	4b72      	ldr	r3, [pc, #456]	; (800858c <tcp_process+0x298>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d010      	beq.n	80083f0 <tcp_process+0xfc>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	7d1b      	ldrb	r3, [r3, #20]
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d00c      	beq.n	80083f0 <tcp_process+0xfc>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	7d1b      	ldrb	r3, [r3, #20]
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d008      	beq.n	80083f0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	8b5b      	ldrh	r3, [r3, #26]
 80083e2:	f043 0302 	orr.w	r3, r3, #2
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	e361      	b.n	8008ab4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	8b5b      	ldrh	r3, [r3, #26]
 80083f4:	f003 0310 	and.w	r3, r3, #16
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d103      	bne.n	8008404 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80083fc:	4b68      	ldr	r3, [pc, #416]	; (80085a0 <tcp_process+0x2ac>)
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 fc2f 	bl	8009c78 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	7d1b      	ldrb	r3, [r3, #20]
 800841e:	3b02      	subs	r3, #2
 8008420:	2b07      	cmp	r3, #7
 8008422:	f200 8337 	bhi.w	8008a94 <tcp_process+0x7a0>
 8008426:	a201      	add	r2, pc, #4	; (adr r2, 800842c <tcp_process+0x138>)
 8008428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842c:	0800844d 	.word	0x0800844d
 8008430:	0800867d 	.word	0x0800867d
 8008434:	080087f5 	.word	0x080087f5
 8008438:	0800881f 	.word	0x0800881f
 800843c:	08008943 	.word	0x08008943
 8008440:	080087f5 	.word	0x080087f5
 8008444:	080089cf 	.word	0x080089cf
 8008448:	08008a5f 	.word	0x08008a5f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800844c:	4b4f      	ldr	r3, [pc, #316]	; (800858c <tcp_process+0x298>)
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	f003 0310 	and.w	r3, r3, #16
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 80e4 	beq.w	8008622 <tcp_process+0x32e>
 800845a:	4b4c      	ldr	r3, [pc, #304]	; (800858c <tcp_process+0x298>)
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	f003 0302 	and.w	r3, r3, #2
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 80dd 	beq.w	8008622 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	4b48      	ldr	r3, [pc, #288]	; (8008590 <tcp_process+0x29c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	429a      	cmp	r2, r3
 8008474:	f040 80d5 	bne.w	8008622 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008478:	4b46      	ldr	r3, [pc, #280]	; (8008594 <tcp_process+0x2a0>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800848a:	4b41      	ldr	r3, [pc, #260]	; (8008590 <tcp_process+0x29c>)
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008492:	4b44      	ldr	r3, [pc, #272]	; (80085a4 <tcp_process+0x2b0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	89db      	ldrh	r3, [r3, #14]
 8008498:	b29a      	uxth	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80084ac:	4b39      	ldr	r3, [pc, #228]	; (8008594 <tcp_process+0x2a0>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	1e5a      	subs	r2, r3, #1
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2204      	movs	r2, #4
 80084ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3304      	adds	r3, #4
 80084c4:	4618      	mov	r0, r3
 80084c6:	f004 ff49 	bl	800d35c <ip4_route>
 80084ca:	4601      	mov	r1, r0
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3304      	adds	r3, #4
 80084d0:	461a      	mov	r2, r3
 80084d2:	4620      	mov	r0, r4
 80084d4:	f7ff f88c 	bl	80075f0 <tcp_eff_send_mss_netif>
 80084d8:	4603      	mov	r3, r0
 80084da:	461a      	mov	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084e4:	009a      	lsls	r2, r3, #2
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	f241 111c 	movw	r1, #4380	; 0x111c
 80084f0:	428b      	cmp	r3, r1
 80084f2:	bf38      	it	cc
 80084f4:	460b      	movcc	r3, r1
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d204      	bcs.n	8008504 <tcp_process+0x210>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	b29b      	uxth	r3, r3
 8008502:	e00d      	b.n	8008520 <tcp_process+0x22c>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	f241 121c 	movw	r2, #4380	; 0x111c
 800850e:	4293      	cmp	r3, r2
 8008510:	d904      	bls.n	800851c <tcp_process+0x228>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	b29b      	uxth	r3, r3
 800851a:	e001      	b.n	8008520 <tcp_process+0x22c>
 800851c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800852c:	2b00      	cmp	r3, #0
 800852e:	d106      	bne.n	800853e <tcp_process+0x24a>
 8008530:	4b13      	ldr	r3, [pc, #76]	; (8008580 <tcp_process+0x28c>)
 8008532:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008536:	491c      	ldr	r1, [pc, #112]	; (80085a8 <tcp_process+0x2b4>)
 8008538:	4813      	ldr	r0, [pc, #76]	; (8008588 <tcp_process+0x294>)
 800853a:	f006 fa79 	bl	800ea30 <iprintf>
        --pcb->snd_queuelen;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008544:	3b01      	subs	r3, #1
 8008546:	b29a      	uxth	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008552:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d12a      	bne.n	80085b0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800855e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d106      	bne.n	8008574 <tcp_process+0x280>
 8008566:	4b06      	ldr	r3, [pc, #24]	; (8008580 <tcp_process+0x28c>)
 8008568:	f44f 725d 	mov.w	r2, #884	; 0x374
 800856c:	490f      	ldr	r1, [pc, #60]	; (80085ac <tcp_process+0x2b8>)
 800856e:	4806      	ldr	r0, [pc, #24]	; (8008588 <tcp_process+0x294>)
 8008570:	f006 fa5e 	bl	800ea30 <iprintf>
          pcb->unsent = rseg->next;
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	66da      	str	r2, [r3, #108]	; 0x6c
 800857c:	e01c      	b.n	80085b8 <tcp_process+0x2c4>
 800857e:	bf00      	nop
 8008580:	08010b28 	.word	0x08010b28
 8008584:	08010d60 	.word	0x08010d60
 8008588:	08010b74 	.word	0x08010b74
 800858c:	20008284 	.word	0x20008284
 8008590:	2000827c 	.word	0x2000827c
 8008594:	20008278 	.word	0x20008278
 8008598:	08010d7c 	.word	0x08010d7c
 800859c:	20008285 	.word	0x20008285
 80085a0:	20008240 	.word	0x20008240
 80085a4:	20008268 	.word	0x20008268
 80085a8:	08010d9c 	.word	0x08010d9c
 80085ac:	08010db4 	.word	0x08010db4
        } else {
          pcb->unacked = rseg->next;
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80085b8:	69f8      	ldr	r0, [r7, #28]
 80085ba:	f7fe fc3c 	bl	8006e36 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d104      	bne.n	80085d0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085cc:	861a      	strh	r2, [r3, #48]	; 0x30
 80085ce:	e006      	b.n	80085de <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <tcp_process+0x30a>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	6910      	ldr	r0, [r2, #16]
 80085f2:	2200      	movs	r2, #0
 80085f4:	6879      	ldr	r1, [r7, #4]
 80085f6:	4798      	blx	r3
 80085f8:	4603      	mov	r3, r0
 80085fa:	76bb      	strb	r3, [r7, #26]
 80085fc:	e001      	b.n	8008602 <tcp_process+0x30e>
 80085fe:	2300      	movs	r3, #0
 8008600:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008602:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008606:	f113 0f0d 	cmn.w	r3, #13
 800860a:	d102      	bne.n	8008612 <tcp_process+0x31e>
          return ERR_ABRT;
 800860c:	f06f 030c 	mvn.w	r3, #12
 8008610:	e250      	b.n	8008ab4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	8b5b      	ldrh	r3, [r3, #26]
 8008616:	f043 0302 	orr.w	r3, r3, #2
 800861a:	b29a      	uxth	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008620:	e23a      	b.n	8008a98 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008622:	4b98      	ldr	r3, [pc, #608]	; (8008884 <tcp_process+0x590>)
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	f003 0310 	and.w	r3, r3, #16
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 8234 	beq.w	8008a98 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008630:	4b95      	ldr	r3, [pc, #596]	; (8008888 <tcp_process+0x594>)
 8008632:	6819      	ldr	r1, [r3, #0]
 8008634:	4b95      	ldr	r3, [pc, #596]	; (800888c <tcp_process+0x598>)
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	461a      	mov	r2, r3
 800863a:	4b95      	ldr	r3, [pc, #596]	; (8008890 <tcp_process+0x59c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008640:	4b94      	ldr	r3, [pc, #592]	; (8008894 <tcp_process+0x5a0>)
 8008642:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008644:	885b      	ldrh	r3, [r3, #2]
 8008646:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008648:	4a92      	ldr	r2, [pc, #584]	; (8008894 <tcp_process+0x5a0>)
 800864a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800864c:	8812      	ldrh	r2, [r2, #0]
 800864e:	b292      	uxth	r2, r2
 8008650:	9202      	str	r2, [sp, #8]
 8008652:	9301      	str	r3, [sp, #4]
 8008654:	4b90      	ldr	r3, [pc, #576]	; (8008898 <tcp_process+0x5a4>)
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	4b90      	ldr	r3, [pc, #576]	; (800889c <tcp_process+0x5a8>)
 800865a:	4602      	mov	r2, r0
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f003 f8dd 	bl	800b81c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008668:	2b05      	cmp	r3, #5
 800866a:	f200 8215 	bhi.w	8008a98 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f002 fea9 	bl	800b3cc <tcp_rexmit_rto>
      break;
 800867a:	e20d      	b.n	8008a98 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800867c:	4b81      	ldr	r3, [pc, #516]	; (8008884 <tcp_process+0x590>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	f003 0310 	and.w	r3, r3, #16
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 80a1 	beq.w	80087cc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800868a:	4b7f      	ldr	r3, [pc, #508]	; (8008888 <tcp_process+0x594>)
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	3b01      	subs	r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	db7e      	blt.n	8008798 <tcp_process+0x4a4>
 800869a:	4b7b      	ldr	r3, [pc, #492]	; (8008888 <tcp_process+0x594>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	dc77      	bgt.n	8008798 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2204      	movs	r2, #4
 80086ac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d102      	bne.n	80086bc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80086b6:	23fa      	movs	r3, #250	; 0xfa
 80086b8:	76bb      	strb	r3, [r7, #26]
 80086ba:	e01d      	b.n	80086f8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d106      	bne.n	80086d4 <tcp_process+0x3e0>
 80086c6:	4b76      	ldr	r3, [pc, #472]	; (80088a0 <tcp_process+0x5ac>)
 80086c8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80086cc:	4975      	ldr	r1, [pc, #468]	; (80088a4 <tcp_process+0x5b0>)
 80086ce:	4876      	ldr	r0, [pc, #472]	; (80088a8 <tcp_process+0x5b4>)
 80086d0:	f006 f9ae 	bl	800ea30 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <tcp_process+0x400>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6910      	ldr	r0, [r2, #16]
 80086e8:	2200      	movs	r2, #0
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	4798      	blx	r3
 80086ee:	4603      	mov	r3, r0
 80086f0:	76bb      	strb	r3, [r7, #26]
 80086f2:	e001      	b.n	80086f8 <tcp_process+0x404>
 80086f4:	23f0      	movs	r3, #240	; 0xf0
 80086f6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80086f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00a      	beq.n	8008716 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008700:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008704:	f113 0f0d 	cmn.w	r3, #13
 8008708:	d002      	beq.n	8008710 <tcp_process+0x41c>
              tcp_abort(pcb);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fd fcee 	bl	80060ec <tcp_abort>
            }
            return ERR_ABRT;
 8008710:	f06f 030c 	mvn.w	r3, #12
 8008714:	e1ce      	b.n	8008ab4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fae0 	bl	8008cdc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800871c:	4b63      	ldr	r3, [pc, #396]	; (80088ac <tcp_process+0x5b8>)
 800871e:	881b      	ldrh	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d005      	beq.n	8008730 <tcp_process+0x43c>
            recv_acked--;
 8008724:	4b61      	ldr	r3, [pc, #388]	; (80088ac <tcp_process+0x5b8>)
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	3b01      	subs	r3, #1
 800872a:	b29a      	uxth	r2, r3
 800872c:	4b5f      	ldr	r3, [pc, #380]	; (80088ac <tcp_process+0x5b8>)
 800872e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008734:	009a      	lsls	r2, r3, #2
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800873a:	005b      	lsls	r3, r3, #1
 800873c:	f241 111c 	movw	r1, #4380	; 0x111c
 8008740:	428b      	cmp	r3, r1
 8008742:	bf38      	it	cc
 8008744:	460b      	movcc	r3, r1
 8008746:	429a      	cmp	r2, r3
 8008748:	d204      	bcs.n	8008754 <tcp_process+0x460>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	b29b      	uxth	r3, r3
 8008752:	e00d      	b.n	8008770 <tcp_process+0x47c>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008758:	005b      	lsls	r3, r3, #1
 800875a:	f241 121c 	movw	r2, #4380	; 0x111c
 800875e:	4293      	cmp	r3, r2
 8008760:	d904      	bls.n	800876c <tcp_process+0x478>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	b29b      	uxth	r3, r3
 800876a:	e001      	b.n	8008770 <tcp_process+0x47c>
 800876c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008776:	4b4e      	ldr	r3, [pc, #312]	; (80088b0 <tcp_process+0x5bc>)
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	d037      	beq.n	80087f2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	8b5b      	ldrh	r3, [r3, #26]
 8008786:	f043 0302 	orr.w	r3, r3, #2
 800878a:	b29a      	uxth	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2207      	movs	r2, #7
 8008794:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008796:	e02c      	b.n	80087f2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008798:	4b3b      	ldr	r3, [pc, #236]	; (8008888 <tcp_process+0x594>)
 800879a:	6819      	ldr	r1, [r3, #0]
 800879c:	4b3b      	ldr	r3, [pc, #236]	; (800888c <tcp_process+0x598>)
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
 80087a2:	4b3b      	ldr	r3, [pc, #236]	; (8008890 <tcp_process+0x59c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087a8:	4b3a      	ldr	r3, [pc, #232]	; (8008894 <tcp_process+0x5a0>)
 80087aa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087ac:	885b      	ldrh	r3, [r3, #2]
 80087ae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087b0:	4a38      	ldr	r2, [pc, #224]	; (8008894 <tcp_process+0x5a0>)
 80087b2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087b4:	8812      	ldrh	r2, [r2, #0]
 80087b6:	b292      	uxth	r2, r2
 80087b8:	9202      	str	r2, [sp, #8]
 80087ba:	9301      	str	r3, [sp, #4]
 80087bc:	4b36      	ldr	r3, [pc, #216]	; (8008898 <tcp_process+0x5a4>)
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	4b36      	ldr	r3, [pc, #216]	; (800889c <tcp_process+0x5a8>)
 80087c2:	4602      	mov	r2, r0
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f003 f829 	bl	800b81c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80087ca:	e167      	b.n	8008a9c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80087cc:	4b2d      	ldr	r3, [pc, #180]	; (8008884 <tcp_process+0x590>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f000 8161 	beq.w	8008a9c <tcp_process+0x7a8>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087de:	1e5a      	subs	r2, r3, #1
 80087e0:	4b2b      	ldr	r3, [pc, #172]	; (8008890 <tcp_process+0x59c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	f040 8159 	bne.w	8008a9c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f002 fe10 	bl	800b410 <tcp_rexmit>
      break;
 80087f0:	e154      	b.n	8008a9c <tcp_process+0x7a8>
 80087f2:	e153      	b.n	8008a9c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fa71 	bl	8008cdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80087fa:	4b2d      	ldr	r3, [pc, #180]	; (80088b0 <tcp_process+0x5bc>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	f003 0320 	and.w	r3, r3, #32
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 814c 	beq.w	8008aa0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	8b5b      	ldrh	r3, [r3, #26]
 800880c:	f043 0302 	orr.w	r3, r3, #2
 8008810:	b29a      	uxth	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2207      	movs	r2, #7
 800881a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800881c:	e140      	b.n	8008aa0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fa5c 	bl	8008cdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008824:	4b22      	ldr	r3, [pc, #136]	; (80088b0 <tcp_process+0x5bc>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	f003 0320 	and.w	r3, r3, #32
 800882c:	2b00      	cmp	r3, #0
 800882e:	d071      	beq.n	8008914 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008830:	4b14      	ldr	r3, [pc, #80]	; (8008884 <tcp_process+0x590>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	f003 0310 	and.w	r3, r3, #16
 8008838:	2b00      	cmp	r3, #0
 800883a:	d060      	beq.n	80088fe <tcp_process+0x60a>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008840:	4b11      	ldr	r3, [pc, #68]	; (8008888 <tcp_process+0x594>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	429a      	cmp	r2, r3
 8008846:	d15a      	bne.n	80088fe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800884c:	2b00      	cmp	r3, #0
 800884e:	d156      	bne.n	80088fe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	8b5b      	ldrh	r3, [r3, #26]
 8008854:	f043 0302 	orr.w	r3, r3, #2
 8008858:	b29a      	uxth	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7fe fdbc 	bl	80073dc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008864:	4b13      	ldr	r3, [pc, #76]	; (80088b4 <tcp_process+0x5c0>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	429a      	cmp	r2, r3
 800886c:	d105      	bne.n	800887a <tcp_process+0x586>
 800886e:	4b11      	ldr	r3, [pc, #68]	; (80088b4 <tcp_process+0x5c0>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	4a0f      	ldr	r2, [pc, #60]	; (80088b4 <tcp_process+0x5c0>)
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	e02e      	b.n	80088d8 <tcp_process+0x5e4>
 800887a:	4b0e      	ldr	r3, [pc, #56]	; (80088b4 <tcp_process+0x5c0>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	617b      	str	r3, [r7, #20]
 8008880:	e027      	b.n	80088d2 <tcp_process+0x5de>
 8008882:	bf00      	nop
 8008884:	20008284 	.word	0x20008284
 8008888:	2000827c 	.word	0x2000827c
 800888c:	20008282 	.word	0x20008282
 8008890:	20008278 	.word	0x20008278
 8008894:	20008268 	.word	0x20008268
 8008898:	20004ce0 	.word	0x20004ce0
 800889c:	20004ce4 	.word	0x20004ce4
 80088a0:	08010b28 	.word	0x08010b28
 80088a4:	08010dc8 	.word	0x08010dc8
 80088a8:	08010b74 	.word	0x08010b74
 80088ac:	20008280 	.word	0x20008280
 80088b0:	20008285 	.word	0x20008285
 80088b4:	2000824c 	.word	0x2000824c
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d104      	bne.n	80088cc <tcp_process+0x5d8>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	60da      	str	r2, [r3, #12]
 80088ca:	e005      	b.n	80088d8 <tcp_process+0x5e4>
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	617b      	str	r3, [r7, #20]
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1ef      	bne.n	80088b8 <tcp_process+0x5c4>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	60da      	str	r2, [r3, #12]
 80088de:	4b77      	ldr	r3, [pc, #476]	; (8008abc <tcp_process+0x7c8>)
 80088e0:	2201      	movs	r2, #1
 80088e2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	220a      	movs	r2, #10
 80088e8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80088ea:	4b75      	ldr	r3, [pc, #468]	; (8008ac0 <tcp_process+0x7cc>)
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	60da      	str	r2, [r3, #12]
 80088f2:	4a73      	ldr	r2, [pc, #460]	; (8008ac0 <tcp_process+0x7cc>)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	f003 f952 	bl	800bba0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80088fc:	e0d2      	b.n	8008aa4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	8b5b      	ldrh	r3, [r3, #26]
 8008902:	f043 0302 	orr.w	r3, r3, #2
 8008906:	b29a      	uxth	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2208      	movs	r2, #8
 8008910:	751a      	strb	r2, [r3, #20]
      break;
 8008912:	e0c7      	b.n	8008aa4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008914:	4b6b      	ldr	r3, [pc, #428]	; (8008ac4 <tcp_process+0x7d0>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	f003 0310 	and.w	r3, r3, #16
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 80c1 	beq.w	8008aa4 <tcp_process+0x7b0>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008926:	4b68      	ldr	r3, [pc, #416]	; (8008ac8 <tcp_process+0x7d4>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	429a      	cmp	r2, r3
 800892c:	f040 80ba 	bne.w	8008aa4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008934:	2b00      	cmp	r3, #0
 8008936:	f040 80b5 	bne.w	8008aa4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2206      	movs	r2, #6
 800893e:	751a      	strb	r2, [r3, #20]
      break;
 8008940:	e0b0      	b.n	8008aa4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f9ca 	bl	8008cdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008948:	4b60      	ldr	r3, [pc, #384]	; (8008acc <tcp_process+0x7d8>)
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	f003 0320 	and.w	r3, r3, #32
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 80a9 	beq.w	8008aa8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	8b5b      	ldrh	r3, [r3, #26]
 800895a:	f043 0302 	orr.w	r3, r3, #2
 800895e:	b29a      	uxth	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7fe fd39 	bl	80073dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800896a:	4b59      	ldr	r3, [pc, #356]	; (8008ad0 <tcp_process+0x7dc>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	429a      	cmp	r2, r3
 8008972:	d105      	bne.n	8008980 <tcp_process+0x68c>
 8008974:	4b56      	ldr	r3, [pc, #344]	; (8008ad0 <tcp_process+0x7dc>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	4a55      	ldr	r2, [pc, #340]	; (8008ad0 <tcp_process+0x7dc>)
 800897c:	6013      	str	r3, [r2, #0]
 800897e:	e013      	b.n	80089a8 <tcp_process+0x6b4>
 8008980:	4b53      	ldr	r3, [pc, #332]	; (8008ad0 <tcp_process+0x7dc>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	613b      	str	r3, [r7, #16]
 8008986:	e00c      	b.n	80089a2 <tcp_process+0x6ae>
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	429a      	cmp	r2, r3
 8008990:	d104      	bne.n	800899c <tcp_process+0x6a8>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68da      	ldr	r2, [r3, #12]
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	60da      	str	r2, [r3, #12]
 800899a:	e005      	b.n	80089a8 <tcp_process+0x6b4>
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	613b      	str	r3, [r7, #16]
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1ef      	bne.n	8008988 <tcp_process+0x694>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	60da      	str	r2, [r3, #12]
 80089ae:	4b43      	ldr	r3, [pc, #268]	; (8008abc <tcp_process+0x7c8>)
 80089b0:	2201      	movs	r2, #1
 80089b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	220a      	movs	r2, #10
 80089b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80089ba:	4b41      	ldr	r3, [pc, #260]	; (8008ac0 <tcp_process+0x7cc>)
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	60da      	str	r2, [r3, #12]
 80089c2:	4a3f      	ldr	r2, [pc, #252]	; (8008ac0 <tcp_process+0x7cc>)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	f003 f8ea 	bl	800bba0 <tcp_timer_needed>
      }
      break;
 80089cc:	e06c      	b.n	8008aa8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f984 	bl	8008cdc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80089d4:	4b3b      	ldr	r3, [pc, #236]	; (8008ac4 <tcp_process+0x7d0>)
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	f003 0310 	and.w	r3, r3, #16
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d065      	beq.n	8008aac <tcp_process+0x7b8>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089e4:	4b38      	ldr	r3, [pc, #224]	; (8008ac8 <tcp_process+0x7d4>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d15f      	bne.n	8008aac <tcp_process+0x7b8>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d15b      	bne.n	8008aac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7fe fcf1 	bl	80073dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80089fa:	4b35      	ldr	r3, [pc, #212]	; (8008ad0 <tcp_process+0x7dc>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d105      	bne.n	8008a10 <tcp_process+0x71c>
 8008a04:	4b32      	ldr	r3, [pc, #200]	; (8008ad0 <tcp_process+0x7dc>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	4a31      	ldr	r2, [pc, #196]	; (8008ad0 <tcp_process+0x7dc>)
 8008a0c:	6013      	str	r3, [r2, #0]
 8008a0e:	e013      	b.n	8008a38 <tcp_process+0x744>
 8008a10:	4b2f      	ldr	r3, [pc, #188]	; (8008ad0 <tcp_process+0x7dc>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	e00c      	b.n	8008a32 <tcp_process+0x73e>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d104      	bne.n	8008a2c <tcp_process+0x738>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	60da      	str	r2, [r3, #12]
 8008a2a:	e005      	b.n	8008a38 <tcp_process+0x744>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1ef      	bne.n	8008a18 <tcp_process+0x724>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	60da      	str	r2, [r3, #12]
 8008a3e:	4b1f      	ldr	r3, [pc, #124]	; (8008abc <tcp_process+0x7c8>)
 8008a40:	2201      	movs	r2, #1
 8008a42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	220a      	movs	r2, #10
 8008a48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008a4a:	4b1d      	ldr	r3, [pc, #116]	; (8008ac0 <tcp_process+0x7cc>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	60da      	str	r2, [r3, #12]
 8008a52:	4a1b      	ldr	r2, [pc, #108]	; (8008ac0 <tcp_process+0x7cc>)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	f003 f8a2 	bl	800bba0 <tcp_timer_needed>
      }
      break;
 8008a5c:	e026      	b.n	8008aac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f93c 	bl	8008cdc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008a64:	4b17      	ldr	r3, [pc, #92]	; (8008ac4 <tcp_process+0x7d0>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	f003 0310 	and.w	r3, r3, #16
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d01f      	beq.n	8008ab0 <tcp_process+0x7bc>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a74:	4b14      	ldr	r3, [pc, #80]	; (8008ac8 <tcp_process+0x7d4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d119      	bne.n	8008ab0 <tcp_process+0x7bc>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d115      	bne.n	8008ab0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008a84:	4b11      	ldr	r3, [pc, #68]	; (8008acc <tcp_process+0x7d8>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	f043 0310 	orr.w	r3, r3, #16
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	4b0f      	ldr	r3, [pc, #60]	; (8008acc <tcp_process+0x7d8>)
 8008a90:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008a92:	e00d      	b.n	8008ab0 <tcp_process+0x7bc>
    default:
      break;
 8008a94:	bf00      	nop
 8008a96:	e00c      	b.n	8008ab2 <tcp_process+0x7be>
      break;
 8008a98:	bf00      	nop
 8008a9a:	e00a      	b.n	8008ab2 <tcp_process+0x7be>
      break;
 8008a9c:	bf00      	nop
 8008a9e:	e008      	b.n	8008ab2 <tcp_process+0x7be>
      break;
 8008aa0:	bf00      	nop
 8008aa2:	e006      	b.n	8008ab2 <tcp_process+0x7be>
      break;
 8008aa4:	bf00      	nop
 8008aa6:	e004      	b.n	8008ab2 <tcp_process+0x7be>
      break;
 8008aa8:	bf00      	nop
 8008aaa:	e002      	b.n	8008ab2 <tcp_process+0x7be>
      break;
 8008aac:	bf00      	nop
 8008aae:	e000      	b.n	8008ab2 <tcp_process+0x7be>
      break;
 8008ab0:	bf00      	nop
  }
  return ERR_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3724      	adds	r7, #36	; 0x24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd90      	pop	{r4, r7, pc}
 8008abc:	20008254 	.word	0x20008254
 8008ac0:	20008250 	.word	0x20008250
 8008ac4:	20008284 	.word	0x20008284
 8008ac8:	2000827c 	.word	0x2000827c
 8008acc:	20008285 	.word	0x20008285
 8008ad0:	2000824c 	.word	0x2000824c

08008ad4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008ad4:	b590      	push	{r4, r7, lr}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d106      	bne.n	8008af2 <tcp_oos_insert_segment+0x1e>
 8008ae4:	4b3b      	ldr	r3, [pc, #236]	; (8008bd4 <tcp_oos_insert_segment+0x100>)
 8008ae6:	f240 421f 	movw	r2, #1055	; 0x41f
 8008aea:	493b      	ldr	r1, [pc, #236]	; (8008bd8 <tcp_oos_insert_segment+0x104>)
 8008aec:	483b      	ldr	r0, [pc, #236]	; (8008bdc <tcp_oos_insert_segment+0x108>)
 8008aee:	f005 ff9f 	bl	800ea30 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	899b      	ldrh	r3, [r3, #12]
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fb fa00 	bl	8003f00 <lwip_htons>
 8008b00:	4603      	mov	r3, r0
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d028      	beq.n	8008b5e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008b0c:	6838      	ldr	r0, [r7, #0]
 8008b0e:	f7fe f97d 	bl	8006e0c <tcp_segs_free>
    next = NULL;
 8008b12:	2300      	movs	r3, #0
 8008b14:	603b      	str	r3, [r7, #0]
 8008b16:	e056      	b.n	8008bc6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	899b      	ldrh	r3, [r3, #12]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fb f9ed 	bl	8003f00 <lwip_htons>
 8008b26:	4603      	mov	r3, r0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00d      	beq.n	8008b4e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	899b      	ldrh	r3, [r3, #12]
 8008b38:	b29c      	uxth	r4, r3
 8008b3a:	2001      	movs	r0, #1
 8008b3c:	f7fb f9e0 	bl	8003f00 <lwip_htons>
 8008b40:	4603      	mov	r3, r0
 8008b42:	461a      	mov	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	4322      	orrs	r2, r4
 8008b4a:	b292      	uxth	r2, r2
 8008b4c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f7fe f96c 	bl	8006e36 <tcp_seg_free>
    while (next &&
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00e      	beq.n	8008b82 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	891b      	ldrh	r3, [r3, #8]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	4b1d      	ldr	r3, [pc, #116]	; (8008be0 <tcp_oos_insert_segment+0x10c>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	441a      	add	r2, r3
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	8909      	ldrh	r1, [r1, #8]
 8008b7a:	440b      	add	r3, r1
 8008b7c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	daca      	bge.n	8008b18 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d01e      	beq.n	8008bc6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	891b      	ldrh	r3, [r3, #8]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4b14      	ldr	r3, [pc, #80]	; (8008be0 <tcp_oos_insert_segment+0x10c>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	441a      	add	r2, r3
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	dd12      	ble.n	8008bc6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	4b0d      	ldr	r3, [pc, #52]	; (8008be0 <tcp_oos_insert_segment+0x10c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	891b      	ldrh	r3, [r3, #8]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	f7fc fb75 	bl	80052b0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	601a      	str	r2, [r3, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd90      	pop	{r4, r7, pc}
 8008bd4:	08010b28 	.word	0x08010b28
 8008bd8:	08010de8 	.word	0x08010de8
 8008bdc:	08010b74 	.word	0x08010b74
 8008be0:	20008278 	.word	0x20008278

08008be4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008be4:	b5b0      	push	{r4, r5, r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008bf2:	e03e      	b.n	8008c72 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fc fd62 	bl	80056cc <pbuf_clen>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c12:	8a7a      	ldrh	r2, [r7, #18]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d906      	bls.n	8008c26 <tcp_free_acked_segments+0x42>
 8008c18:	4b2a      	ldr	r3, [pc, #168]	; (8008cc4 <tcp_free_acked_segments+0xe0>)
 8008c1a:	f240 4257 	movw	r2, #1111	; 0x457
 8008c1e:	492a      	ldr	r1, [pc, #168]	; (8008cc8 <tcp_free_acked_segments+0xe4>)
 8008c20:	482a      	ldr	r0, [pc, #168]	; (8008ccc <tcp_free_acked_segments+0xe8>)
 8008c22:	f005 ff05 	bl	800ea30 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008c2c:	8a7b      	ldrh	r3, [r7, #18]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	891a      	ldrh	r2, [r3, #8]
 8008c3c:	4b24      	ldr	r3, [pc, #144]	; (8008cd0 <tcp_free_acked_segments+0xec>)
 8008c3e:	881b      	ldrh	r3, [r3, #0]
 8008c40:	4413      	add	r3, r2
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	4b22      	ldr	r3, [pc, #136]	; (8008cd0 <tcp_free_acked_segments+0xec>)
 8008c46:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008c48:	6978      	ldr	r0, [r7, #20]
 8008c4a:	f7fe f8f4 	bl	8006e36 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00c      	beq.n	8008c72 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d109      	bne.n	8008c72 <tcp_free_acked_segments+0x8e>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d106      	bne.n	8008c72 <tcp_free_acked_segments+0x8e>
 8008c64:	4b17      	ldr	r3, [pc, #92]	; (8008cc4 <tcp_free_acked_segments+0xe0>)
 8008c66:	f240 4261 	movw	r2, #1121	; 0x461
 8008c6a:	491a      	ldr	r1, [pc, #104]	; (8008cd4 <tcp_free_acked_segments+0xf0>)
 8008c6c:	4817      	ldr	r0, [pc, #92]	; (8008ccc <tcp_free_acked_segments+0xe8>)
 8008c6e:	f005 fedf 	bl	800ea30 <iprintf>
  while (seg_list != NULL &&
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d020      	beq.n	8008cba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fb f953 	bl	8003f2a <lwip_htonl>
 8008c84:	4604      	mov	r4, r0
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	891b      	ldrh	r3, [r3, #8]
 8008c8a:	461d      	mov	r5, r3
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	899b      	ldrh	r3, [r3, #12]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fb f933 	bl	8003f00 <lwip_htons>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <tcp_free_acked_segments+0xc6>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e000      	b.n	8008cac <tcp_free_acked_segments+0xc8>
 8008caa:	2300      	movs	r3, #0
 8008cac:	442b      	add	r3, r5
 8008cae:	18e2      	adds	r2, r4, r3
 8008cb0:	4b09      	ldr	r3, [pc, #36]	; (8008cd8 <tcp_free_acked_segments+0xf4>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	dd9c      	ble.n	8008bf4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008cba:	68bb      	ldr	r3, [r7, #8]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8008cc4:	08010b28 	.word	0x08010b28
 8008cc8:	08010e10 	.word	0x08010e10
 8008ccc:	08010b74 	.word	0x08010b74
 8008cd0:	20008280 	.word	0x20008280
 8008cd4:	08010e38 	.word	0x08010e38
 8008cd8:	2000827c 	.word	0x2000827c

08008cdc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008cdc:	b5b0      	push	{r4, r5, r7, lr}
 8008cde:	b094      	sub	sp, #80	; 0x50
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d106      	bne.n	8008cfc <tcp_receive+0x20>
 8008cee:	4b91      	ldr	r3, [pc, #580]	; (8008f34 <tcp_receive+0x258>)
 8008cf0:	f240 427b 	movw	r2, #1147	; 0x47b
 8008cf4:	4990      	ldr	r1, [pc, #576]	; (8008f38 <tcp_receive+0x25c>)
 8008cf6:	4891      	ldr	r0, [pc, #580]	; (8008f3c <tcp_receive+0x260>)
 8008cf8:	f005 fe9a 	bl	800ea30 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	7d1b      	ldrb	r3, [r3, #20]
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d806      	bhi.n	8008d12 <tcp_receive+0x36>
 8008d04:	4b8b      	ldr	r3, [pc, #556]	; (8008f34 <tcp_receive+0x258>)
 8008d06:	f240 427c 	movw	r2, #1148	; 0x47c
 8008d0a:	498d      	ldr	r1, [pc, #564]	; (8008f40 <tcp_receive+0x264>)
 8008d0c:	488b      	ldr	r0, [pc, #556]	; (8008f3c <tcp_receive+0x260>)
 8008d0e:	f005 fe8f 	bl	800ea30 <iprintf>

  if (flags & TCP_ACK) {
 8008d12:	4b8c      	ldr	r3, [pc, #560]	; (8008f44 <tcp_receive+0x268>)
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	f003 0310 	and.w	r3, r3, #16
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 8264 	beq.w	80091e8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d26:	461a      	mov	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d2c:	4413      	add	r3, r2
 8008d2e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d34:	4b84      	ldr	r3, [pc, #528]	; (8008f48 <tcp_receive+0x26c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	db1b      	blt.n	8008d76 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d42:	4b81      	ldr	r3, [pc, #516]	; (8008f48 <tcp_receive+0x26c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d106      	bne.n	8008d58 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d4e:	4b7f      	ldr	r3, [pc, #508]	; (8008f4c <tcp_receive+0x270>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	db0e      	blt.n	8008d76 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d5c:	4b7b      	ldr	r3, [pc, #492]	; (8008f4c <tcp_receive+0x270>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d125      	bne.n	8008db0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008d64:	4b7a      	ldr	r3, [pc, #488]	; (8008f50 <tcp_receive+0x274>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	89db      	ldrh	r3, [r3, #14]
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d91c      	bls.n	8008db0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008d76:	4b76      	ldr	r3, [pc, #472]	; (8008f50 <tcp_receive+0x274>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	89db      	ldrh	r3, [r3, #14]
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d205      	bcs.n	8008da0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008da0:	4b69      	ldr	r3, [pc, #420]	; (8008f48 <tcp_receive+0x26c>)
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008da8:	4b68      	ldr	r3, [pc, #416]	; (8008f4c <tcp_receive+0x270>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008db0:	4b66      	ldr	r3, [pc, #408]	; (8008f4c <tcp_receive+0x270>)
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	dc58      	bgt.n	8008e70 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008dbe:	4b65      	ldr	r3, [pc, #404]	; (8008f54 <tcp_receive+0x278>)
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d14b      	bne.n	8008e5e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008dd0:	4413      	add	r3, r2
 8008dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d142      	bne.n	8008e5e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	db3d      	blt.n	8008e5e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008de6:	4b59      	ldr	r3, [pc, #356]	; (8008f4c <tcp_receive+0x270>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d137      	bne.n	8008e5e <tcp_receive+0x182>
              found_dupack = 1;
 8008dee:	2301      	movs	r3, #1
 8008df0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008df8:	2bff      	cmp	r3, #255	; 0xff
 8008dfa:	d007      	beq.n	8008e0c <tcp_receive+0x130>
                ++pcb->dupacks;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e02:	3301      	adds	r3, #1
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d91b      	bls.n	8008e4e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e20:	4413      	add	r3, r2
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d30a      	bcc.n	8008e44 <tcp_receive+0x168>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e38:	4413      	add	r3, r2
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008e42:	e004      	b.n	8008e4e <tcp_receive+0x172>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d902      	bls.n	8008e5e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f002 fb45 	bl	800b4e8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f040 8161 	bne.w	8009128 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e6e:	e15b      	b.n	8009128 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008e70:	4b36      	ldr	r3, [pc, #216]	; (8008f4c <tcp_receive+0x270>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f2c0 814e 	blt.w	800911e <tcp_receive+0x442>
 8008e82:	4b32      	ldr	r3, [pc, #200]	; (8008f4c <tcp_receive+0x270>)
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f300 8146 	bgt.w	800911e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	8b5b      	ldrh	r3, [r3, #26]
 8008e96:	f003 0304 	and.w	r3, r3, #4
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d010      	beq.n	8008ec0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	8b5b      	ldrh	r3, [r3, #26]
 8008ea2:	f023 0304 	bic.w	r3, r3, #4
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008ece:	10db      	asrs	r3, r3, #3
 8008ed0:	b21b      	sxth	r3, r3
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	4413      	add	r3, r2
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	b21a      	sxth	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008ee8:	4b18      	ldr	r3, [pc, #96]	; (8008f4c <tcp_receive+0x270>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008f00:	4b12      	ldr	r3, [pc, #72]	; (8008f4c <tcp_receive+0x270>)
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	7d1b      	ldrb	r3, [r3, #20]
 8008f0c:	2b03      	cmp	r3, #3
 8008f0e:	f240 8097 	bls.w	8009040 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d245      	bcs.n	8008fae <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	8b5b      	ldrh	r3, [r3, #26]
 8008f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d014      	beq.n	8008f58 <tcp_receive+0x27c>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e013      	b.n	8008f5a <tcp_receive+0x27e>
 8008f32:	bf00      	nop
 8008f34:	08010b28 	.word	0x08010b28
 8008f38:	08010e58 	.word	0x08010e58
 8008f3c:	08010b74 	.word	0x08010b74
 8008f40:	08010e74 	.word	0x08010e74
 8008f44:	20008284 	.word	0x20008284
 8008f48:	20008278 	.word	0x20008278
 8008f4c:	2000827c 	.word	0x2000827c
 8008f50:	20008268 	.word	0x20008268
 8008f54:	20008282 	.word	0x20008282
 8008f58:	2302      	movs	r3, #2
 8008f5a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008f5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f68:	fb12 f303 	smulbb	r3, r2, r3
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f70:	4293      	cmp	r3, r2
 8008f72:	bf28      	it	cs
 8008f74:	4613      	movcs	r3, r2
 8008f76:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008f7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f80:	4413      	add	r3, r2
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d309      	bcc.n	8008fa2 <tcp_receive+0x2c6>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008f94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f96:	4413      	add	r3, r2
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008fa0:	e04e      	b.n	8009040 <tcp_receive+0x364>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fa8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008fac:	e048      	b.n	8009040 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008fb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fb6:	4413      	add	r3, r2
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d309      	bcc.n	8008fd8 <tcp_receive+0x2fc>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008fca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fcc:	4413      	add	r3, r2
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008fd6:	e004      	b.n	8008fe2 <tcp_receive+0x306>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d326      	bcc.n	8009040 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	b29a      	uxth	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009012:	4413      	add	r3, r2
 8009014:	b29a      	uxth	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800901c:	429a      	cmp	r2, r3
 800901e:	d30a      	bcc.n	8009036 <tcp_receive+0x35a>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800902a:	4413      	add	r3, r2
 800902c:	b29a      	uxth	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009034:	e004      	b.n	8009040 <tcp_receive+0x364>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800903c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009048:	4a98      	ldr	r2, [pc, #608]	; (80092ac <tcp_receive+0x5d0>)
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff fdca 	bl	8008be4 <tcp_free_acked_segments>
 8009050:	4602      	mov	r2, r0
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905e:	4a94      	ldr	r2, [pc, #592]	; (80092b0 <tcp_receive+0x5d4>)
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f7ff fdbf 	bl	8008be4 <tcp_free_acked_segments>
 8009066:	4602      	mov	r2, r0
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009070:	2b00      	cmp	r3, #0
 8009072:	d104      	bne.n	800907e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800907a:	861a      	strh	r2, [r3, #48]	; 0x30
 800907c:	e002      	b.n	8009084 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800908e:	2b00      	cmp	r3, #0
 8009090:	d103      	bne.n	800909a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80090a0:	4b84      	ldr	r3, [pc, #528]	; (80092b4 <tcp_receive+0x5d8>)
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	4413      	add	r3, r2
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	8b5b      	ldrh	r3, [r3, #26]
 80090b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d035      	beq.n	8009126 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d118      	bne.n	80090f4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00c      	beq.n	80090e4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fa ff27 	bl	8003f2a <lwip_htonl>
 80090dc:	4603      	mov	r3, r0
 80090de:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	dc20      	bgt.n	8009126 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	8b5b      	ldrh	r3, [r3, #26]
 80090e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80090f2:	e018      	b.n	8009126 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	4618      	mov	r0, r3
 8009102:	f7fa ff12 	bl	8003f2a <lwip_htonl>
 8009106:	4603      	mov	r3, r0
 8009108:	1ae3      	subs	r3, r4, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	dc0b      	bgt.n	8009126 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	8b5b      	ldrh	r3, [r3, #26]
 8009112:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009116:	b29a      	uxth	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800911c:	e003      	b.n	8009126 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f002 fbce 	bl	800b8c0 <tcp_send_empty_ack>
 8009124:	e000      	b.n	8009128 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009126:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912c:	2b00      	cmp	r3, #0
 800912e:	d05b      	beq.n	80091e8 <tcp_receive+0x50c>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009134:	4b60      	ldr	r3, [pc, #384]	; (80092b8 <tcp_receive+0x5dc>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	da54      	bge.n	80091e8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800913e:	4b5f      	ldr	r3, [pc, #380]	; (80092bc <tcp_receive+0x5e0>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	b29a      	uxth	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009148:	b29b      	uxth	r3, r3
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	b29b      	uxth	r3, r3
 800914e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009152:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800915c:	10db      	asrs	r3, r3, #3
 800915e:	b21b      	sxth	r3, r3
 8009160:	b29b      	uxth	r3, r3
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	b29b      	uxth	r3, r3
 8009166:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009170:	b29a      	uxth	r2, r3
 8009172:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009176:	4413      	add	r3, r2
 8009178:	b29b      	uxth	r3, r3
 800917a:	b21a      	sxth	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009180:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009184:	2b00      	cmp	r3, #0
 8009186:	da05      	bge.n	8009194 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009188:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800918c:	425b      	negs	r3, r3
 800918e:	b29b      	uxth	r3, r3
 8009190:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009194:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800919e:	109b      	asrs	r3, r3, #2
 80091a0:	b21b      	sxth	r3, r3
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80091b8:	4413      	add	r3, r2
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	b21a      	sxth	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80091c8:	10db      	asrs	r3, r3, #3
 80091ca:	b21b      	sxth	r3, r3
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	4413      	add	r3, r2
 80091d8:	b29b      	uxth	r3, r3
 80091da:	b21a      	sxth	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80091e8:	4b35      	ldr	r3, [pc, #212]	; (80092c0 <tcp_receive+0x5e4>)
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 84e2 	beq.w	8009bb6 <tcp_receive+0xeda>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	7d1b      	ldrb	r3, [r3, #20]
 80091f6:	2b06      	cmp	r3, #6
 80091f8:	f200 84dd 	bhi.w	8009bb6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009200:	4b30      	ldr	r3, [pc, #192]	; (80092c4 <tcp_receive+0x5e8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	3b01      	subs	r3, #1
 8009208:	2b00      	cmp	r3, #0
 800920a:	f2c0 808f 	blt.w	800932c <tcp_receive+0x650>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009212:	4b2b      	ldr	r3, [pc, #172]	; (80092c0 <tcp_receive+0x5e4>)
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	4619      	mov	r1, r3
 8009218:	4b2a      	ldr	r3, [pc, #168]	; (80092c4 <tcp_receive+0x5e8>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	440b      	add	r3, r1
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	3301      	adds	r3, #1
 8009222:	2b00      	cmp	r3, #0
 8009224:	f300 8082 	bgt.w	800932c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009228:	4b27      	ldr	r3, [pc, #156]	; (80092c8 <tcp_receive+0x5ec>)
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009232:	4b24      	ldr	r3, [pc, #144]	; (80092c4 <tcp_receive+0x5e8>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800923a:	4b23      	ldr	r3, [pc, #140]	; (80092c8 <tcp_receive+0x5ec>)
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d106      	bne.n	8009250 <tcp_receive+0x574>
 8009242:	4b22      	ldr	r3, [pc, #136]	; (80092cc <tcp_receive+0x5f0>)
 8009244:	f240 5294 	movw	r2, #1428	; 0x594
 8009248:	4921      	ldr	r1, [pc, #132]	; (80092d0 <tcp_receive+0x5f4>)
 800924a:	4822      	ldr	r0, [pc, #136]	; (80092d4 <tcp_receive+0x5f8>)
 800924c:	f005 fbf0 	bl	800ea30 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009256:	4293      	cmp	r3, r2
 8009258:	d906      	bls.n	8009268 <tcp_receive+0x58c>
 800925a:	4b1c      	ldr	r3, [pc, #112]	; (80092cc <tcp_receive+0x5f0>)
 800925c:	f240 5295 	movw	r2, #1429	; 0x595
 8009260:	491d      	ldr	r1, [pc, #116]	; (80092d8 <tcp_receive+0x5fc>)
 8009262:	481c      	ldr	r0, [pc, #112]	; (80092d4 <tcp_receive+0x5f8>)
 8009264:	f005 fbe4 	bl	800ea30 <iprintf>
      off = (u16_t)off32;
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800926e:	4b16      	ldr	r3, [pc, #88]	; (80092c8 <tcp_receive+0x5ec>)
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	891b      	ldrh	r3, [r3, #8]
 8009274:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009278:	429a      	cmp	r2, r3
 800927a:	d906      	bls.n	800928a <tcp_receive+0x5ae>
 800927c:	4b13      	ldr	r3, [pc, #76]	; (80092cc <tcp_receive+0x5f0>)
 800927e:	f240 5297 	movw	r2, #1431	; 0x597
 8009282:	4916      	ldr	r1, [pc, #88]	; (80092dc <tcp_receive+0x600>)
 8009284:	4813      	ldr	r0, [pc, #76]	; (80092d4 <tcp_receive+0x5f8>)
 8009286:	f005 fbd3 	bl	800ea30 <iprintf>
      inseg.len -= off;
 800928a:	4b0f      	ldr	r3, [pc, #60]	; (80092c8 <tcp_receive+0x5ec>)
 800928c:	891a      	ldrh	r2, [r3, #8]
 800928e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	b29a      	uxth	r2, r3
 8009296:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <tcp_receive+0x5ec>)
 8009298:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800929a:	4b0b      	ldr	r3, [pc, #44]	; (80092c8 <tcp_receive+0x5ec>)
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	891a      	ldrh	r2, [r3, #8]
 80092a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80092a8:	e02a      	b.n	8009300 <tcp_receive+0x624>
 80092aa:	bf00      	nop
 80092ac:	08010e90 	.word	0x08010e90
 80092b0:	08010e98 	.word	0x08010e98
 80092b4:	20008280 	.word	0x20008280
 80092b8:	2000827c 	.word	0x2000827c
 80092bc:	20008240 	.word	0x20008240
 80092c0:	20008282 	.word	0x20008282
 80092c4:	20008278 	.word	0x20008278
 80092c8:	20008258 	.word	0x20008258
 80092cc:	08010b28 	.word	0x08010b28
 80092d0:	08010ea0 	.word	0x08010ea0
 80092d4:	08010b74 	.word	0x08010b74
 80092d8:	08010eb0 	.word	0x08010eb0
 80092dc:	08010ec0 	.word	0x08010ec0
        off -= p->len;
 80092e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092e2:	895b      	ldrh	r3, [r3, #10]
 80092e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80092ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80092f2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80092f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092f6:	2200      	movs	r2, #0
 80092f8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80092fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009302:	895b      	ldrh	r3, [r3, #10]
 8009304:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009308:	429a      	cmp	r2, r3
 800930a:	d8e9      	bhi.n	80092e0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800930c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009310:	4619      	mov	r1, r3
 8009312:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009314:	f7fc f8cc 	bl	80054b0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931c:	4a91      	ldr	r2, [pc, #580]	; (8009564 <tcp_receive+0x888>)
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	4b91      	ldr	r3, [pc, #580]	; (8009568 <tcp_receive+0x88c>)
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	4a8f      	ldr	r2, [pc, #572]	; (8009564 <tcp_receive+0x888>)
 8009326:	6812      	ldr	r2, [r2, #0]
 8009328:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800932a:	e00d      	b.n	8009348 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800932c:	4b8d      	ldr	r3, [pc, #564]	; (8009564 <tcp_receive+0x888>)
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	da06      	bge.n	8009348 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	8b5b      	ldrh	r3, [r3, #26]
 800933e:	f043 0302 	orr.w	r3, r3, #2
 8009342:	b29a      	uxth	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009348:	4b86      	ldr	r3, [pc, #536]	; (8009564 <tcp_receive+0x888>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	f2c0 842a 	blt.w	8009bac <tcp_receive+0xed0>
 8009358:	4b82      	ldr	r3, [pc, #520]	; (8009564 <tcp_receive+0x888>)
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	6879      	ldr	r1, [r7, #4]
 8009362:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009364:	440b      	add	r3, r1
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	3301      	adds	r3, #1
 800936a:	2b00      	cmp	r3, #0
 800936c:	f300 841e 	bgt.w	8009bac <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009374:	4b7b      	ldr	r3, [pc, #492]	; (8009564 <tcp_receive+0x888>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	429a      	cmp	r2, r3
 800937a:	f040 829a 	bne.w	80098b2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800937e:	4b7a      	ldr	r3, [pc, #488]	; (8009568 <tcp_receive+0x88c>)
 8009380:	891c      	ldrh	r4, [r3, #8]
 8009382:	4b79      	ldr	r3, [pc, #484]	; (8009568 <tcp_receive+0x88c>)
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	899b      	ldrh	r3, [r3, #12]
 8009388:	b29b      	uxth	r3, r3
 800938a:	4618      	mov	r0, r3
 800938c:	f7fa fdb8 	bl	8003f00 <lwip_htons>
 8009390:	4603      	mov	r3, r0
 8009392:	b2db      	uxtb	r3, r3
 8009394:	f003 0303 	and.w	r3, r3, #3
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <tcp_receive+0x6c4>
 800939c:	2301      	movs	r3, #1
 800939e:	e000      	b.n	80093a2 <tcp_receive+0x6c6>
 80093a0:	2300      	movs	r3, #0
 80093a2:	4423      	add	r3, r4
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	4b71      	ldr	r3, [pc, #452]	; (800956c <tcp_receive+0x890>)
 80093a8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80093ae:	4b6f      	ldr	r3, [pc, #444]	; (800956c <tcp_receive+0x890>)
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d275      	bcs.n	80094a2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80093b6:	4b6c      	ldr	r3, [pc, #432]	; (8009568 <tcp_receive+0x88c>)
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	899b      	ldrh	r3, [r3, #12]
 80093bc:	b29b      	uxth	r3, r3
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fa fd9e 	bl	8003f00 <lwip_htons>
 80093c4:	4603      	mov	r3, r0
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	f003 0301 	and.w	r3, r3, #1
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d01f      	beq.n	8009410 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80093d0:	4b65      	ldr	r3, [pc, #404]	; (8009568 <tcp_receive+0x88c>)
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	899b      	ldrh	r3, [r3, #12]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	b21b      	sxth	r3, r3
 80093da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80093de:	b21c      	sxth	r4, r3
 80093e0:	4b61      	ldr	r3, [pc, #388]	; (8009568 <tcp_receive+0x88c>)
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	899b      	ldrh	r3, [r3, #12]
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fa fd89 	bl	8003f00 <lwip_htons>
 80093ee:	4603      	mov	r3, r0
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fa fd80 	bl	8003f00 <lwip_htons>
 8009400:	4603      	mov	r3, r0
 8009402:	b21b      	sxth	r3, r3
 8009404:	4323      	orrs	r3, r4
 8009406:	b21a      	sxth	r2, r3
 8009408:	4b57      	ldr	r3, [pc, #348]	; (8009568 <tcp_receive+0x88c>)
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	b292      	uxth	r2, r2
 800940e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009414:	4b54      	ldr	r3, [pc, #336]	; (8009568 <tcp_receive+0x88c>)
 8009416:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009418:	4b53      	ldr	r3, [pc, #332]	; (8009568 <tcp_receive+0x88c>)
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	899b      	ldrh	r3, [r3, #12]
 800941e:	b29b      	uxth	r3, r3
 8009420:	4618      	mov	r0, r3
 8009422:	f7fa fd6d 	bl	8003f00 <lwip_htons>
 8009426:	4603      	mov	r3, r0
 8009428:	b2db      	uxtb	r3, r3
 800942a:	f003 0302 	and.w	r3, r3, #2
 800942e:	2b00      	cmp	r3, #0
 8009430:	d005      	beq.n	800943e <tcp_receive+0x762>
            inseg.len -= 1;
 8009432:	4b4d      	ldr	r3, [pc, #308]	; (8009568 <tcp_receive+0x88c>)
 8009434:	891b      	ldrh	r3, [r3, #8]
 8009436:	3b01      	subs	r3, #1
 8009438:	b29a      	uxth	r2, r3
 800943a:	4b4b      	ldr	r3, [pc, #300]	; (8009568 <tcp_receive+0x88c>)
 800943c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800943e:	4b4a      	ldr	r3, [pc, #296]	; (8009568 <tcp_receive+0x88c>)
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	4a49      	ldr	r2, [pc, #292]	; (8009568 <tcp_receive+0x88c>)
 8009444:	8912      	ldrh	r2, [r2, #8]
 8009446:	4611      	mov	r1, r2
 8009448:	4618      	mov	r0, r3
 800944a:	f7fb ff31 	bl	80052b0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800944e:	4b46      	ldr	r3, [pc, #280]	; (8009568 <tcp_receive+0x88c>)
 8009450:	891c      	ldrh	r4, [r3, #8]
 8009452:	4b45      	ldr	r3, [pc, #276]	; (8009568 <tcp_receive+0x88c>)
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	899b      	ldrh	r3, [r3, #12]
 8009458:	b29b      	uxth	r3, r3
 800945a:	4618      	mov	r0, r3
 800945c:	f7fa fd50 	bl	8003f00 <lwip_htons>
 8009460:	4603      	mov	r3, r0
 8009462:	b2db      	uxtb	r3, r3
 8009464:	f003 0303 	and.w	r3, r3, #3
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <tcp_receive+0x794>
 800946c:	2301      	movs	r3, #1
 800946e:	e000      	b.n	8009472 <tcp_receive+0x796>
 8009470:	2300      	movs	r3, #0
 8009472:	4423      	add	r3, r4
 8009474:	b29a      	uxth	r2, r3
 8009476:	4b3d      	ldr	r3, [pc, #244]	; (800956c <tcp_receive+0x890>)
 8009478:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800947a:	4b3c      	ldr	r3, [pc, #240]	; (800956c <tcp_receive+0x890>)
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	4b38      	ldr	r3, [pc, #224]	; (8009564 <tcp_receive+0x888>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	441a      	add	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948a:	6879      	ldr	r1, [r7, #4]
 800948c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800948e:	440b      	add	r3, r1
 8009490:	429a      	cmp	r2, r3
 8009492:	d006      	beq.n	80094a2 <tcp_receive+0x7c6>
 8009494:	4b36      	ldr	r3, [pc, #216]	; (8009570 <tcp_receive+0x894>)
 8009496:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800949a:	4936      	ldr	r1, [pc, #216]	; (8009574 <tcp_receive+0x898>)
 800949c:	4836      	ldr	r0, [pc, #216]	; (8009578 <tcp_receive+0x89c>)
 800949e:	f005 fac7 	bl	800ea30 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 80e7 	beq.w	800967a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80094ac:	4b2e      	ldr	r3, [pc, #184]	; (8009568 <tcp_receive+0x88c>)
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	899b      	ldrh	r3, [r3, #12]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fa fd23 	bl	8003f00 <lwip_htons>
 80094ba:	4603      	mov	r3, r0
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d010      	beq.n	80094e8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80094c6:	e00a      	b.n	80094de <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094cc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f7fd fcac 	bl	8006e36 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1f0      	bne.n	80094c8 <tcp_receive+0x7ec>
 80094e6:	e0c8      	b.n	800967a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ec:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80094ee:	e052      	b.n	8009596 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80094f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	899b      	ldrh	r3, [r3, #12]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fa fd01 	bl	8003f00 <lwip_htons>
 80094fe:	4603      	mov	r3, r0
 8009500:	b2db      	uxtb	r3, r3
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	2b00      	cmp	r3, #0
 8009508:	d03d      	beq.n	8009586 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800950a:	4b17      	ldr	r3, [pc, #92]	; (8009568 <tcp_receive+0x88c>)
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	899b      	ldrh	r3, [r3, #12]
 8009510:	b29b      	uxth	r3, r3
 8009512:	4618      	mov	r0, r3
 8009514:	f7fa fcf4 	bl	8003f00 <lwip_htons>
 8009518:	4603      	mov	r3, r0
 800951a:	b2db      	uxtb	r3, r3
 800951c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009520:	2b00      	cmp	r3, #0
 8009522:	d130      	bne.n	8009586 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009524:	4b10      	ldr	r3, [pc, #64]	; (8009568 <tcp_receive+0x88c>)
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	899b      	ldrh	r3, [r3, #12]
 800952a:	b29c      	uxth	r4, r3
 800952c:	2001      	movs	r0, #1
 800952e:	f7fa fce7 	bl	8003f00 <lwip_htons>
 8009532:	4603      	mov	r3, r0
 8009534:	461a      	mov	r2, r3
 8009536:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <tcp_receive+0x88c>)
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	4322      	orrs	r2, r4
 800953c:	b292      	uxth	r2, r2
 800953e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009540:	4b09      	ldr	r3, [pc, #36]	; (8009568 <tcp_receive+0x88c>)
 8009542:	891c      	ldrh	r4, [r3, #8]
 8009544:	4b08      	ldr	r3, [pc, #32]	; (8009568 <tcp_receive+0x88c>)
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	899b      	ldrh	r3, [r3, #12]
 800954a:	b29b      	uxth	r3, r3
 800954c:	4618      	mov	r0, r3
 800954e:	f7fa fcd7 	bl	8003f00 <lwip_htons>
 8009552:	4603      	mov	r3, r0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	f003 0303 	and.w	r3, r3, #3
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00e      	beq.n	800957c <tcp_receive+0x8a0>
 800955e:	2301      	movs	r3, #1
 8009560:	e00d      	b.n	800957e <tcp_receive+0x8a2>
 8009562:	bf00      	nop
 8009564:	20008278 	.word	0x20008278
 8009568:	20008258 	.word	0x20008258
 800956c:	20008282 	.word	0x20008282
 8009570:	08010b28 	.word	0x08010b28
 8009574:	08010ed0 	.word	0x08010ed0
 8009578:	08010b74 	.word	0x08010b74
 800957c:	2300      	movs	r3, #0
 800957e:	4423      	add	r3, r4
 8009580:	b29a      	uxth	r2, r3
 8009582:	4b98      	ldr	r3, [pc, #608]	; (80097e4 <tcp_receive+0xb08>)
 8009584:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009588:	613b      	str	r3, [r7, #16]
              next = next->next;
 800958a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009590:	6938      	ldr	r0, [r7, #16]
 8009592:	f7fd fc50 	bl	8006e36 <tcp_seg_free>
            while (next &&
 8009596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00e      	beq.n	80095ba <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800959c:	4b91      	ldr	r3, [pc, #580]	; (80097e4 <tcp_receive+0xb08>)
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	4b91      	ldr	r3, [pc, #580]	; (80097e8 <tcp_receive+0xb0c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	441a      	add	r2, r3
 80095a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095b0:	8909      	ldrh	r1, [r1, #8]
 80095b2:	440b      	add	r3, r1
 80095b4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	da9a      	bge.n	80094f0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80095ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d059      	beq.n	8009674 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80095c0:	4b88      	ldr	r3, [pc, #544]	; (80097e4 <tcp_receive+0xb08>)
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	461a      	mov	r2, r3
 80095c6:	4b88      	ldr	r3, [pc, #544]	; (80097e8 <tcp_receive+0xb0c>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	441a      	add	r2, r3
 80095cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dd4d      	ble.n	8009674 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80095d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	b29a      	uxth	r2, r3
 80095e0:	4b81      	ldr	r3, [pc, #516]	; (80097e8 <tcp_receive+0xb0c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	4b80      	ldr	r3, [pc, #512]	; (80097ec <tcp_receive+0xb10>)
 80095ec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80095ee:	4b7f      	ldr	r3, [pc, #508]	; (80097ec <tcp_receive+0xb10>)
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	899b      	ldrh	r3, [r3, #12]
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fa fc82 	bl	8003f00 <lwip_htons>
 80095fc:	4603      	mov	r3, r0
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	f003 0302 	and.w	r3, r3, #2
 8009604:	2b00      	cmp	r3, #0
 8009606:	d005      	beq.n	8009614 <tcp_receive+0x938>
                inseg.len -= 1;
 8009608:	4b78      	ldr	r3, [pc, #480]	; (80097ec <tcp_receive+0xb10>)
 800960a:	891b      	ldrh	r3, [r3, #8]
 800960c:	3b01      	subs	r3, #1
 800960e:	b29a      	uxth	r2, r3
 8009610:	4b76      	ldr	r3, [pc, #472]	; (80097ec <tcp_receive+0xb10>)
 8009612:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009614:	4b75      	ldr	r3, [pc, #468]	; (80097ec <tcp_receive+0xb10>)
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	4a74      	ldr	r2, [pc, #464]	; (80097ec <tcp_receive+0xb10>)
 800961a:	8912      	ldrh	r2, [r2, #8]
 800961c:	4611      	mov	r1, r2
 800961e:	4618      	mov	r0, r3
 8009620:	f7fb fe46 	bl	80052b0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009624:	4b71      	ldr	r3, [pc, #452]	; (80097ec <tcp_receive+0xb10>)
 8009626:	891c      	ldrh	r4, [r3, #8]
 8009628:	4b70      	ldr	r3, [pc, #448]	; (80097ec <tcp_receive+0xb10>)
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	899b      	ldrh	r3, [r3, #12]
 800962e:	b29b      	uxth	r3, r3
 8009630:	4618      	mov	r0, r3
 8009632:	f7fa fc65 	bl	8003f00 <lwip_htons>
 8009636:	4603      	mov	r3, r0
 8009638:	b2db      	uxtb	r3, r3
 800963a:	f003 0303 	and.w	r3, r3, #3
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <tcp_receive+0x96a>
 8009642:	2301      	movs	r3, #1
 8009644:	e000      	b.n	8009648 <tcp_receive+0x96c>
 8009646:	2300      	movs	r3, #0
 8009648:	4423      	add	r3, r4
 800964a:	b29a      	uxth	r2, r3
 800964c:	4b65      	ldr	r3, [pc, #404]	; (80097e4 <tcp_receive+0xb08>)
 800964e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009650:	4b64      	ldr	r3, [pc, #400]	; (80097e4 <tcp_receive+0xb08>)
 8009652:	881b      	ldrh	r3, [r3, #0]
 8009654:	461a      	mov	r2, r3
 8009656:	4b64      	ldr	r3, [pc, #400]	; (80097e8 <tcp_receive+0xb0c>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	441a      	add	r2, r3
 800965c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	429a      	cmp	r2, r3
 8009664:	d006      	beq.n	8009674 <tcp_receive+0x998>
 8009666:	4b62      	ldr	r3, [pc, #392]	; (80097f0 <tcp_receive+0xb14>)
 8009668:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800966c:	4961      	ldr	r1, [pc, #388]	; (80097f4 <tcp_receive+0xb18>)
 800966e:	4862      	ldr	r0, [pc, #392]	; (80097f8 <tcp_receive+0xb1c>)
 8009670:	f005 f9de 	bl	800ea30 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009678:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800967a:	4b5a      	ldr	r3, [pc, #360]	; (80097e4 <tcp_receive+0xb08>)
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	4b59      	ldr	r3, [pc, #356]	; (80097e8 <tcp_receive+0xb0c>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	441a      	add	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800968e:	4b55      	ldr	r3, [pc, #340]	; (80097e4 <tcp_receive+0xb08>)
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d206      	bcs.n	80096a4 <tcp_receive+0x9c8>
 8009696:	4b56      	ldr	r3, [pc, #344]	; (80097f0 <tcp_receive+0xb14>)
 8009698:	f240 6207 	movw	r2, #1543	; 0x607
 800969c:	4957      	ldr	r1, [pc, #348]	; (80097fc <tcp_receive+0xb20>)
 800969e:	4856      	ldr	r0, [pc, #344]	; (80097f8 <tcp_receive+0xb1c>)
 80096a0:	f005 f9c6 	bl	800ea30 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80096a8:	4b4e      	ldr	r3, [pc, #312]	; (80097e4 <tcp_receive+0xb08>)
 80096aa:	881b      	ldrh	r3, [r3, #0]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7fc fe99 	bl	80063ec <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80096ba:	4b4c      	ldr	r3, [pc, #304]	; (80097ec <tcp_receive+0xb10>)
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	891b      	ldrh	r3, [r3, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d006      	beq.n	80096d2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80096c4:	4b49      	ldr	r3, [pc, #292]	; (80097ec <tcp_receive+0xb10>)
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	4a4d      	ldr	r2, [pc, #308]	; (8009800 <tcp_receive+0xb24>)
 80096ca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80096cc:	4b47      	ldr	r3, [pc, #284]	; (80097ec <tcp_receive+0xb10>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80096d2:	4b46      	ldr	r3, [pc, #280]	; (80097ec <tcp_receive+0xb10>)
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	899b      	ldrh	r3, [r3, #12]
 80096d8:	b29b      	uxth	r3, r3
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fa fc10 	bl	8003f00 <lwip_htons>
 80096e0:	4603      	mov	r3, r0
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 80b8 	beq.w	800985e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80096ee:	4b45      	ldr	r3, [pc, #276]	; (8009804 <tcp_receive+0xb28>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	f043 0320 	orr.w	r3, r3, #32
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	4b42      	ldr	r3, [pc, #264]	; (8009804 <tcp_receive+0xb28>)
 80096fa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80096fc:	e0af      	b.n	800985e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009702:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	4a36      	ldr	r2, [pc, #216]	; (80097e8 <tcp_receive+0xb0c>)
 800970e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	891b      	ldrh	r3, [r3, #8]
 8009714:	461c      	mov	r4, r3
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	899b      	ldrh	r3, [r3, #12]
 800971c:	b29b      	uxth	r3, r3
 800971e:	4618      	mov	r0, r3
 8009720:	f7fa fbee 	bl	8003f00 <lwip_htons>
 8009724:	4603      	mov	r3, r0
 8009726:	b2db      	uxtb	r3, r3
 8009728:	f003 0303 	and.w	r3, r3, #3
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <tcp_receive+0xa58>
 8009730:	2301      	movs	r3, #1
 8009732:	e000      	b.n	8009736 <tcp_receive+0xa5a>
 8009734:	2300      	movs	r3, #0
 8009736:	191a      	adds	r2, r3, r4
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973c:	441a      	add	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009746:	461c      	mov	r4, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	891b      	ldrh	r3, [r3, #8]
 800974c:	461d      	mov	r5, r3
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	899b      	ldrh	r3, [r3, #12]
 8009754:	b29b      	uxth	r3, r3
 8009756:	4618      	mov	r0, r3
 8009758:	f7fa fbd2 	bl	8003f00 <lwip_htons>
 800975c:	4603      	mov	r3, r0
 800975e:	b2db      	uxtb	r3, r3
 8009760:	f003 0303 	and.w	r3, r3, #3
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <tcp_receive+0xa90>
 8009768:	2301      	movs	r3, #1
 800976a:	e000      	b.n	800976e <tcp_receive+0xa92>
 800976c:	2300      	movs	r3, #0
 800976e:	442b      	add	r3, r5
 8009770:	429c      	cmp	r4, r3
 8009772:	d206      	bcs.n	8009782 <tcp_receive+0xaa6>
 8009774:	4b1e      	ldr	r3, [pc, #120]	; (80097f0 <tcp_receive+0xb14>)
 8009776:	f240 622b 	movw	r2, #1579	; 0x62b
 800977a:	4923      	ldr	r1, [pc, #140]	; (8009808 <tcp_receive+0xb2c>)
 800977c:	481e      	ldr	r0, [pc, #120]	; (80097f8 <tcp_receive+0xb1c>)
 800977e:	f005 f957 	bl	800ea30 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	891b      	ldrh	r3, [r3, #8]
 8009786:	461c      	mov	r4, r3
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	899b      	ldrh	r3, [r3, #12]
 800978e:	b29b      	uxth	r3, r3
 8009790:	4618      	mov	r0, r3
 8009792:	f7fa fbb5 	bl	8003f00 <lwip_htons>
 8009796:	4603      	mov	r3, r0
 8009798:	b2db      	uxtb	r3, r3
 800979a:	f003 0303 	and.w	r3, r3, #3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <tcp_receive+0xaca>
 80097a2:	2301      	movs	r3, #1
 80097a4:	e000      	b.n	80097a8 <tcp_receive+0xacc>
 80097a6:	2300      	movs	r3, #0
 80097a8:	1919      	adds	r1, r3, r4
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80097ae:	b28b      	uxth	r3, r1
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7fc fe17 	bl	80063ec <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	891b      	ldrh	r3, [r3, #8]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d028      	beq.n	800981a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80097c8:	4b0d      	ldr	r3, [pc, #52]	; (8009800 <tcp_receive+0xb24>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d01d      	beq.n	800980c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80097d0:	4b0b      	ldr	r3, [pc, #44]	; (8009800 <tcp_receive+0xb24>)
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	4619      	mov	r1, r3
 80097da:	4610      	mov	r0, r2
 80097dc:	f7fb ffb0 	bl	8005740 <pbuf_cat>
 80097e0:	e018      	b.n	8009814 <tcp_receive+0xb38>
 80097e2:	bf00      	nop
 80097e4:	20008282 	.word	0x20008282
 80097e8:	20008278 	.word	0x20008278
 80097ec:	20008258 	.word	0x20008258
 80097f0:	08010b28 	.word	0x08010b28
 80097f4:	08010f08 	.word	0x08010f08
 80097f8:	08010b74 	.word	0x08010b74
 80097fc:	08010f44 	.word	0x08010f44
 8009800:	20008288 	.word	0x20008288
 8009804:	20008285 	.word	0x20008285
 8009808:	08010f64 	.word	0x08010f64
            } else {
              recv_data = cseg->p;
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	4a70      	ldr	r2, [pc, #448]	; (80099d4 <tcp_receive+0xcf8>)
 8009812:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2200      	movs	r2, #0
 8009818:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	899b      	ldrh	r3, [r3, #12]
 8009820:	b29b      	uxth	r3, r3
 8009822:	4618      	mov	r0, r3
 8009824:	f7fa fb6c 	bl	8003f00 <lwip_htons>
 8009828:	4603      	mov	r3, r0
 800982a:	b2db      	uxtb	r3, r3
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00d      	beq.n	8009850 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009834:	4b68      	ldr	r3, [pc, #416]	; (80099d8 <tcp_receive+0xcfc>)
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	f043 0320 	orr.w	r3, r3, #32
 800983c:	b2da      	uxtb	r2, r3
 800983e:	4b66      	ldr	r3, [pc, #408]	; (80099d8 <tcp_receive+0xcfc>)
 8009840:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	7d1b      	ldrb	r3, [r3, #20]
 8009846:	2b04      	cmp	r3, #4
 8009848:	d102      	bne.n	8009850 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2207      	movs	r2, #7
 800984e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009858:	68b8      	ldr	r0, [r7, #8]
 800985a:	f7fd faec 	bl	8006e36 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009862:	2b00      	cmp	r3, #0
 8009864:	d008      	beq.n	8009878 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	685a      	ldr	r2, [r3, #4]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009872:	429a      	cmp	r2, r3
 8009874:	f43f af43 	beq.w	80096fe <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	8b5b      	ldrh	r3, [r3, #26]
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00e      	beq.n	80098a2 <tcp_receive+0xbc6>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	8b5b      	ldrh	r3, [r3, #26]
 8009888:	f023 0301 	bic.w	r3, r3, #1
 800988c:	b29a      	uxth	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	835a      	strh	r2, [r3, #26]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	8b5b      	ldrh	r3, [r3, #26]
 8009896:	f043 0302 	orr.w	r3, r3, #2
 800989a:	b29a      	uxth	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80098a0:	e188      	b.n	8009bb4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	8b5b      	ldrh	r3, [r3, #26]
 80098a6:	f043 0301 	orr.w	r3, r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80098b0:	e180      	b.n	8009bb4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d106      	bne.n	80098c8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80098ba:	4848      	ldr	r0, [pc, #288]	; (80099dc <tcp_receive+0xd00>)
 80098bc:	f7fd faf2 	bl	8006ea4 <tcp_seg_copy>
 80098c0:	4602      	mov	r2, r0
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	675a      	str	r2, [r3, #116]	; 0x74
 80098c6:	e16d      	b.n	8009ba4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80098c8:	2300      	movs	r3, #0
 80098ca:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80098d2:	e157      	b.n	8009b84 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80098d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	4b41      	ldr	r3, [pc, #260]	; (80099e0 <tcp_receive+0xd04>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d11d      	bne.n	800991e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80098e2:	4b3e      	ldr	r3, [pc, #248]	; (80099dc <tcp_receive+0xd00>)
 80098e4:	891a      	ldrh	r2, [r3, #8]
 80098e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e8:	891b      	ldrh	r3, [r3, #8]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	f240 814f 	bls.w	8009b8e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80098f0:	483a      	ldr	r0, [pc, #232]	; (80099dc <tcp_receive+0xd00>)
 80098f2:	f7fd fad7 	bl	8006ea4 <tcp_seg_copy>
 80098f6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f000 8149 	beq.w	8009b92 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <tcp_receive+0xc32>
                    prev->next = cseg;
 8009906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	e002      	b.n	8009914 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009914:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009916:	6978      	ldr	r0, [r7, #20]
 8009918:	f7ff f8dc 	bl	8008ad4 <tcp_oos_insert_segment>
                }
                break;
 800991c:	e139      	b.n	8009b92 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800991e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009920:	2b00      	cmp	r3, #0
 8009922:	d117      	bne.n	8009954 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009924:	4b2e      	ldr	r3, [pc, #184]	; (80099e0 <tcp_receive+0xd04>)
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	da57      	bge.n	80099e4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009934:	4829      	ldr	r0, [pc, #164]	; (80099dc <tcp_receive+0xd00>)
 8009936:	f7fd fab5 	bl	8006ea4 <tcp_seg_copy>
 800993a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	2b00      	cmp	r3, #0
 8009940:	f000 8129 	beq.w	8009b96 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	69ba      	ldr	r2, [r7, #24]
 8009948:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800994a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800994c:	69b8      	ldr	r0, [r7, #24]
 800994e:	f7ff f8c1 	bl	8008ad4 <tcp_oos_insert_segment>
                  }
                  break;
 8009952:	e120      	b.n	8009b96 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009954:	4b22      	ldr	r3, [pc, #136]	; (80099e0 <tcp_receive+0xd04>)
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	3b01      	subs	r3, #1
 8009962:	2b00      	cmp	r3, #0
 8009964:	db3e      	blt.n	80099e4 <tcp_receive+0xd08>
 8009966:	4b1e      	ldr	r3, [pc, #120]	; (80099e0 <tcp_receive+0xd04>)
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	3301      	adds	r3, #1
 8009974:	2b00      	cmp	r3, #0
 8009976:	dc35      	bgt.n	80099e4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009978:	4818      	ldr	r0, [pc, #96]	; (80099dc <tcp_receive+0xd00>)
 800997a:	f7fd fa93 	bl	8006ea4 <tcp_seg_copy>
 800997e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 8109 	beq.w	8009b9a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009990:	8912      	ldrh	r2, [r2, #8]
 8009992:	441a      	add	r2, r3
 8009994:	4b12      	ldr	r3, [pc, #72]	; (80099e0 <tcp_receive+0xd04>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	2b00      	cmp	r3, #0
 800999c:	dd12      	ble.n	80099c4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800999e:	4b10      	ldr	r3, [pc, #64]	; (80099e0 <tcp_receive+0xd04>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80099b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b6:	685a      	ldr	r2, [r3, #4]
 80099b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ba:	891b      	ldrh	r3, [r3, #8]
 80099bc:	4619      	mov	r1, r3
 80099be:	4610      	mov	r0, r2
 80099c0:	f7fb fc76 	bl	80052b0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80099c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80099ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099cc:	69f8      	ldr	r0, [r7, #28]
 80099ce:	f7ff f881 	bl	8008ad4 <tcp_oos_insert_segment>
                  }
                  break;
 80099d2:	e0e2      	b.n	8009b9a <tcp_receive+0xebe>
 80099d4:	20008288 	.word	0x20008288
 80099d8:	20008285 	.word	0x20008285
 80099dc:	20008258 	.word	0x20008258
 80099e0:	20008278 	.word	0x20008278
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80099e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f040 80c6 	bne.w	8009b7e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80099f2:	4b80      	ldr	r3, [pc, #512]	; (8009bf4 <tcp_receive+0xf18>)
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f340 80bd 	ble.w	8009b7e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	899b      	ldrh	r3, [r3, #12]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fa fa77 	bl	8003f00 <lwip_htons>
 8009a12:	4603      	mov	r3, r0
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f040 80bf 	bne.w	8009b9e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009a20:	4875      	ldr	r0, [pc, #468]	; (8009bf8 <tcp_receive+0xf1c>)
 8009a22:	f7fd fa3f 	bl	8006ea4 <tcp_seg_copy>
 8009a26:	4602      	mov	r2, r0
 8009a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 80b6 	beq.w	8009ba2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a3e:	8912      	ldrh	r2, [r2, #8]
 8009a40:	441a      	add	r2, r3
 8009a42:	4b6c      	ldr	r3, [pc, #432]	; (8009bf4 <tcp_receive+0xf18>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	dd12      	ble.n	8009a72 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009a4c:	4b69      	ldr	r3, [pc, #420]	; (8009bf4 <tcp_receive+0xf18>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	685a      	ldr	r2, [r3, #4]
 8009a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a68:	891b      	ldrh	r3, [r3, #8]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	f7fb fc1f 	bl	80052b0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009a72:	4b62      	ldr	r3, [pc, #392]	; (8009bfc <tcp_receive+0xf20>)
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	4b5e      	ldr	r3, [pc, #376]	; (8009bf4 <tcp_receive+0xf18>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	441a      	add	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a82:	6879      	ldr	r1, [r7, #4]
 8009a84:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a86:	440b      	add	r3, r1
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f340 8089 	ble.w	8009ba2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	899b      	ldrh	r3, [r3, #12]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fa fa30 	bl	8003f00 <lwip_htons>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	f003 0301 	and.w	r3, r3, #1
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d022      	beq.n	8009af2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	899b      	ldrh	r3, [r3, #12]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	b21b      	sxth	r3, r3
 8009ab8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009abc:	b21c      	sxth	r4, r3
 8009abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	899b      	ldrh	r3, [r3, #12]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fa fa19 	bl	8003f00 <lwip_htons>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fa fa10 	bl	8003f00 <lwip_htons>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	b21b      	sxth	r3, r3
 8009ae4:	4323      	orrs	r3, r4
 8009ae6:	b21a      	sxth	r2, r3
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	b292      	uxth	r2, r2
 8009af0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009afc:	4413      	add	r3, r2
 8009afe:	b299      	uxth	r1, r3
 8009b00:	4b3c      	ldr	r3, [pc, #240]	; (8009bf4 <tcp_receive+0xf18>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	1a8a      	subs	r2, r1, r2
 8009b0c:	b292      	uxth	r2, r2
 8009b0e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	891b      	ldrh	r3, [r3, #8]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4610      	mov	r0, r2
 8009b20:	f7fb fbc6 	bl	80052b0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	891c      	ldrh	r4, [r3, #8]
 8009b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	899b      	ldrh	r3, [r3, #12]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fa f9e3 	bl	8003f00 <lwip_htons>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	f003 0303 	and.w	r3, r3, #3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <tcp_receive+0xe6e>
 8009b46:	2301      	movs	r3, #1
 8009b48:	e000      	b.n	8009b4c <tcp_receive+0xe70>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	4423      	add	r3, r4
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	4b2a      	ldr	r3, [pc, #168]	; (8009bfc <tcp_receive+0xf20>)
 8009b52:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009b54:	4b29      	ldr	r3, [pc, #164]	; (8009bfc <tcp_receive+0xf20>)
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	4b26      	ldr	r3, [pc, #152]	; (8009bf4 <tcp_receive+0xf18>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	441a      	add	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	6879      	ldr	r1, [r7, #4]
 8009b66:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b68:	440b      	add	r3, r1
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d019      	beq.n	8009ba2 <tcp_receive+0xec6>
 8009b6e:	4b24      	ldr	r3, [pc, #144]	; (8009c00 <tcp_receive+0xf24>)
 8009b70:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009b74:	4923      	ldr	r1, [pc, #140]	; (8009c04 <tcp_receive+0xf28>)
 8009b76:	4824      	ldr	r0, [pc, #144]	; (8009c08 <tcp_receive+0xf2c>)
 8009b78:	f004 ff5a 	bl	800ea30 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009b7c:	e011      	b.n	8009ba2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f47f aea4 	bne.w	80098d4 <tcp_receive+0xbf8>
 8009b8c:	e00a      	b.n	8009ba4 <tcp_receive+0xec8>
                break;
 8009b8e:	bf00      	nop
 8009b90:	e008      	b.n	8009ba4 <tcp_receive+0xec8>
                break;
 8009b92:	bf00      	nop
 8009b94:	e006      	b.n	8009ba4 <tcp_receive+0xec8>
                  break;
 8009b96:	bf00      	nop
 8009b98:	e004      	b.n	8009ba4 <tcp_receive+0xec8>
                  break;
 8009b9a:	bf00      	nop
 8009b9c:	e002      	b.n	8009ba4 <tcp_receive+0xec8>
                  break;
 8009b9e:	bf00      	nop
 8009ba0:	e000      	b.n	8009ba4 <tcp_receive+0xec8>
                break;
 8009ba2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f001 fe8b 	bl	800b8c0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009baa:	e003      	b.n	8009bb4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f001 fe87 	bl	800b8c0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009bb2:	e01a      	b.n	8009bea <tcp_receive+0xf0e>
 8009bb4:	e019      	b.n	8009bea <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009bb6:	4b0f      	ldr	r3, [pc, #60]	; (8009bf4 <tcp_receive+0xf18>)
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	db0a      	blt.n	8009bda <tcp_receive+0xefe>
 8009bc4:	4b0b      	ldr	r3, [pc, #44]	; (8009bf4 <tcp_receive+0xf18>)
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bcc:	6879      	ldr	r1, [r7, #4]
 8009bce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009bd0:	440b      	add	r3, r1
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	dd07      	ble.n	8009bea <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	8b5b      	ldrh	r3, [r3, #26]
 8009bde:	f043 0302 	orr.w	r3, r3, #2
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009be8:	e7ff      	b.n	8009bea <tcp_receive+0xf0e>
 8009bea:	bf00      	nop
 8009bec:	3750      	adds	r7, #80	; 0x50
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20008278 	.word	0x20008278
 8009bf8:	20008258 	.word	0x20008258
 8009bfc:	20008282 	.word	0x20008282
 8009c00:	08010b28 	.word	0x08010b28
 8009c04:	08010ed0 	.word	0x08010ed0
 8009c08:	08010b74 	.word	0x08010b74

08009c0c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009c12:	4b15      	ldr	r3, [pc, #84]	; (8009c68 <tcp_get_next_optbyte+0x5c>)
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	b291      	uxth	r1, r2
 8009c1a:	4a13      	ldr	r2, [pc, #76]	; (8009c68 <tcp_get_next_optbyte+0x5c>)
 8009c1c:	8011      	strh	r1, [r2, #0]
 8009c1e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009c20:	4b12      	ldr	r3, [pc, #72]	; (8009c6c <tcp_get_next_optbyte+0x60>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d004      	beq.n	8009c32 <tcp_get_next_optbyte+0x26>
 8009c28:	4b11      	ldr	r3, [pc, #68]	; (8009c70 <tcp_get_next_optbyte+0x64>)
 8009c2a:	881b      	ldrh	r3, [r3, #0]
 8009c2c:	88fa      	ldrh	r2, [r7, #6]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d208      	bcs.n	8009c44 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009c32:	4b10      	ldr	r3, [pc, #64]	; (8009c74 <tcp_get_next_optbyte+0x68>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3314      	adds	r3, #20
 8009c38:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009c3a:	88fb      	ldrh	r3, [r7, #6]
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	4413      	add	r3, r2
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	e00b      	b.n	8009c5c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009c44:	88fb      	ldrh	r3, [r7, #6]
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	4b09      	ldr	r3, [pc, #36]	; (8009c70 <tcp_get_next_optbyte+0x64>)
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009c52:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <tcp_get_next_optbyte+0x60>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	797b      	ldrb	r3, [r7, #5]
 8009c58:	4413      	add	r3, r2
 8009c5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	20008274 	.word	0x20008274
 8009c6c:	20008270 	.word	0x20008270
 8009c70:	2000826e 	.word	0x2000826e
 8009c74:	20008268 	.word	0x20008268

08009c78 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d106      	bne.n	8009c94 <tcp_parseopt+0x1c>
 8009c86:	4b32      	ldr	r3, [pc, #200]	; (8009d50 <tcp_parseopt+0xd8>)
 8009c88:	f240 727d 	movw	r2, #1917	; 0x77d
 8009c8c:	4931      	ldr	r1, [pc, #196]	; (8009d54 <tcp_parseopt+0xdc>)
 8009c8e:	4832      	ldr	r0, [pc, #200]	; (8009d58 <tcp_parseopt+0xe0>)
 8009c90:	f004 fece 	bl	800ea30 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009c94:	4b31      	ldr	r3, [pc, #196]	; (8009d5c <tcp_parseopt+0xe4>)
 8009c96:	881b      	ldrh	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d055      	beq.n	8009d48 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009c9c:	4b30      	ldr	r3, [pc, #192]	; (8009d60 <tcp_parseopt+0xe8>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	801a      	strh	r2, [r3, #0]
 8009ca2:	e045      	b.n	8009d30 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009ca4:	f7ff ffb2 	bl	8009c0c <tcp_get_next_optbyte>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d006      	beq.n	8009cc0 <tcp_parseopt+0x48>
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	dc2b      	bgt.n	8009d0e <tcp_parseopt+0x96>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d041      	beq.n	8009d3e <tcp_parseopt+0xc6>
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d127      	bne.n	8009d0e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009cbe:	e037      	b.n	8009d30 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009cc0:	f7ff ffa4 	bl	8009c0c <tcp_get_next_optbyte>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b04      	cmp	r3, #4
 8009cc8:	d13b      	bne.n	8009d42 <tcp_parseopt+0xca>
 8009cca:	4b25      	ldr	r3, [pc, #148]	; (8009d60 <tcp_parseopt+0xe8>)
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	4a22      	ldr	r2, [pc, #136]	; (8009d5c <tcp_parseopt+0xe4>)
 8009cd2:	8812      	ldrh	r2, [r2, #0]
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	da34      	bge.n	8009d42 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009cd8:	f7ff ff98 	bl	8009c0c <tcp_get_next_optbyte>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	021b      	lsls	r3, r3, #8
 8009ce2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009ce4:	f7ff ff92 	bl	8009c0c <tcp_get_next_optbyte>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	89bb      	ldrh	r3, [r7, #12]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009cf2:	89bb      	ldrh	r3, [r7, #12]
 8009cf4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009cf8:	d804      	bhi.n	8009d04 <tcp_parseopt+0x8c>
 8009cfa:	89bb      	ldrh	r3, [r7, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <tcp_parseopt+0x8c>
 8009d00:	89ba      	ldrh	r2, [r7, #12]
 8009d02:	e001      	b.n	8009d08 <tcp_parseopt+0x90>
 8009d04:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009d0c:	e010      	b.n	8009d30 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009d0e:	f7ff ff7d 	bl	8009c0c <tcp_get_next_optbyte>
 8009d12:	4603      	mov	r3, r0
 8009d14:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009d16:	7afb      	ldrb	r3, [r7, #11]
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d914      	bls.n	8009d46 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009d1c:	7afb      	ldrb	r3, [r7, #11]
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	4b0f      	ldr	r3, [pc, #60]	; (8009d60 <tcp_parseopt+0xe8>)
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	4413      	add	r3, r2
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	3b02      	subs	r3, #2
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	4b0c      	ldr	r3, [pc, #48]	; (8009d60 <tcp_parseopt+0xe8>)
 8009d2e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009d30:	4b0b      	ldr	r3, [pc, #44]	; (8009d60 <tcp_parseopt+0xe8>)
 8009d32:	881a      	ldrh	r2, [r3, #0]
 8009d34:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <tcp_parseopt+0xe4>)
 8009d36:	881b      	ldrh	r3, [r3, #0]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d3b3      	bcc.n	8009ca4 <tcp_parseopt+0x2c>
 8009d3c:	e004      	b.n	8009d48 <tcp_parseopt+0xd0>
          return;
 8009d3e:	bf00      	nop
 8009d40:	e002      	b.n	8009d48 <tcp_parseopt+0xd0>
            return;
 8009d42:	bf00      	nop
 8009d44:	e000      	b.n	8009d48 <tcp_parseopt+0xd0>
            return;
 8009d46:	bf00      	nop
      }
    }
  }
}
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	08010b28 	.word	0x08010b28
 8009d54:	08010f8c 	.word	0x08010f8c
 8009d58:	08010b74 	.word	0x08010b74
 8009d5c:	2000826c 	.word	0x2000826c
 8009d60:	20008274 	.word	0x20008274

08009d64 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009d64:	b480      	push	{r7}
 8009d66:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009d68:	4b05      	ldr	r3, [pc, #20]	; (8009d80 <tcp_trigger_input_pcb_close+0x1c>)
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	f043 0310 	orr.w	r3, r3, #16
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	4b03      	ldr	r3, [pc, #12]	; (8009d80 <tcp_trigger_input_pcb_close+0x1c>)
 8009d74:	701a      	strb	r2, [r3, #0]
}
 8009d76:	bf00      	nop
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	20008285 	.word	0x20008285

08009d84 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00a      	beq.n	8009dac <tcp_route+0x28>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	7a1b      	ldrb	r3, [r3, #8]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d006      	beq.n	8009dac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	7a1b      	ldrb	r3, [r3, #8]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fb f8aa 	bl	8004efc <netif_get_by_index>
 8009da8:	4603      	mov	r3, r0
 8009daa:	e003      	b.n	8009db4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f003 fad5 	bl	800d35c <ip4_route>
 8009db2:	4603      	mov	r3, r0
  }
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009dbc:	b590      	push	{r4, r7, lr}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	603b      	str	r3, [r7, #0]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d105      	bne.n	8009dde <tcp_create_segment+0x22>
 8009dd2:	4b44      	ldr	r3, [pc, #272]	; (8009ee4 <tcp_create_segment+0x128>)
 8009dd4:	22a3      	movs	r2, #163	; 0xa3
 8009dd6:	4944      	ldr	r1, [pc, #272]	; (8009ee8 <tcp_create_segment+0x12c>)
 8009dd8:	4844      	ldr	r0, [pc, #272]	; (8009eec <tcp_create_segment+0x130>)
 8009dda:	f004 fe29 	bl	800ea30 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d105      	bne.n	8009df0 <tcp_create_segment+0x34>
 8009de4:	4b3f      	ldr	r3, [pc, #252]	; (8009ee4 <tcp_create_segment+0x128>)
 8009de6:	22a4      	movs	r2, #164	; 0xa4
 8009de8:	4941      	ldr	r1, [pc, #260]	; (8009ef0 <tcp_create_segment+0x134>)
 8009dea:	4840      	ldr	r0, [pc, #256]	; (8009eec <tcp_create_segment+0x130>)
 8009dec:	f004 fe20 	bl	800ea30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009df0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	f003 0304 	and.w	r3, r3, #4
 8009dfc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009dfe:	2003      	movs	r0, #3
 8009e00:	f7fa fcf6 	bl	80047f0 <memp_malloc>
 8009e04:	6138      	str	r0, [r7, #16]
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d104      	bne.n	8009e16 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009e0c:	68b8      	ldr	r0, [r7, #8]
 8009e0e:	f7fb fbd5 	bl	80055bc <pbuf_free>
    return NULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	e061      	b.n	8009eda <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009e1c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	2200      	movs	r2, #0
 8009e22:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	891a      	ldrh	r2, [r3, #8]
 8009e2e:	7dfb      	ldrb	r3, [r7, #23]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d205      	bcs.n	8009e42 <tcp_create_segment+0x86>
 8009e36:	4b2b      	ldr	r3, [pc, #172]	; (8009ee4 <tcp_create_segment+0x128>)
 8009e38:	22b0      	movs	r2, #176	; 0xb0
 8009e3a:	492e      	ldr	r1, [pc, #184]	; (8009ef4 <tcp_create_segment+0x138>)
 8009e3c:	482b      	ldr	r0, [pc, #172]	; (8009eec <tcp_create_segment+0x130>)
 8009e3e:	f004 fdf7 	bl	800ea30 <iprintf>
  seg->len = p->tot_len - optlen;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	891a      	ldrh	r2, [r3, #8]
 8009e46:	7dfb      	ldrb	r3, [r7, #23]
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009e52:	2114      	movs	r1, #20
 8009e54:	68b8      	ldr	r0, [r7, #8]
 8009e56:	f7fb fb1b 	bl	8005490 <pbuf_add_header>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d004      	beq.n	8009e6a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009e60:	6938      	ldr	r0, [r7, #16]
 8009e62:	f7fc ffe8 	bl	8006e36 <tcp_seg_free>
    return NULL;
 8009e66:	2300      	movs	r3, #0
 8009e68:	e037      	b.n	8009eda <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	8ada      	ldrh	r2, [r3, #22]
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	68dc      	ldr	r4, [r3, #12]
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	f7fa f83f 	bl	8003f00 <lwip_htons>
 8009e82:	4603      	mov	r3, r0
 8009e84:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	8b1a      	ldrh	r2, [r3, #24]
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	68dc      	ldr	r4, [r3, #12]
 8009e8e:	4610      	mov	r0, r2
 8009e90:	f7fa f836 	bl	8003f00 <lwip_htons>
 8009e94:	4603      	mov	r3, r0
 8009e96:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	68dc      	ldr	r4, [r3, #12]
 8009e9c:	6838      	ldr	r0, [r7, #0]
 8009e9e:	f7fa f844 	bl	8003f2a <lwip_htonl>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009ea6:	7dfb      	ldrb	r3, [r7, #23]
 8009ea8:	089b      	lsrs	r3, r3, #2
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	3305      	adds	r3, #5
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	031b      	lsls	r3, r3, #12
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	68dc      	ldr	r4, [r3, #12]
 8009ec2:	4610      	mov	r0, r2
 8009ec4:	f7fa f81c 	bl	8003f00 <lwip_htons>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	749a      	strb	r2, [r3, #18]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	74da      	strb	r2, [r3, #19]
  return seg;
 8009ed8:	693b      	ldr	r3, [r7, #16]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	371c      	adds	r7, #28
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd90      	pop	{r4, r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	08010fa8 	.word	0x08010fa8
 8009ee8:	08010fdc 	.word	0x08010fdc
 8009eec:	08010ffc 	.word	0x08010ffc
 8009ef0:	08011024 	.word	0x08011024
 8009ef4:	08011048 	.word	0x08011048

08009ef8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	607b      	str	r3, [r7, #4]
 8009f00:	4603      	mov	r3, r0
 8009f02:	73fb      	strb	r3, [r7, #15]
 8009f04:	460b      	mov	r3, r1
 8009f06:	81bb      	strh	r3, [r7, #12]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009f0c:	89bb      	ldrh	r3, [r7, #12]
 8009f0e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d105      	bne.n	8009f22 <tcp_pbuf_prealloc+0x2a>
 8009f16:	4b30      	ldr	r3, [pc, #192]	; (8009fd8 <tcp_pbuf_prealloc+0xe0>)
 8009f18:	22e8      	movs	r2, #232	; 0xe8
 8009f1a:	4930      	ldr	r1, [pc, #192]	; (8009fdc <tcp_pbuf_prealloc+0xe4>)
 8009f1c:	4830      	ldr	r0, [pc, #192]	; (8009fe0 <tcp_pbuf_prealloc+0xe8>)
 8009f1e:	f004 fd87 	bl	800ea30 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d105      	bne.n	8009f34 <tcp_pbuf_prealloc+0x3c>
 8009f28:	4b2b      	ldr	r3, [pc, #172]	; (8009fd8 <tcp_pbuf_prealloc+0xe0>)
 8009f2a:	22e9      	movs	r2, #233	; 0xe9
 8009f2c:	492d      	ldr	r1, [pc, #180]	; (8009fe4 <tcp_pbuf_prealloc+0xec>)
 8009f2e:	482c      	ldr	r0, [pc, #176]	; (8009fe0 <tcp_pbuf_prealloc+0xe8>)
 8009f30:	f004 fd7e 	bl	800ea30 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009f34:	89ba      	ldrh	r2, [r7, #12]
 8009f36:	897b      	ldrh	r3, [r7, #10]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d221      	bcs.n	8009f80 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009f3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f40:	f003 0302 	and.w	r3, r3, #2
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d111      	bne.n	8009f6c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	8b5b      	ldrh	r3, [r3, #26]
 8009f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d115      	bne.n	8009f80 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8009f54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d007      	beq.n	8009f6c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8009f5c:	6a3b      	ldr	r3, [r7, #32]
 8009f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d103      	bne.n	8009f6c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8009f64:	6a3b      	ldr	r3, [r7, #32]
 8009f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d009      	beq.n	8009f80 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009f6c:	89bb      	ldrh	r3, [r7, #12]
 8009f6e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8009f72:	f023 0203 	bic.w	r2, r3, #3
 8009f76:	897b      	ldrh	r3, [r7, #10]
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	bf28      	it	cs
 8009f7c:	4613      	movcs	r3, r2
 8009f7e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009f80:	8af9      	ldrh	r1, [r7, #22]
 8009f82:	7bfb      	ldrb	r3, [r7, #15]
 8009f84:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fb f833 	bl	8004ff4 <pbuf_alloc>
 8009f8e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e019      	b.n	8009fce <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d006      	beq.n	8009fb0 <tcp_pbuf_prealloc+0xb8>
 8009fa2:	4b0d      	ldr	r3, [pc, #52]	; (8009fd8 <tcp_pbuf_prealloc+0xe0>)
 8009fa4:	f240 120b 	movw	r2, #267	; 0x10b
 8009fa8:	490f      	ldr	r1, [pc, #60]	; (8009fe8 <tcp_pbuf_prealloc+0xf0>)
 8009faa:	480d      	ldr	r0, [pc, #52]	; (8009fe0 <tcp_pbuf_prealloc+0xe8>)
 8009fac:	f004 fd40 	bl	800ea30 <iprintf>
  *oversize = p->len - length;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	895a      	ldrh	r2, [r3, #10]
 8009fb4:	89bb      	ldrh	r3, [r7, #12]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	89ba      	ldrh	r2, [r7, #12]
 8009fc2:	811a      	strh	r2, [r3, #8]
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	891a      	ldrh	r2, [r3, #8]
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	815a      	strh	r2, [r3, #10]
  return p;
 8009fcc:	693b      	ldr	r3, [r7, #16]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	08010fa8 	.word	0x08010fa8
 8009fdc:	08011060 	.word	0x08011060
 8009fe0:	08010ffc 	.word	0x08010ffc
 8009fe4:	08011084 	.word	0x08011084
 8009fe8:	080110a4 	.word	0x080110a4

08009fec <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d106      	bne.n	800a00c <tcp_write_checks+0x20>
 8009ffe:	4b33      	ldr	r3, [pc, #204]	; (800a0cc <tcp_write_checks+0xe0>)
 800a000:	f240 1233 	movw	r2, #307	; 0x133
 800a004:	4932      	ldr	r1, [pc, #200]	; (800a0d0 <tcp_write_checks+0xe4>)
 800a006:	4833      	ldr	r0, [pc, #204]	; (800a0d4 <tcp_write_checks+0xe8>)
 800a008:	f004 fd12 	bl	800ea30 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	7d1b      	ldrb	r3, [r3, #20]
 800a010:	2b04      	cmp	r3, #4
 800a012:	d00e      	beq.n	800a032 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800a018:	2b07      	cmp	r3, #7
 800a01a:	d00a      	beq.n	800a032 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800a020:	2b02      	cmp	r3, #2
 800a022:	d006      	beq.n	800a032 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d002      	beq.n	800a032 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800a02c:	f06f 030a 	mvn.w	r3, #10
 800a030:	e048      	b.n	800a0c4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800a032:	887b      	ldrh	r3, [r7, #2]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d101      	bne.n	800a03c <tcp_write_checks+0x50>
    return ERR_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	e043      	b.n	800a0c4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a042:	887a      	ldrh	r2, [r7, #2]
 800a044:	429a      	cmp	r2, r3
 800a046:	d909      	bls.n	800a05c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	8b5b      	ldrh	r3, [r3, #26]
 800a04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a050:	b29a      	uxth	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a056:	f04f 33ff 	mov.w	r3, #4294967295
 800a05a:	e033      	b.n	800a0c4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a062:	2b08      	cmp	r3, #8
 800a064:	d909      	bls.n	800a07a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	8b5b      	ldrh	r3, [r3, #26]
 800a06a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a06e:	b29a      	uxth	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a074:	f04f 33ff 	mov.w	r3, #4294967295
 800a078:	e024      	b.n	800a0c4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00f      	beq.n	800a0a4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d11a      	bne.n	800a0c2 <tcp_write_checks+0xd6>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a090:	2b00      	cmp	r3, #0
 800a092:	d116      	bne.n	800a0c2 <tcp_write_checks+0xd6>
 800a094:	4b0d      	ldr	r3, [pc, #52]	; (800a0cc <tcp_write_checks+0xe0>)
 800a096:	f240 1255 	movw	r2, #341	; 0x155
 800a09a:	490f      	ldr	r1, [pc, #60]	; (800a0d8 <tcp_write_checks+0xec>)
 800a09c:	480d      	ldr	r0, [pc, #52]	; (800a0d4 <tcp_write_checks+0xe8>)
 800a09e:	f004 fcc7 	bl	800ea30 <iprintf>
 800a0a2:	e00e      	b.n	800a0c2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d103      	bne.n	800a0b4 <tcp_write_checks+0xc8>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d006      	beq.n	800a0c2 <tcp_write_checks+0xd6>
 800a0b4:	4b05      	ldr	r3, [pc, #20]	; (800a0cc <tcp_write_checks+0xe0>)
 800a0b6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800a0ba:	4908      	ldr	r1, [pc, #32]	; (800a0dc <tcp_write_checks+0xf0>)
 800a0bc:	4805      	ldr	r0, [pc, #20]	; (800a0d4 <tcp_write_checks+0xe8>)
 800a0be:	f004 fcb7 	bl	800ea30 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	08010fa8 	.word	0x08010fa8
 800a0d0:	080110b8 	.word	0x080110b8
 800a0d4:	08010ffc 	.word	0x08010ffc
 800a0d8:	080110d8 	.word	0x080110d8
 800a0dc:	08011114 	.word	0x08011114

0800a0e0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a0e0:	b590      	push	{r4, r7, lr}
 800a0e2:	b09b      	sub	sp, #108	; 0x6c
 800a0e4:	af04      	add	r7, sp, #16
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	80fb      	strh	r3, [r7, #6]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	653b      	str	r3, [r7, #80]	; 0x50
 800a0fe:	2300      	movs	r3, #0
 800a100:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a102:	2300      	movs	r3, #0
 800a104:	64bb      	str	r3, [r7, #72]	; 0x48
 800a106:	2300      	movs	r3, #0
 800a108:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800a10a:	2300      	movs	r3, #0
 800a10c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a116:	2300      	movs	r3, #0
 800a118:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d109      	bne.n	800a13c <tcp_write+0x5c>
 800a128:	4ba4      	ldr	r3, [pc, #656]	; (800a3bc <tcp_write+0x2dc>)
 800a12a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800a12e:	49a4      	ldr	r1, [pc, #656]	; (800a3c0 <tcp_write+0x2e0>)
 800a130:	48a4      	ldr	r0, [pc, #656]	; (800a3c4 <tcp_write+0x2e4>)
 800a132:	f004 fc7d 	bl	800ea30 <iprintf>
 800a136:	f06f 030f 	mvn.w	r3, #15
 800a13a:	e32a      	b.n	800a792 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a142:	085b      	lsrs	r3, r3, #1
 800a144:	b29a      	uxth	r2, r3
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a14a:	4293      	cmp	r3, r2
 800a14c:	bf28      	it	cs
 800a14e:	4613      	movcs	r3, r2
 800a150:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800a152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a154:	2b00      	cmp	r3, #0
 800a156:	d102      	bne.n	800a15e <tcp_write+0x7e>
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a15c:	e000      	b.n	800a160 <tcp_write+0x80>
 800a15e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a160:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d109      	bne.n	800a17c <tcp_write+0x9c>
 800a168:	4b94      	ldr	r3, [pc, #592]	; (800a3bc <tcp_write+0x2dc>)
 800a16a:	f240 12ad 	movw	r2, #429	; 0x1ad
 800a16e:	4996      	ldr	r1, [pc, #600]	; (800a3c8 <tcp_write+0x2e8>)
 800a170:	4894      	ldr	r0, [pc, #592]	; (800a3c4 <tcp_write+0x2e4>)
 800a172:	f004 fc5d 	bl	800ea30 <iprintf>
 800a176:	f06f 030f 	mvn.w	r3, #15
 800a17a:	e30a      	b.n	800a792 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800a17c:	88fb      	ldrh	r3, [r7, #6]
 800a17e:	4619      	mov	r1, r3
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f7ff ff33 	bl	8009fec <tcp_write_checks>
 800a186:	4603      	mov	r3, r0
 800a188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800a18c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <tcp_write+0xba>
    return err;
 800a194:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a198:	e2fb      	b.n	800a792 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a1a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 80f6 	beq.w	800a3a0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1b8:	653b      	str	r3, [r7, #80]	; 0x50
 800a1ba:	e002      	b.n	800a1c2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800a1bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1f8      	bne.n	800a1bc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a1ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1cc:	7a9b      	ldrb	r3, [r3, #10]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	f003 0304 	and.w	r3, r3, #4
 800a1d6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a1d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1dc:	891b      	ldrh	r3, [r3, #8]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	8c3b      	ldrh	r3, [r7, #32]
 800a1e2:	440b      	add	r3, r1
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	da06      	bge.n	800a1f6 <tcp_write+0x116>
 800a1e8:	4b74      	ldr	r3, [pc, #464]	; (800a3bc <tcp_write+0x2dc>)
 800a1ea:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a1ee:	4977      	ldr	r1, [pc, #476]	; (800a3cc <tcp_write+0x2ec>)
 800a1f0:	4874      	ldr	r0, [pc, #464]	; (800a3c4 <tcp_write+0x2e4>)
 800a1f2:	f004 fc1d 	bl	800ea30 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a1f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1f8:	891a      	ldrh	r2, [r3, #8]
 800a1fa:	8c3b      	ldrh	r3, [r7, #32]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a20c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800a20e:	8a7b      	ldrh	r3, [r7, #18]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d026      	beq.n	800a262 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a214:	8a7b      	ldrh	r3, [r7, #18]
 800a216:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a218:	429a      	cmp	r2, r3
 800a21a:	d206      	bcs.n	800a22a <tcp_write+0x14a>
 800a21c:	4b67      	ldr	r3, [pc, #412]	; (800a3bc <tcp_write+0x2dc>)
 800a21e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800a222:	496b      	ldr	r1, [pc, #428]	; (800a3d0 <tcp_write+0x2f0>)
 800a224:	4867      	ldr	r0, [pc, #412]	; (800a3c4 <tcp_write+0x2e4>)
 800a226:	f004 fc03 	bl	800ea30 <iprintf>
      seg = last_unsent;
 800a22a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a22c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a22e:	8a7b      	ldrh	r3, [r7, #18]
 800a230:	88fa      	ldrh	r2, [r7, #6]
 800a232:	4293      	cmp	r3, r2
 800a234:	bf28      	it	cs
 800a236:	4613      	movcs	r3, r2
 800a238:	b29b      	uxth	r3, r3
 800a23a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a23c:	4293      	cmp	r3, r2
 800a23e:	bf28      	it	cs
 800a240:	4613      	movcs	r3, r2
 800a242:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800a244:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a248:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a24a:	4413      	add	r3, r2
 800a24c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800a250:	8a7a      	ldrh	r2, [r7, #18]
 800a252:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	b29b      	uxth	r3, r3
 800a258:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800a25a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a25c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a262:	8a7b      	ldrh	r3, [r7, #18]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00b      	beq.n	800a280 <tcp_write+0x1a0>
 800a268:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a26c:	88fb      	ldrh	r3, [r7, #6]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d006      	beq.n	800a280 <tcp_write+0x1a0>
 800a272:	4b52      	ldr	r3, [pc, #328]	; (800a3bc <tcp_write+0x2dc>)
 800a274:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a278:	4956      	ldr	r1, [pc, #344]	; (800a3d4 <tcp_write+0x2f4>)
 800a27a:	4852      	ldr	r0, [pc, #328]	; (800a3c4 <tcp_write+0x2e4>)
 800a27c:	f004 fbd8 	bl	800ea30 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a280:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a284:	88fb      	ldrh	r3, [r7, #6]
 800a286:	429a      	cmp	r2, r3
 800a288:	f080 8167 	bcs.w	800a55a <tcp_write+0x47a>
 800a28c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f000 8163 	beq.w	800a55a <tcp_write+0x47a>
 800a294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a296:	891b      	ldrh	r3, [r3, #8]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 815e 	beq.w	800a55a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a29e:	88fa      	ldrh	r2, [r7, #6]
 800a2a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a2a4:	1ad2      	subs	r2, r2, r3
 800a2a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	bfa8      	it	ge
 800a2ac:	4613      	movge	r3, r2
 800a2ae:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800a2b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2b2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a2b4:	797b      	ldrb	r3, [r7, #5]
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d027      	beq.n	800a30e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a2be:	f107 0012 	add.w	r0, r7, #18
 800a2c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a2c4:	8bf9      	ldrh	r1, [r7, #30]
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	9302      	str	r3, [sp, #8]
 800a2ca:	797b      	ldrb	r3, [r7, #5]
 800a2cc:	9301      	str	r3, [sp, #4]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	f7ff fe0f 	bl	8009ef8 <tcp_pbuf_prealloc>
 800a2da:	6578      	str	r0, [r7, #84]	; 0x54
 800a2dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f000 8225 	beq.w	800a72e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a2e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2e6:	6858      	ldr	r0, [r3, #4]
 800a2e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	8bfa      	ldrh	r2, [r7, #30]
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	f004 fc88 	bl	800ec08 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800a2f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a2fa:	f7fb f9e7 	bl	80056cc <pbuf_clen>
 800a2fe:	4603      	mov	r3, r0
 800a300:	461a      	mov	r2, r3
 800a302:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a306:	4413      	add	r3, r2
 800a308:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a30c:	e041      	b.n	800a392 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a30e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	637b      	str	r3, [r7, #52]	; 0x34
 800a314:	e002      	b.n	800a31c <tcp_write+0x23c>
 800a316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	637b      	str	r3, [r7, #52]	; 0x34
 800a31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1f8      	bne.n	800a316 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a326:	7b1b      	ldrb	r3, [r3, #12]
 800a328:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d115      	bne.n	800a35c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a336:	8952      	ldrh	r2, [r2, #10]
 800a338:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d10d      	bne.n	800a35c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a340:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a344:	2b00      	cmp	r3, #0
 800a346:	d006      	beq.n	800a356 <tcp_write+0x276>
 800a348:	4b1c      	ldr	r3, [pc, #112]	; (800a3bc <tcp_write+0x2dc>)
 800a34a:	f240 2231 	movw	r2, #561	; 0x231
 800a34e:	4922      	ldr	r1, [pc, #136]	; (800a3d8 <tcp_write+0x2f8>)
 800a350:	481c      	ldr	r0, [pc, #112]	; (800a3c4 <tcp_write+0x2e4>)
 800a352:	f004 fb6d 	bl	800ea30 <iprintf>
          extendlen = seglen;
 800a356:	8bfb      	ldrh	r3, [r7, #30]
 800a358:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a35a:	e01a      	b.n	800a392 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a35c:	8bfb      	ldrh	r3, [r7, #30]
 800a35e:	2201      	movs	r2, #1
 800a360:	4619      	mov	r1, r3
 800a362:	2000      	movs	r0, #0
 800a364:	f7fa fe46 	bl	8004ff4 <pbuf_alloc>
 800a368:	6578      	str	r0, [r7, #84]	; 0x54
 800a36a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f000 81e0 	beq.w	800a732 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800a372:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	441a      	add	r2, r3
 800a37a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a37c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800a37e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a380:	f7fb f9a4 	bl	80056cc <pbuf_clen>
 800a384:	4603      	mov	r3, r0
 800a386:	461a      	mov	r2, r3
 800a388:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a38c:	4413      	add	r3, r2
 800a38e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800a392:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a396:	8bfb      	ldrh	r3, [r7, #30]
 800a398:	4413      	add	r3, r2
 800a39a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a39e:	e0dc      	b.n	800a55a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f000 80d7 	beq.w	800a55a <tcp_write+0x47a>
 800a3ac:	4b03      	ldr	r3, [pc, #12]	; (800a3bc <tcp_write+0x2dc>)
 800a3ae:	f240 224a 	movw	r2, #586	; 0x24a
 800a3b2:	490a      	ldr	r1, [pc, #40]	; (800a3dc <tcp_write+0x2fc>)
 800a3b4:	4803      	ldr	r0, [pc, #12]	; (800a3c4 <tcp_write+0x2e4>)
 800a3b6:	f004 fb3b 	bl	800ea30 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a3ba:	e0ce      	b.n	800a55a <tcp_write+0x47a>
 800a3bc:	08010fa8 	.word	0x08010fa8
 800a3c0:	08011148 	.word	0x08011148
 800a3c4:	08010ffc 	.word	0x08010ffc
 800a3c8:	08011160 	.word	0x08011160
 800a3cc:	08011194 	.word	0x08011194
 800a3d0:	080111ac 	.word	0x080111ac
 800a3d4:	080111cc 	.word	0x080111cc
 800a3d8:	080111ec 	.word	0x080111ec
 800a3dc:	08011218 	.word	0x08011218
    struct pbuf *p;
    u16_t left = len - pos;
 800a3e0:	88fa      	ldrh	r2, [r7, #6]
 800a3e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800a3ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a3f6:	8b7a      	ldrh	r2, [r7, #26]
 800a3f8:	8bbb      	ldrh	r3, [r7, #28]
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	bf28      	it	cs
 800a3fe:	4613      	movcs	r3, r2
 800a400:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a402:	797b      	ldrb	r3, [r7, #5]
 800a404:	f003 0301 	and.w	r3, r3, #1
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d036      	beq.n	800a47a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a40c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a410:	b29a      	uxth	r2, r3
 800a412:	8b3b      	ldrh	r3, [r7, #24]
 800a414:	4413      	add	r3, r2
 800a416:	b299      	uxth	r1, r3
 800a418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	bf0c      	ite	eq
 800a41e:	2301      	moveq	r3, #1
 800a420:	2300      	movne	r3, #0
 800a422:	b2db      	uxtb	r3, r3
 800a424:	f107 0012 	add.w	r0, r7, #18
 800a428:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a42a:	9302      	str	r3, [sp, #8]
 800a42c:	797b      	ldrb	r3, [r7, #5]
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	4603      	mov	r3, r0
 800a436:	2036      	movs	r0, #54	; 0x36
 800a438:	f7ff fd5e 	bl	8009ef8 <tcp_pbuf_prealloc>
 800a43c:	6338      	str	r0, [r7, #48]	; 0x30
 800a43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 8178 	beq.w	800a736 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a448:	895b      	ldrh	r3, [r3, #10]
 800a44a:	8b3a      	ldrh	r2, [r7, #24]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d906      	bls.n	800a45e <tcp_write+0x37e>
 800a450:	4b8c      	ldr	r3, [pc, #560]	; (800a684 <tcp_write+0x5a4>)
 800a452:	f240 2266 	movw	r2, #614	; 0x266
 800a456:	498c      	ldr	r1, [pc, #560]	; (800a688 <tcp_write+0x5a8>)
 800a458:	488c      	ldr	r0, [pc, #560]	; (800a68c <tcp_write+0x5ac>)
 800a45a:	f004 fae9 	bl	800ea30 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	685a      	ldr	r2, [r3, #4]
 800a462:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a466:	18d0      	adds	r0, r2, r3
 800a468:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	4413      	add	r3, r2
 800a470:	8b3a      	ldrh	r2, [r7, #24]
 800a472:	4619      	mov	r1, r3
 800a474:	f004 fbc8 	bl	800ec08 <memcpy>
 800a478:	e02f      	b.n	800a4da <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a47a:	8a7b      	ldrh	r3, [r7, #18]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d006      	beq.n	800a48e <tcp_write+0x3ae>
 800a480:	4b80      	ldr	r3, [pc, #512]	; (800a684 <tcp_write+0x5a4>)
 800a482:	f240 2271 	movw	r2, #625	; 0x271
 800a486:	4982      	ldr	r1, [pc, #520]	; (800a690 <tcp_write+0x5b0>)
 800a488:	4880      	ldr	r0, [pc, #512]	; (800a68c <tcp_write+0x5ac>)
 800a48a:	f004 fad1 	bl	800ea30 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a48e:	8b3b      	ldrh	r3, [r7, #24]
 800a490:	2201      	movs	r2, #1
 800a492:	4619      	mov	r1, r3
 800a494:	2036      	movs	r0, #54	; 0x36
 800a496:	f7fa fdad 	bl	8004ff4 <pbuf_alloc>
 800a49a:	6178      	str	r0, [r7, #20]
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f000 814b 	beq.w	800a73a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800a4a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	441a      	add	r2, r3
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a4b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	2036      	movs	r0, #54	; 0x36
 800a4be:	f7fa fd99 	bl	8004ff4 <pbuf_alloc>
 800a4c2:	6338      	str	r0, [r7, #48]	; 0x30
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d103      	bne.n	800a4d2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a4ca:	6978      	ldr	r0, [r7, #20]
 800a4cc:	f7fb f876 	bl	80055bc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a4d0:	e136      	b.n	800a740 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a4d2:	6979      	ldr	r1, [r7, #20]
 800a4d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4d6:	f7fb f933 	bl	8005740 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a4da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4dc:	f7fb f8f6 	bl	80056cc <pbuf_clen>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a4e8:	4413      	add	r3, r2
 800a4ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800a4ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a4f2:	2b09      	cmp	r3, #9
 800a4f4:	d903      	bls.n	800a4fe <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a4f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4f8:	f7fb f860 	bl	80055bc <pbuf_free>
      goto memerr;
 800a4fc:	e120      	b.n	800a740 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a502:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a506:	441a      	add	r2, r3
 800a508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	4613      	mov	r3, r2
 800a510:	2200      	movs	r2, #0
 800a512:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f7ff fc51 	bl	8009dbc <tcp_create_segment>
 800a51a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a51c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f000 810d 	beq.w	800a73e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a526:	2b00      	cmp	r3, #0
 800a528:	d102      	bne.n	800a530 <tcp_write+0x450>
      queue = seg;
 800a52a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a52c:	647b      	str	r3, [r7, #68]	; 0x44
 800a52e:	e00c      	b.n	800a54a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a532:	2b00      	cmp	r3, #0
 800a534:	d106      	bne.n	800a544 <tcp_write+0x464>
 800a536:	4b53      	ldr	r3, [pc, #332]	; (800a684 <tcp_write+0x5a4>)
 800a538:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a53c:	4955      	ldr	r1, [pc, #340]	; (800a694 <tcp_write+0x5b4>)
 800a53e:	4853      	ldr	r0, [pc, #332]	; (800a68c <tcp_write+0x5ac>)
 800a540:	f004 fa76 	bl	800ea30 <iprintf>
      prev_seg->next = seg;
 800a544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a546:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a548:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a54c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a54e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a552:	8b3b      	ldrh	r3, [r7, #24]
 800a554:	4413      	add	r3, r2
 800a556:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800a55a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a55e:	88fb      	ldrh	r3, [r7, #6]
 800a560:	429a      	cmp	r2, r3
 800a562:	f4ff af3d 	bcc.w	800a3e0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a566:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d02c      	beq.n	800a5c6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800a56c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a572:	e01e      	b.n	800a5b2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a576:	891a      	ldrh	r2, [r3, #8]
 800a578:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a57a:	4413      	add	r3, r2
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a580:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800a582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d110      	bne.n	800a5ac <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a590:	8952      	ldrh	r2, [r2, #10]
 800a592:	4413      	add	r3, r2
 800a594:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a596:	68b9      	ldr	r1, [r7, #8]
 800a598:	4618      	mov	r0, r3
 800a59a:	f004 fb35 	bl	800ec08 <memcpy>
        p->len += oversize_used;
 800a59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a0:	895a      	ldrh	r2, [r3, #10]
 800a5a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a5a4:	4413      	add	r3, r2
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5aa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1dd      	bne.n	800a574 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800a5b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5ba:	891a      	ldrh	r2, [r3, #8]
 800a5bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a5be:	4413      	add	r3, r2
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5c4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800a5c6:	8a7a      	ldrh	r2, [r7, #18]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800a5ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d018      	beq.n	800a606 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a5d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d106      	bne.n	800a5e8 <tcp_write+0x508>
 800a5da:	4b2a      	ldr	r3, [pc, #168]	; (800a684 <tcp_write+0x5a4>)
 800a5dc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800a5e0:	492d      	ldr	r1, [pc, #180]	; (800a698 <tcp_write+0x5b8>)
 800a5e2:	482a      	ldr	r0, [pc, #168]	; (800a68c <tcp_write+0x5ac>)
 800a5e4:	f004 fa24 	bl	800ea30 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800a5e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fb f8a6 	bl	8005740 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a5f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5f6:	891a      	ldrh	r2, [r3, #8]
 800a5f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5fa:	891b      	ldrh	r3, [r3, #8]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a602:	811a      	strh	r2, [r3, #8]
 800a604:	e037      	b.n	800a676 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800a606:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d034      	beq.n	800a676 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a60c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <tcp_write+0x53a>
 800a612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d106      	bne.n	800a628 <tcp_write+0x548>
 800a61a:	4b1a      	ldr	r3, [pc, #104]	; (800a684 <tcp_write+0x5a4>)
 800a61c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800a620:	491e      	ldr	r1, [pc, #120]	; (800a69c <tcp_write+0x5bc>)
 800a622:	481a      	ldr	r0, [pc, #104]	; (800a68c <tcp_write+0x5ac>)
 800a624:	f004 fa04 	bl	800ea30 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a62e:	e009      	b.n	800a644 <tcp_write+0x564>
      p->tot_len += extendlen;
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	891a      	ldrh	r2, [r3, #8]
 800a634:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a636:	4413      	add	r3, r2
 800a638:	b29a      	uxth	r2, r3
 800a63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	62bb      	str	r3, [r7, #40]	; 0x28
 800a644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1f1      	bne.n	800a630 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	891a      	ldrh	r2, [r3, #8]
 800a650:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a652:	4413      	add	r3, r2
 800a654:	b29a      	uxth	r2, r3
 800a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a658:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65c:	895a      	ldrh	r2, [r3, #10]
 800a65e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a660:	4413      	add	r3, r2
 800a662:	b29a      	uxth	r2, r3
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a66a:	891a      	ldrh	r2, [r3, #8]
 800a66c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a66e:	4413      	add	r3, r2
 800a670:	b29a      	uxth	r2, r3
 800a672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a674:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d111      	bne.n	800a6a0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a680:	66da      	str	r2, [r3, #108]	; 0x6c
 800a682:	e010      	b.n	800a6a6 <tcp_write+0x5c6>
 800a684:	08010fa8 	.word	0x08010fa8
 800a688:	08011248 	.word	0x08011248
 800a68c:	08010ffc 	.word	0x08010ffc
 800a690:	08011288 	.word	0x08011288
 800a694:	08011298 	.word	0x08011298
 800a698:	080112ac 	.word	0x080112ac
 800a69c:	080112e4 	.word	0x080112e4
  } else {
    last_unsent->next = queue;
 800a6a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6a4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6aa:	88fb      	ldrh	r3, [r7, #6]
 800a6ac:	441a      	add	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a6b8:	88fb      	ldrh	r3, [r7, #6]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a6ca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00e      	beq.n	800a6f6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10a      	bne.n	800a6f6 <tcp_write+0x616>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d106      	bne.n	800a6f6 <tcp_write+0x616>
 800a6e8:	4b2c      	ldr	r3, [pc, #176]	; (800a79c <tcp_write+0x6bc>)
 800a6ea:	f240 3212 	movw	r2, #786	; 0x312
 800a6ee:	492c      	ldr	r1, [pc, #176]	; (800a7a0 <tcp_write+0x6c0>)
 800a6f0:	482c      	ldr	r0, [pc, #176]	; (800a7a4 <tcp_write+0x6c4>)
 800a6f2:	f004 f99d 	bl	800ea30 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800a6f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d016      	beq.n	800a72a <tcp_write+0x64a>
 800a6fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d012      	beq.n	800a72a <tcp_write+0x64a>
 800a704:	797b      	ldrb	r3, [r7, #5]
 800a706:	f003 0302 	and.w	r3, r3, #2
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10d      	bne.n	800a72a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a70e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	899b      	ldrh	r3, [r3, #12]
 800a714:	b29c      	uxth	r4, r3
 800a716:	2008      	movs	r0, #8
 800a718:	f7f9 fbf2 	bl	8003f00 <lwip_htons>
 800a71c:	4603      	mov	r3, r0
 800a71e:	461a      	mov	r2, r3
 800a720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	4322      	orrs	r2, r4
 800a726:	b292      	uxth	r2, r2
 800a728:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	e031      	b.n	800a792 <tcp_write+0x6b2>
          goto memerr;
 800a72e:	bf00      	nop
 800a730:	e006      	b.n	800a740 <tcp_write+0x660>
            goto memerr;
 800a732:	bf00      	nop
 800a734:	e004      	b.n	800a740 <tcp_write+0x660>
        goto memerr;
 800a736:	bf00      	nop
 800a738:	e002      	b.n	800a740 <tcp_write+0x660>
        goto memerr;
 800a73a:	bf00      	nop
 800a73c:	e000      	b.n	800a740 <tcp_write+0x660>
      goto memerr;
 800a73e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	8b5b      	ldrh	r3, [r3, #26]
 800a744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a748:	b29a      	uxth	r2, r3
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a74e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <tcp_write+0x67a>
    pbuf_free(concat_p);
 800a754:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a756:	f7fa ff31 	bl	80055bc <pbuf_free>
  }
  if (queue != NULL) {
 800a75a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <tcp_write+0x686>
    tcp_segs_free(queue);
 800a760:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a762:	f7fc fb53 	bl	8006e0c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00e      	beq.n	800a78e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10a      	bne.n	800a78e <tcp_write+0x6ae>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d106      	bne.n	800a78e <tcp_write+0x6ae>
 800a780:	4b06      	ldr	r3, [pc, #24]	; (800a79c <tcp_write+0x6bc>)
 800a782:	f240 3227 	movw	r2, #807	; 0x327
 800a786:	4906      	ldr	r1, [pc, #24]	; (800a7a0 <tcp_write+0x6c0>)
 800a788:	4806      	ldr	r0, [pc, #24]	; (800a7a4 <tcp_write+0x6c4>)
 800a78a:	f004 f951 	bl	800ea30 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a78e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a792:	4618      	mov	r0, r3
 800a794:	375c      	adds	r7, #92	; 0x5c
 800a796:	46bd      	mov	sp, r7
 800a798:	bd90      	pop	{r4, r7, pc}
 800a79a:	bf00      	nop
 800a79c:	08010fa8 	.word	0x08010fa8
 800a7a0:	0801131c 	.word	0x0801131c
 800a7a4:	08010ffc 	.word	0x08010ffc

0800a7a8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a7a8:	b590      	push	{r4, r7, lr}
 800a7aa:	b08b      	sub	sp, #44	; 0x2c
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	61fb      	str	r3, [r7, #28]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d106      	bne.n	800a7d4 <tcp_split_unsent_seg+0x2c>
 800a7c6:	4b95      	ldr	r3, [pc, #596]	; (800aa1c <tcp_split_unsent_seg+0x274>)
 800a7c8:	f240 324b 	movw	r2, #843	; 0x34b
 800a7cc:	4994      	ldr	r1, [pc, #592]	; (800aa20 <tcp_split_unsent_seg+0x278>)
 800a7ce:	4895      	ldr	r0, [pc, #596]	; (800aa24 <tcp_split_unsent_seg+0x27c>)
 800a7d0:	f004 f92e 	bl	800ea30 <iprintf>

  useg = pcb->unsent;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7d8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d102      	bne.n	800a7e6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e4:	e116      	b.n	800aa14 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a7e6:	887b      	ldrh	r3, [r7, #2]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d109      	bne.n	800a800 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a7ec:	4b8b      	ldr	r3, [pc, #556]	; (800aa1c <tcp_split_unsent_seg+0x274>)
 800a7ee:	f240 3253 	movw	r2, #851	; 0x353
 800a7f2:	498d      	ldr	r1, [pc, #564]	; (800aa28 <tcp_split_unsent_seg+0x280>)
 800a7f4:	488b      	ldr	r0, [pc, #556]	; (800aa24 <tcp_split_unsent_seg+0x27c>)
 800a7f6:	f004 f91b 	bl	800ea30 <iprintf>
    return ERR_VAL;
 800a7fa:	f06f 0305 	mvn.w	r3, #5
 800a7fe:	e109      	b.n	800aa14 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	891b      	ldrh	r3, [r3, #8]
 800a804:	887a      	ldrh	r2, [r7, #2]
 800a806:	429a      	cmp	r2, r3
 800a808:	d301      	bcc.n	800a80e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	e102      	b.n	800aa14 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a812:	887a      	ldrh	r2, [r7, #2]
 800a814:	429a      	cmp	r2, r3
 800a816:	d906      	bls.n	800a826 <tcp_split_unsent_seg+0x7e>
 800a818:	4b80      	ldr	r3, [pc, #512]	; (800aa1c <tcp_split_unsent_seg+0x274>)
 800a81a:	f240 325b 	movw	r2, #859	; 0x35b
 800a81e:	4983      	ldr	r1, [pc, #524]	; (800aa2c <tcp_split_unsent_seg+0x284>)
 800a820:	4880      	ldr	r0, [pc, #512]	; (800aa24 <tcp_split_unsent_seg+0x27c>)
 800a822:	f004 f905 	bl	800ea30 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	891b      	ldrh	r3, [r3, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d106      	bne.n	800a83c <tcp_split_unsent_seg+0x94>
 800a82e:	4b7b      	ldr	r3, [pc, #492]	; (800aa1c <tcp_split_unsent_seg+0x274>)
 800a830:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a834:	497e      	ldr	r1, [pc, #504]	; (800aa30 <tcp_split_unsent_seg+0x288>)
 800a836:	487b      	ldr	r0, [pc, #492]	; (800aa24 <tcp_split_unsent_seg+0x27c>)
 800a838:	f004 f8fa 	bl	800ea30 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	7a9b      	ldrb	r3, [r3, #10]
 800a840:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a842:	7bfb      	ldrb	r3, [r7, #15]
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	b2db      	uxtb	r3, r3
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	891a      	ldrh	r2, [r3, #8]
 800a852:	887b      	ldrh	r3, [r7, #2]
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	89bb      	ldrh	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	b29b      	uxth	r3, r3
 800a862:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a866:	4619      	mov	r1, r3
 800a868:	2036      	movs	r0, #54	; 0x36
 800a86a:	f7fa fbc3 	bl	8004ff4 <pbuf_alloc>
 800a86e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 80b7 	beq.w	800a9e6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	891a      	ldrh	r2, [r3, #8]
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	891b      	ldrh	r3, [r3, #8]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	b29a      	uxth	r2, r3
 800a886:	887b      	ldrh	r3, [r7, #2]
 800a888:	4413      	add	r3, r2
 800a88a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	6858      	ldr	r0, [r3, #4]
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	685a      	ldr	r2, [r3, #4]
 800a894:	7bbb      	ldrb	r3, [r7, #14]
 800a896:	18d1      	adds	r1, r2, r3
 800a898:	897b      	ldrh	r3, [r7, #10]
 800a89a:	89ba      	ldrh	r2, [r7, #12]
 800a89c:	f7fb f888 	bl	80059b0 <pbuf_copy_partial>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	89bb      	ldrh	r3, [r7, #12]
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	f040 809f 	bne.w	800a9ea <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	899b      	ldrh	r3, [r3, #12]
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7f9 fb23 	bl	8003f00 <lwip_htons>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8c2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a8c8:	7efb      	ldrb	r3, [r7, #27]
 800a8ca:	f003 0308 	and.w	r3, r3, #8
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d007      	beq.n	800a8e2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a8d2:	7efb      	ldrb	r3, [r7, #27]
 800a8d4:	f023 0308 	bic.w	r3, r3, #8
 800a8d8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a8da:	7ebb      	ldrb	r3, [r7, #26]
 800a8dc:	f043 0308 	orr.w	r3, r3, #8
 800a8e0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a8e2:	7efb      	ldrb	r3, [r7, #27]
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d007      	beq.n	800a8fc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a8ec:	7efb      	ldrb	r3, [r7, #27]
 800a8ee:	f023 0301 	bic.w	r3, r3, #1
 800a8f2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a8f4:	7ebb      	ldrb	r3, [r7, #26]
 800a8f6:	f043 0301 	orr.w	r3, r3, #1
 800a8fa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	4618      	mov	r0, r3
 800a904:	f7f9 fb11 	bl	8003f2a <lwip_htonl>
 800a908:	4602      	mov	r2, r0
 800a90a:	887b      	ldrh	r3, [r7, #2]
 800a90c:	18d1      	adds	r1, r2, r3
 800a90e:	7eba      	ldrb	r2, [r7, #26]
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	460b      	mov	r3, r1
 800a916:	6939      	ldr	r1, [r7, #16]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7ff fa4f 	bl	8009dbc <tcp_create_segment>
 800a91e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d063      	beq.n	800a9ee <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fa fece 	bl	80056cc <pbuf_clen>
 800a930:	4603      	mov	r3, r0
 800a932:	461a      	mov	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a93a:	1a9b      	subs	r3, r3, r2
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	6858      	ldr	r0, [r3, #4]
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	891a      	ldrh	r2, [r3, #8]
 800a94e:	89bb      	ldrh	r3, [r7, #12]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	b29b      	uxth	r3, r3
 800a954:	4619      	mov	r1, r3
 800a956:	f7fa fcab 	bl	80052b0 <pbuf_realloc>
  useg->len -= remainder;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	891a      	ldrh	r2, [r3, #8]
 800a95e:	89bb      	ldrh	r3, [r7, #12]
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	b29a      	uxth	r2, r3
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	899b      	ldrh	r3, [r3, #12]
 800a96e:	b29c      	uxth	r4, r3
 800a970:	7efb      	ldrb	r3, [r7, #27]
 800a972:	b29b      	uxth	r3, r3
 800a974:	4618      	mov	r0, r3
 800a976:	f7f9 fac3 	bl	8003f00 <lwip_htons>
 800a97a:	4603      	mov	r3, r0
 800a97c:	461a      	mov	r2, r3
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	4322      	orrs	r2, r4
 800a984:	b292      	uxth	r2, r2
 800a986:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fa fe9d 	bl	80056cc <pbuf_clen>
 800a992:	4603      	mov	r3, r0
 800a994:	461a      	mov	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a99c:	4413      	add	r3, r2
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fa fe8e 	bl	80056cc <pbuf_clen>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a9ba:	4413      	add	r3, r2
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	69fa      	ldr	r2, [r7, #28]
 800a9d0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d103      	bne.n	800a9e2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	e016      	b.n	800aa14 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a9e6:	bf00      	nop
 800a9e8:	e002      	b.n	800a9f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a9ea:	bf00      	nop
 800a9ec:	e000      	b.n	800a9f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a9ee:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d006      	beq.n	800aa04 <tcp_split_unsent_seg+0x25c>
 800a9f6:	4b09      	ldr	r3, [pc, #36]	; (800aa1c <tcp_split_unsent_seg+0x274>)
 800a9f8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a9fc:	490d      	ldr	r1, [pc, #52]	; (800aa34 <tcp_split_unsent_seg+0x28c>)
 800a9fe:	4809      	ldr	r0, [pc, #36]	; (800aa24 <tcp_split_unsent_seg+0x27c>)
 800aa00:	f004 f816 	bl	800ea30 <iprintf>
  if (p != NULL) {
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d002      	beq.n	800aa10 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800aa0a:	6938      	ldr	r0, [r7, #16]
 800aa0c:	f7fa fdd6 	bl	80055bc <pbuf_free>
  }

  return ERR_MEM;
 800aa10:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3724      	adds	r7, #36	; 0x24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd90      	pop	{r4, r7, pc}
 800aa1c:	08010fa8 	.word	0x08010fa8
 800aa20:	0801133c 	.word	0x0801133c
 800aa24:	08010ffc 	.word	0x08010ffc
 800aa28:	08011360 	.word	0x08011360
 800aa2c:	08011384 	.word	0x08011384
 800aa30:	08011394 	.word	0x08011394
 800aa34:	080113a4 	.word	0x080113a4

0800aa38 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800aa38:	b590      	push	{r4, r7, lr}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d106      	bne.n	800aa54 <tcp_send_fin+0x1c>
 800aa46:	4b21      	ldr	r3, [pc, #132]	; (800aacc <tcp_send_fin+0x94>)
 800aa48:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800aa4c:	4920      	ldr	r1, [pc, #128]	; (800aad0 <tcp_send_fin+0x98>)
 800aa4e:	4821      	ldr	r0, [pc, #132]	; (800aad4 <tcp_send_fin+0x9c>)
 800aa50:	f003 ffee 	bl	800ea30 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d02e      	beq.n	800aaba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa60:	60fb      	str	r3, [r7, #12]
 800aa62:	e002      	b.n	800aa6a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1f8      	bne.n	800aa64 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	899b      	ldrh	r3, [r3, #12]
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7f9 fa40 	bl	8003f00 <lwip_htons>
 800aa80:	4603      	mov	r3, r0
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	f003 0307 	and.w	r3, r3, #7
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d116      	bne.n	800aaba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	899b      	ldrh	r3, [r3, #12]
 800aa92:	b29c      	uxth	r4, r3
 800aa94:	2001      	movs	r0, #1
 800aa96:	f7f9 fa33 	bl	8003f00 <lwip_htons>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	4322      	orrs	r2, r4
 800aaa4:	b292      	uxth	r2, r2
 800aaa6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	8b5b      	ldrh	r3, [r3, #26]
 800aaac:	f043 0320 	orr.w	r3, r3, #32
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	e004      	b.n	800aac4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800aaba:	2101      	movs	r1, #1
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f80b 	bl	800aad8 <tcp_enqueue_flags>
 800aac2:	4603      	mov	r3, r0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd90      	pop	{r4, r7, pc}
 800aacc:	08010fa8 	.word	0x08010fa8
 800aad0:	080113b0 	.word	0x080113b0
 800aad4:	08010ffc 	.word	0x08010ffc

0800aad8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b08a      	sub	sp, #40	; 0x28
 800aadc:	af02      	add	r7, sp, #8
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	460b      	mov	r3, r1
 800aae2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800aaec:	78fb      	ldrb	r3, [r7, #3]
 800aaee:	f003 0303 	and.w	r3, r3, #3
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d106      	bne.n	800ab04 <tcp_enqueue_flags+0x2c>
 800aaf6:	4b67      	ldr	r3, [pc, #412]	; (800ac94 <tcp_enqueue_flags+0x1bc>)
 800aaf8:	f240 4211 	movw	r2, #1041	; 0x411
 800aafc:	4966      	ldr	r1, [pc, #408]	; (800ac98 <tcp_enqueue_flags+0x1c0>)
 800aafe:	4867      	ldr	r0, [pc, #412]	; (800ac9c <tcp_enqueue_flags+0x1c4>)
 800ab00:	f003 ff96 	bl	800ea30 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d106      	bne.n	800ab18 <tcp_enqueue_flags+0x40>
 800ab0a:	4b62      	ldr	r3, [pc, #392]	; (800ac94 <tcp_enqueue_flags+0x1bc>)
 800ab0c:	f240 4213 	movw	r2, #1043	; 0x413
 800ab10:	4963      	ldr	r1, [pc, #396]	; (800aca0 <tcp_enqueue_flags+0x1c8>)
 800ab12:	4862      	ldr	r0, [pc, #392]	; (800ac9c <tcp_enqueue_flags+0x1c4>)
 800ab14:	f003 ff8c 	bl	800ea30 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ab18:	78fb      	ldrb	r3, [r7, #3]
 800ab1a:	f003 0302 	and.w	r3, r3, #2
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d001      	beq.n	800ab26 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ab22:	2301      	movs	r3, #1
 800ab24:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ab26:	7ffb      	ldrb	r3, [r7, #31]
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	2036      	movs	r0, #54	; 0x36
 800ab3e:	f7fa fa59 	bl	8004ff4 <pbuf_alloc>
 800ab42:	6138      	str	r0, [r7, #16]
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d109      	bne.n	800ab5e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	8b5b      	ldrh	r3, [r3, #26]
 800ab4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab52:	b29a      	uxth	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ab58:	f04f 33ff 	mov.w	r3, #4294967295
 800ab5c:	e095      	b.n	800ac8a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	895a      	ldrh	r2, [r3, #10]
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d206      	bcs.n	800ab78 <tcp_enqueue_flags+0xa0>
 800ab6a:	4b4a      	ldr	r3, [pc, #296]	; (800ac94 <tcp_enqueue_flags+0x1bc>)
 800ab6c:	f240 4239 	movw	r2, #1081	; 0x439
 800ab70:	494c      	ldr	r1, [pc, #304]	; (800aca4 <tcp_enqueue_flags+0x1cc>)
 800ab72:	484a      	ldr	r0, [pc, #296]	; (800ac9c <tcp_enqueue_flags+0x1c4>)
 800ab74:	f003 ff5c 	bl	800ea30 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ab7c:	78fa      	ldrb	r2, [r7, #3]
 800ab7e:	7ffb      	ldrb	r3, [r7, #31]
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	460b      	mov	r3, r1
 800ab84:	6939      	ldr	r1, [r7, #16]
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7ff f918 	bl	8009dbc <tcp_create_segment>
 800ab8c:	60f8      	str	r0, [r7, #12]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d109      	bne.n	800aba8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	8b5b      	ldrh	r3, [r3, #26]
 800ab98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800aba2:	f04f 33ff 	mov.w	r3, #4294967295
 800aba6:	e070      	b.n	800ac8a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	f003 0303 	and.w	r3, r3, #3
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d006      	beq.n	800abc2 <tcp_enqueue_flags+0xea>
 800abb4:	4b37      	ldr	r3, [pc, #220]	; (800ac94 <tcp_enqueue_flags+0x1bc>)
 800abb6:	f240 4242 	movw	r2, #1090	; 0x442
 800abba:	493b      	ldr	r1, [pc, #236]	; (800aca8 <tcp_enqueue_flags+0x1d0>)
 800abbc:	4837      	ldr	r0, [pc, #220]	; (800ac9c <tcp_enqueue_flags+0x1c4>)
 800abbe:	f003 ff37 	bl	800ea30 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	891b      	ldrh	r3, [r3, #8]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d006      	beq.n	800abd8 <tcp_enqueue_flags+0x100>
 800abca:	4b32      	ldr	r3, [pc, #200]	; (800ac94 <tcp_enqueue_flags+0x1bc>)
 800abcc:	f240 4243 	movw	r2, #1091	; 0x443
 800abd0:	4936      	ldr	r1, [pc, #216]	; (800acac <tcp_enqueue_flags+0x1d4>)
 800abd2:	4832      	ldr	r0, [pc, #200]	; (800ac9c <tcp_enqueue_flags+0x1c4>)
 800abd4:	f003 ff2c 	bl	800ea30 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d103      	bne.n	800abe8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	66da      	str	r2, [r3, #108]	; 0x6c
 800abe6:	e00d      	b.n	800ac04 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abec:	61bb      	str	r3, [r7, #24]
 800abee:	e002      	b.n	800abf6 <tcp_enqueue_flags+0x11e>
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	61bb      	str	r3, [r7, #24]
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1f8      	bne.n	800abf0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ac0c:	78fb      	ldrb	r3, [r7, #3]
 800ac0e:	f003 0302 	and.w	r3, r3, #2
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d104      	bne.n	800ac20 <tcp_enqueue_flags+0x148>
 800ac16:	78fb      	ldrb	r3, [r7, #3]
 800ac18:	f003 0301 	and.w	r3, r3, #1
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d004      	beq.n	800ac2a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac24:	1c5a      	adds	r2, r3, #1
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ac2a:	78fb      	ldrb	r3, [r7, #3]
 800ac2c:	f003 0301 	and.w	r3, r3, #1
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d006      	beq.n	800ac42 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	8b5b      	ldrh	r3, [r3, #26]
 800ac38:	f043 0320 	orr.w	r3, r3, #32
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fa fd40 	bl	80056cc <pbuf_clen>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	461a      	mov	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac56:	4413      	add	r3, r2
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00e      	beq.n	800ac88 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d10a      	bne.n	800ac88 <tcp_enqueue_flags+0x1b0>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d106      	bne.n	800ac88 <tcp_enqueue_flags+0x1b0>
 800ac7a:	4b06      	ldr	r3, [pc, #24]	; (800ac94 <tcp_enqueue_flags+0x1bc>)
 800ac7c:	f240 4265 	movw	r2, #1125	; 0x465
 800ac80:	490b      	ldr	r1, [pc, #44]	; (800acb0 <tcp_enqueue_flags+0x1d8>)
 800ac82:	4806      	ldr	r0, [pc, #24]	; (800ac9c <tcp_enqueue_flags+0x1c4>)
 800ac84:	f003 fed4 	bl	800ea30 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3720      	adds	r7, #32
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	08010fa8 	.word	0x08010fa8
 800ac98:	080113cc 	.word	0x080113cc
 800ac9c:	08010ffc 	.word	0x08010ffc
 800aca0:	08011424 	.word	0x08011424
 800aca4:	08011444 	.word	0x08011444
 800aca8:	08011480 	.word	0x08011480
 800acac:	08011498 	.word	0x08011498
 800acb0:	080114c4 	.word	0x080114c4

0800acb4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800acb4:	b5b0      	push	{r4, r5, r7, lr}
 800acb6:	b08a      	sub	sp, #40	; 0x28
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <tcp_output+0x1c>
 800acc2:	4b8a      	ldr	r3, [pc, #552]	; (800aeec <tcp_output+0x238>)
 800acc4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800acc8:	4989      	ldr	r1, [pc, #548]	; (800aef0 <tcp_output+0x23c>)
 800acca:	488a      	ldr	r0, [pc, #552]	; (800aef4 <tcp_output+0x240>)
 800accc:	f003 feb0 	bl	800ea30 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	7d1b      	ldrb	r3, [r3, #20]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d106      	bne.n	800ace6 <tcp_output+0x32>
 800acd8:	4b84      	ldr	r3, [pc, #528]	; (800aeec <tcp_output+0x238>)
 800acda:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800acde:	4986      	ldr	r1, [pc, #536]	; (800aef8 <tcp_output+0x244>)
 800ace0:	4884      	ldr	r0, [pc, #528]	; (800aef4 <tcp_output+0x240>)
 800ace2:	f003 fea5 	bl	800ea30 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ace6:	4b85      	ldr	r3, [pc, #532]	; (800aefc <tcp_output+0x248>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	429a      	cmp	r2, r3
 800acee:	d101      	bne.n	800acf4 <tcp_output+0x40>
    return ERR_OK;
 800acf0:	2300      	movs	r3, #0
 800acf2:	e1ce      	b.n	800b092 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad00:	4293      	cmp	r3, r2
 800ad02:	bf28      	it	cs
 800ad04:	4613      	movcs	r3, r2
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ad10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10b      	bne.n	800ad2e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	8b5b      	ldrh	r3, [r3, #26]
 800ad1a:	f003 0302 	and.w	r3, r3, #2
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f000 81aa 	beq.w	800b078 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fdcb 	bl	800b8c0 <tcp_send_empty_ack>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	e1b1      	b.n	800b092 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ad2e:	6879      	ldr	r1, [r7, #4]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3304      	adds	r3, #4
 800ad34:	461a      	mov	r2, r3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff f824 	bl	8009d84 <tcp_route>
 800ad3c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d102      	bne.n	800ad4a <tcp_output+0x96>
    return ERR_RTE;
 800ad44:	f06f 0303 	mvn.w	r3, #3
 800ad48:	e1a3      	b.n	800b092 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d003      	beq.n	800ad58 <tcp_output+0xa4>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d111      	bne.n	800ad7c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d002      	beq.n	800ad64 <tcp_output+0xb0>
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	3304      	adds	r3, #4
 800ad62:	e000      	b.n	800ad66 <tcp_output+0xb2>
 800ad64:	2300      	movs	r3, #0
 800ad66:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d102      	bne.n	800ad74 <tcp_output+0xc0>
      return ERR_RTE;
 800ad6e:	f06f 0303 	mvn.w	r3, #3
 800ad72:	e18e      	b.n	800b092 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7f9 f8d1 	bl	8003f2a <lwip_htonl>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad92:	8912      	ldrh	r2, [r2, #8]
 800ad94:	4413      	add	r3, r2
 800ad96:	69ba      	ldr	r2, [r7, #24]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d227      	bcs.n	800adec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ada2:	461a      	mov	r2, r3
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d114      	bne.n	800add4 <tcp_output+0x120>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d110      	bne.n	800add4 <tcp_output+0x120>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10b      	bne.n	800add4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	8b5b      	ldrh	r3, [r3, #26]
 800add8:	f003 0302 	and.w	r3, r3, #2
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 814d 	beq.w	800b07c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fd6c 	bl	800b8c0 <tcp_send_empty_ack>
 800ade8:	4603      	mov	r3, r0
 800adea:	e152      	b.n	800b092 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f000 811c 	beq.w	800b03a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ae02:	e002      	b.n	800ae0a <tcp_output+0x156>
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	623b      	str	r3, [r7, #32]
 800ae0a:	6a3b      	ldr	r3, [r7, #32]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1f8      	bne.n	800ae04 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ae12:	e112      	b.n	800b03a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	899b      	ldrh	r3, [r3, #12]
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7f9 f86f 	bl	8003f00 <lwip_htons>
 800ae22:	4603      	mov	r3, r0
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	f003 0304 	and.w	r3, r3, #4
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d006      	beq.n	800ae3c <tcp_output+0x188>
 800ae2e:	4b2f      	ldr	r3, [pc, #188]	; (800aeec <tcp_output+0x238>)
 800ae30:	f240 5236 	movw	r2, #1334	; 0x536
 800ae34:	4932      	ldr	r1, [pc, #200]	; (800af00 <tcp_output+0x24c>)
 800ae36:	482f      	ldr	r0, [pc, #188]	; (800aef4 <tcp_output+0x240>)
 800ae38:	f003 fdfa 	bl	800ea30 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d01f      	beq.n	800ae84 <tcp_output+0x1d0>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	8b5b      	ldrh	r3, [r3, #26]
 800ae48:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d119      	bne.n	800ae84 <tcp_output+0x1d0>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00b      	beq.n	800ae70 <tcp_output+0x1bc>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d110      	bne.n	800ae84 <tcp_output+0x1d0>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae66:	891a      	ldrh	r2, [r3, #8]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d209      	bcs.n	800ae84 <tcp_output+0x1d0>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d004      	beq.n	800ae84 <tcp_output+0x1d0>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae80:	2b08      	cmp	r3, #8
 800ae82:	d901      	bls.n	800ae88 <tcp_output+0x1d4>
 800ae84:	2301      	movs	r3, #1
 800ae86:	e000      	b.n	800ae8a <tcp_output+0x1d6>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d106      	bne.n	800ae9c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	8b5b      	ldrh	r3, [r3, #26]
 800ae92:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f000 80e4 	beq.w	800b064 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	7d1b      	ldrb	r3, [r3, #20]
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d00d      	beq.n	800aec0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	899b      	ldrh	r3, [r3, #12]
 800aeaa:	b29c      	uxth	r4, r3
 800aeac:	2010      	movs	r0, #16
 800aeae:	f7f9 f827 	bl	8003f00 <lwip_htons>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	4322      	orrs	r2, r4
 800aebc:	b292      	uxth	r2, r2
 800aebe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800aec0:	697a      	ldr	r2, [r7, #20]
 800aec2:	6879      	ldr	r1, [r7, #4]
 800aec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aec6:	f000 f909 	bl	800b0dc <tcp_output_segment>
 800aeca:	4603      	mov	r3, r0
 800aecc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800aece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d016      	beq.n	800af04 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	8b5b      	ldrh	r3, [r3, #26]
 800aeda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aede:	b29a      	uxth	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	835a      	strh	r2, [r3, #26]
      return err;
 800aee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aee8:	e0d3      	b.n	800b092 <tcp_output+0x3de>
 800aeea:	bf00      	nop
 800aeec:	08010fa8 	.word	0x08010fa8
 800aef0:	080114ec 	.word	0x080114ec
 800aef4:	08010ffc 	.word	0x08010ffc
 800aef8:	08011504 	.word	0x08011504
 800aefc:	2000828c 	.word	0x2000828c
 800af00:	0801152c 	.word	0x0801152c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	7d1b      	ldrb	r3, [r3, #20]
 800af10:	2b02      	cmp	r3, #2
 800af12:	d006      	beq.n	800af22 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	8b5b      	ldrh	r3, [r3, #26]
 800af18:	f023 0303 	bic.w	r3, r3, #3
 800af1c:	b29a      	uxth	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	4618      	mov	r0, r3
 800af2a:	f7f8 fffe 	bl	8003f2a <lwip_htonl>
 800af2e:	4604      	mov	r4, r0
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	891b      	ldrh	r3, [r3, #8]
 800af34:	461d      	mov	r5, r3
 800af36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	899b      	ldrh	r3, [r3, #12]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	4618      	mov	r0, r3
 800af40:	f7f8 ffde 	bl	8003f00 <lwip_htons>
 800af44:	4603      	mov	r3, r0
 800af46:	b2db      	uxtb	r3, r3
 800af48:	f003 0303 	and.w	r3, r3, #3
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <tcp_output+0x2a0>
 800af50:	2301      	movs	r3, #1
 800af52:	e000      	b.n	800af56 <tcp_output+0x2a2>
 800af54:	2300      	movs	r3, #0
 800af56:	442b      	add	r3, r5
 800af58:	4423      	add	r3, r4
 800af5a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	2b00      	cmp	r3, #0
 800af66:	da02      	bge.n	800af6e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af70:	891b      	ldrh	r3, [r3, #8]
 800af72:	461c      	mov	r4, r3
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	899b      	ldrh	r3, [r3, #12]
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7f8 ffbf 	bl	8003f00 <lwip_htons>
 800af82:	4603      	mov	r3, r0
 800af84:	b2db      	uxtb	r3, r3
 800af86:	f003 0303 	and.w	r3, r3, #3
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <tcp_output+0x2de>
 800af8e:	2301      	movs	r3, #1
 800af90:	e000      	b.n	800af94 <tcp_output+0x2e0>
 800af92:	2300      	movs	r3, #0
 800af94:	4423      	add	r3, r4
 800af96:	2b00      	cmp	r3, #0
 800af98:	d049      	beq.n	800b02e <tcp_output+0x37a>
      seg->next = NULL;
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	2200      	movs	r2, #0
 800af9e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d105      	bne.n	800afb4 <tcp_output+0x300>
        pcb->unacked = seg;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afac:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800afae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb0:	623b      	str	r3, [r7, #32]
 800afb2:	e03f      	b.n	800b034 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800afb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	4618      	mov	r0, r3
 800afbc:	f7f8 ffb5 	bl	8003f2a <lwip_htonl>
 800afc0:	4604      	mov	r4, r0
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	4618      	mov	r0, r3
 800afca:	f7f8 ffae 	bl	8003f2a <lwip_htonl>
 800afce:	4603      	mov	r3, r0
 800afd0:	1ae3      	subs	r3, r4, r3
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	da24      	bge.n	800b020 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	3370      	adds	r3, #112	; 0x70
 800afda:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800afdc:	e002      	b.n	800afe4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d011      	beq.n	800b010 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7f8 ff98 	bl	8003f2a <lwip_htonl>
 800affa:	4604      	mov	r4, r0
 800affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	4618      	mov	r0, r3
 800b004:	f7f8 ff91 	bl	8003f2a <lwip_htonl>
 800b008:	4603      	mov	r3, r0
 800b00a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	dbe6      	blt.n	800afde <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b01c:	601a      	str	r2, [r3, #0]
 800b01e:	e009      	b.n	800b034 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b020:	6a3b      	ldr	r3, [r7, #32]
 800b022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b024:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b026:	6a3b      	ldr	r3, [r7, #32]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	623b      	str	r3, [r7, #32]
 800b02c:	e002      	b.n	800b034 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b02e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b030:	f7fb ff01 	bl	8006e36 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b038:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d012      	beq.n	800b066 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	4618      	mov	r0, r3
 800b048:	f7f8 ff6f 	bl	8003f2a <lwip_htonl>
 800b04c:	4602      	mov	r2, r0
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b056:	8912      	ldrh	r2, [r2, #8]
 800b058:	4413      	add	r3, r2
  while (seg != NULL &&
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	f4bf aed9 	bcs.w	800ae14 <tcp_output+0x160>
 800b062:	e000      	b.n	800b066 <tcp_output+0x3b2>
      break;
 800b064:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d108      	bne.n	800b080 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b076:	e004      	b.n	800b082 <tcp_output+0x3ce>
    goto output_done;
 800b078:	bf00      	nop
 800b07a:	e002      	b.n	800b082 <tcp_output+0x3ce>
    goto output_done;
 800b07c:	bf00      	nop
 800b07e:	e000      	b.n	800b082 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b080:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	8b5b      	ldrh	r3, [r3, #26]
 800b086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3728      	adds	r7, #40	; 0x28
 800b096:	46bd      	mov	sp, r7
 800b098:	bdb0      	pop	{r4, r5, r7, pc}
 800b09a:	bf00      	nop

0800b09c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d106      	bne.n	800b0b8 <tcp_output_segment_busy+0x1c>
 800b0aa:	4b09      	ldr	r3, [pc, #36]	; (800b0d0 <tcp_output_segment_busy+0x34>)
 800b0ac:	f240 529a 	movw	r2, #1434	; 0x59a
 800b0b0:	4908      	ldr	r1, [pc, #32]	; (800b0d4 <tcp_output_segment_busy+0x38>)
 800b0b2:	4809      	ldr	r0, [pc, #36]	; (800b0d8 <tcp_output_segment_busy+0x3c>)
 800b0b4:	f003 fcbc 	bl	800ea30 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	7b9b      	ldrb	r3, [r3, #14]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d001      	beq.n	800b0c6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e000      	b.n	800b0c8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	08010fa8 	.word	0x08010fa8
 800b0d4:	08011544 	.word	0x08011544
 800b0d8:	08010ffc 	.word	0x08010ffc

0800b0dc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b0dc:	b5b0      	push	{r4, r5, r7, lr}
 800b0de:	b08c      	sub	sp, #48	; 0x30
 800b0e0:	af04      	add	r7, sp, #16
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d106      	bne.n	800b0fc <tcp_output_segment+0x20>
 800b0ee:	4b64      	ldr	r3, [pc, #400]	; (800b280 <tcp_output_segment+0x1a4>)
 800b0f0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b0f4:	4963      	ldr	r1, [pc, #396]	; (800b284 <tcp_output_segment+0x1a8>)
 800b0f6:	4864      	ldr	r0, [pc, #400]	; (800b288 <tcp_output_segment+0x1ac>)
 800b0f8:	f003 fc9a 	bl	800ea30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d106      	bne.n	800b110 <tcp_output_segment+0x34>
 800b102:	4b5f      	ldr	r3, [pc, #380]	; (800b280 <tcp_output_segment+0x1a4>)
 800b104:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b108:	4960      	ldr	r1, [pc, #384]	; (800b28c <tcp_output_segment+0x1b0>)
 800b10a:	485f      	ldr	r0, [pc, #380]	; (800b288 <tcp_output_segment+0x1ac>)
 800b10c:	f003 fc90 	bl	800ea30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d106      	bne.n	800b124 <tcp_output_segment+0x48>
 800b116:	4b5a      	ldr	r3, [pc, #360]	; (800b280 <tcp_output_segment+0x1a4>)
 800b118:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b11c:	495c      	ldr	r1, [pc, #368]	; (800b290 <tcp_output_segment+0x1b4>)
 800b11e:	485a      	ldr	r0, [pc, #360]	; (800b288 <tcp_output_segment+0x1ac>)
 800b120:	f003 fc86 	bl	800ea30 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f7ff ffb9 	bl	800b09c <tcp_output_segment_busy>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b130:	2300      	movs	r3, #0
 800b132:	e0a1      	b.n	800b278 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	68dc      	ldr	r4, [r3, #12]
 800b13c:	4610      	mov	r0, r2
 800b13e:	f7f8 fef4 	bl	8003f2a <lwip_htonl>
 800b142:	4603      	mov	r3, r0
 800b144:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	68dc      	ldr	r4, [r3, #12]
 800b14e:	4610      	mov	r0, r2
 800b150:	f7f8 fed6 	bl	8003f00 <lwip_htons>
 800b154:	4603      	mov	r3, r0
 800b156:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b160:	441a      	add	r2, r3
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	3314      	adds	r3, #20
 800b16c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	7a9b      	ldrb	r3, [r3, #10]
 800b172:	f003 0301 	and.w	r3, r3, #1
 800b176:	2b00      	cmp	r3, #0
 800b178:	d015      	beq.n	800b1a6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	3304      	adds	r3, #4
 800b17e:	461a      	mov	r2, r3
 800b180:	6879      	ldr	r1, [r7, #4]
 800b182:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b186:	f7fc fa33 	bl	80075f0 <tcp_eff_send_mss_netif>
 800b18a:	4603      	mov	r3, r0
 800b18c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b18e:	8b7b      	ldrh	r3, [r7, #26]
 800b190:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b194:	4618      	mov	r0, r3
 800b196:	f7f8 fec8 	bl	8003f2a <lwip_htonl>
 800b19a:	4602      	mov	r2, r0
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	da02      	bge.n	800b1b6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d10c      	bne.n	800b1d8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b1be:	4b35      	ldr	r3, [pc, #212]	; (800b294 <tcp_output_segment+0x1b8>)
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7f8 feac 	bl	8003f2a <lwip_htonl>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68da      	ldr	r2, [r3, #12]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	8959      	ldrh	r1, [r3, #10]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	8b3a      	ldrh	r2, [r7, #24]
 800b1f2:	1a8a      	subs	r2, r1, r2
 800b1f4:	b292      	uxth	r2, r2
 800b1f6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	8919      	ldrh	r1, [r3, #8]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	8b3a      	ldrh	r2, [r7, #24]
 800b204:	1a8a      	subs	r2, r1, r2
 800b206:	b292      	uxth	r2, r2
 800b208:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	68d2      	ldr	r2, [r2, #12]
 800b212:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	741a      	strb	r2, [r3, #16]
 800b21c:	2200      	movs	r2, #0
 800b21e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	68da      	ldr	r2, [r3, #12]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	7a9b      	ldrb	r3, [r3, #10]
 800b228:	f003 0301 	and.w	r3, r3, #1
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <tcp_output_segment+0x158>
 800b230:	2318      	movs	r3, #24
 800b232:	e000      	b.n	800b236 <tcp_output_segment+0x15a>
 800b234:	2314      	movs	r3, #20
 800b236:	4413      	add	r3, r2
 800b238:	69fa      	ldr	r2, [r7, #28]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d006      	beq.n	800b24c <tcp_output_segment+0x170>
 800b23e:	4b10      	ldr	r3, [pc, #64]	; (800b280 <tcp_output_segment+0x1a4>)
 800b240:	f240 621c 	movw	r2, #1564	; 0x61c
 800b244:	4914      	ldr	r1, [pc, #80]	; (800b298 <tcp_output_segment+0x1bc>)
 800b246:	4810      	ldr	r0, [pc, #64]	; (800b288 <tcp_output_segment+0x1ac>)
 800b248:	f003 fbf2 	bl	800ea30 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6858      	ldr	r0, [r3, #4]
 800b250:	68b9      	ldr	r1, [r7, #8]
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	1d1c      	adds	r4, r3, #4
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	7add      	ldrb	r5, [r3, #11]
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	7a9b      	ldrb	r3, [r3, #10]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	9202      	str	r2, [sp, #8]
 800b262:	2206      	movs	r2, #6
 800b264:	9201      	str	r2, [sp, #4]
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	462b      	mov	r3, r5
 800b26a:	4622      	mov	r2, r4
 800b26c:	f002 fa34 	bl	800d6d8 <ip4_output_if>
 800b270:	4603      	mov	r3, r0
 800b272:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b274:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3720      	adds	r7, #32
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bdb0      	pop	{r4, r5, r7, pc}
 800b280:	08010fa8 	.word	0x08010fa8
 800b284:	0801156c 	.word	0x0801156c
 800b288:	08010ffc 	.word	0x08010ffc
 800b28c:	0801158c 	.word	0x0801158c
 800b290:	080115ac 	.word	0x080115ac
 800b294:	20008240 	.word	0x20008240
 800b298:	080115d0 	.word	0x080115d0

0800b29c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b29c:	b5b0      	push	{r4, r5, r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d106      	bne.n	800b2b8 <tcp_rexmit_rto_prepare+0x1c>
 800b2aa:	4b31      	ldr	r3, [pc, #196]	; (800b370 <tcp_rexmit_rto_prepare+0xd4>)
 800b2ac:	f240 6263 	movw	r2, #1635	; 0x663
 800b2b0:	4930      	ldr	r1, [pc, #192]	; (800b374 <tcp_rexmit_rto_prepare+0xd8>)
 800b2b2:	4831      	ldr	r0, [pc, #196]	; (800b378 <tcp_rexmit_rto_prepare+0xdc>)
 800b2b4:	f003 fbbc 	bl	800ea30 <iprintf>

  if (pcb->unacked == NULL) {
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d102      	bne.n	800b2c6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b2c0:	f06f 0305 	mvn.w	r3, #5
 800b2c4:	e050      	b.n	800b368 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	e00b      	b.n	800b2e6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	f7ff fee4 	bl	800b09c <tcp_output_segment_busy>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d002      	beq.n	800b2e0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b2da:	f06f 0305 	mvn.w	r3, #5
 800b2de:	e043      	b.n	800b368 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	60fb      	str	r3, [r7, #12]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1ef      	bne.n	800b2ce <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f7ff fed4 	bl	800b09c <tcp_output_segment_busy>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d002      	beq.n	800b300 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b2fa:	f06f 0305 	mvn.w	r3, #5
 800b2fe:	e033      	b.n	800b368 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	8b5b      	ldrh	r3, [r3, #26]
 800b31a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b31e:	b29a      	uxth	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7f8 fdfd 	bl	8003f2a <lwip_htonl>
 800b330:	4604      	mov	r4, r0
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	891b      	ldrh	r3, [r3, #8]
 800b336:	461d      	mov	r5, r3
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	899b      	ldrh	r3, [r3, #12]
 800b33e:	b29b      	uxth	r3, r3
 800b340:	4618      	mov	r0, r3
 800b342:	f7f8 fddd 	bl	8003f00 <lwip_htons>
 800b346:	4603      	mov	r3, r0
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	f003 0303 	and.w	r3, r3, #3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <tcp_rexmit_rto_prepare+0xba>
 800b352:	2301      	movs	r3, #1
 800b354:	e000      	b.n	800b358 <tcp_rexmit_rto_prepare+0xbc>
 800b356:	2300      	movs	r3, #0
 800b358:	442b      	add	r3, r5
 800b35a:	18e2      	adds	r2, r4, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bdb0      	pop	{r4, r5, r7, pc}
 800b370:	08010fa8 	.word	0x08010fa8
 800b374:	080115e4 	.word	0x080115e4
 800b378:	08010ffc 	.word	0x08010ffc

0800b37c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d106      	bne.n	800b398 <tcp_rexmit_rto_commit+0x1c>
 800b38a:	4b0d      	ldr	r3, [pc, #52]	; (800b3c0 <tcp_rexmit_rto_commit+0x44>)
 800b38c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b390:	490c      	ldr	r1, [pc, #48]	; (800b3c4 <tcp_rexmit_rto_commit+0x48>)
 800b392:	480d      	ldr	r0, [pc, #52]	; (800b3c8 <tcp_rexmit_rto_commit+0x4c>)
 800b394:	f003 fb4c 	bl	800ea30 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b39e:	2bff      	cmp	r3, #255	; 0xff
 800b3a0:	d007      	beq.n	800b3b2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7ff fc7e 	bl	800acb4 <tcp_output>
}
 800b3b8:	bf00      	nop
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	08010fa8 	.word	0x08010fa8
 800b3c4:	08011608 	.word	0x08011608
 800b3c8:	08010ffc 	.word	0x08010ffc

0800b3cc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d106      	bne.n	800b3e8 <tcp_rexmit_rto+0x1c>
 800b3da:	4b0a      	ldr	r3, [pc, #40]	; (800b404 <tcp_rexmit_rto+0x38>)
 800b3dc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b3e0:	4909      	ldr	r1, [pc, #36]	; (800b408 <tcp_rexmit_rto+0x3c>)
 800b3e2:	480a      	ldr	r0, [pc, #40]	; (800b40c <tcp_rexmit_rto+0x40>)
 800b3e4:	f003 fb24 	bl	800ea30 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7ff ff57 	bl	800b29c <tcp_rexmit_rto_prepare>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d102      	bne.n	800b3fa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f7ff ffc1 	bl	800b37c <tcp_rexmit_rto_commit>
  }
}
 800b3fa:	bf00      	nop
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	08010fa8 	.word	0x08010fa8
 800b408:	0801162c 	.word	0x0801162c
 800b40c:	08010ffc 	.word	0x08010ffc

0800b410 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b410:	b590      	push	{r4, r7, lr}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d106      	bne.n	800b42c <tcp_rexmit+0x1c>
 800b41e:	4b2f      	ldr	r3, [pc, #188]	; (800b4dc <tcp_rexmit+0xcc>)
 800b420:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b424:	492e      	ldr	r1, [pc, #184]	; (800b4e0 <tcp_rexmit+0xd0>)
 800b426:	482f      	ldr	r0, [pc, #188]	; (800b4e4 <tcp_rexmit+0xd4>)
 800b428:	f003 fb02 	bl	800ea30 <iprintf>

  if (pcb->unacked == NULL) {
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b430:	2b00      	cmp	r3, #0
 800b432:	d102      	bne.n	800b43a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b434:	f06f 0305 	mvn.w	r3, #5
 800b438:	e04c      	b.n	800b4d4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b43e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b440:	68b8      	ldr	r0, [r7, #8]
 800b442:	f7ff fe2b 	bl	800b09c <tcp_output_segment_busy>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d002      	beq.n	800b452 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b44c:	f06f 0305 	mvn.w	r3, #5
 800b450:	e040      	b.n	800b4d4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	336c      	adds	r3, #108	; 0x6c
 800b45e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b460:	e002      	b.n	800b468 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d011      	beq.n	800b494 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	4618      	mov	r0, r3
 800b47a:	f7f8 fd56 	bl	8003f2a <lwip_htonl>
 800b47e:	4604      	mov	r4, r0
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	4618      	mov	r0, r3
 800b488:	f7f8 fd4f 	bl	8003f2a <lwip_htonl>
 800b48c:	4603      	mov	r3, r0
 800b48e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b490:	2b00      	cmp	r3, #0
 800b492:	dbe6      	blt.n	800b462 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	68ba      	ldr	r2, [r7, #8]
 800b4a0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d103      	bne.n	800b4b2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4b8:	2bff      	cmp	r3, #255	; 0xff
 800b4ba:	d007      	beq.n	800b4cc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	b2da      	uxtb	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd90      	pop	{r4, r7, pc}
 800b4dc:	08010fa8 	.word	0x08010fa8
 800b4e0:	08011648 	.word	0x08011648
 800b4e4:	08010ffc 	.word	0x08010ffc

0800b4e8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d106      	bne.n	800b504 <tcp_rexmit_fast+0x1c>
 800b4f6:	4b2a      	ldr	r3, [pc, #168]	; (800b5a0 <tcp_rexmit_fast+0xb8>)
 800b4f8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b4fc:	4929      	ldr	r1, [pc, #164]	; (800b5a4 <tcp_rexmit_fast+0xbc>)
 800b4fe:	482a      	ldr	r0, [pc, #168]	; (800b5a8 <tcp_rexmit_fast+0xc0>)
 800b500:	f003 fa96 	bl	800ea30 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d044      	beq.n	800b596 <tcp_rexmit_fast+0xae>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	8b5b      	ldrh	r3, [r3, #26]
 800b510:	f003 0304 	and.w	r3, r3, #4
 800b514:	2b00      	cmp	r3, #0
 800b516:	d13e      	bne.n	800b596 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7ff ff79 	bl	800b410 <tcp_rexmit>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d138      	bne.n	800b596 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b530:	4293      	cmp	r3, r2
 800b532:	bf28      	it	cs
 800b534:	4613      	movcs	r3, r2
 800b536:	b29b      	uxth	r3, r3
 800b538:	0fda      	lsrs	r2, r3, #31
 800b53a:	4413      	add	r3, r2
 800b53c:	105b      	asrs	r3, r3, #1
 800b53e:	b29a      	uxth	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b54c:	461a      	mov	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b552:	005b      	lsls	r3, r3, #1
 800b554:	429a      	cmp	r2, r3
 800b556:	d206      	bcs.n	800b566 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	b29a      	uxth	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b570:	4619      	mov	r1, r3
 800b572:	0049      	lsls	r1, r1, #1
 800b574:	440b      	add	r3, r1
 800b576:	b29b      	uxth	r3, r3
 800b578:	4413      	add	r3, r2
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	8b5b      	ldrh	r3, [r3, #26]
 800b586:	f043 0304 	orr.w	r3, r3, #4
 800b58a:	b29a      	uxth	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b596:	bf00      	nop
 800b598:	3708      	adds	r7, #8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	08010fa8 	.word	0x08010fa8
 800b5a4:	08011660 	.word	0x08011660
 800b5a8:	08010ffc 	.word	0x08010ffc

0800b5ac <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	607b      	str	r3, [r7, #4]
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	817b      	strh	r3, [r7, #10]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b5be:	897a      	ldrh	r2, [r7, #10]
 800b5c0:	893b      	ldrh	r3, [r7, #8]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	3314      	adds	r3, #20
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	2022      	movs	r0, #34	; 0x22
 800b5d2:	f7f9 fd0f 	bl	8004ff4 <pbuf_alloc>
 800b5d6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d04d      	beq.n	800b67a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b5de:	897b      	ldrh	r3, [r7, #10]
 800b5e0:	3313      	adds	r3, #19
 800b5e2:	697a      	ldr	r2, [r7, #20]
 800b5e4:	8952      	ldrh	r2, [r2, #10]
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	db06      	blt.n	800b5f8 <tcp_output_alloc_header_common+0x4c>
 800b5ea:	4b26      	ldr	r3, [pc, #152]	; (800b684 <tcp_output_alloc_header_common+0xd8>)
 800b5ec:	f240 7223 	movw	r2, #1827	; 0x723
 800b5f0:	4925      	ldr	r1, [pc, #148]	; (800b688 <tcp_output_alloc_header_common+0xdc>)
 800b5f2:	4826      	ldr	r0, [pc, #152]	; (800b68c <tcp_output_alloc_header_common+0xe0>)
 800b5f4:	f003 fa1c 	bl	800ea30 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b5fe:	8c3b      	ldrh	r3, [r7, #32]
 800b600:	4618      	mov	r0, r3
 800b602:	f7f8 fc7d 	bl	8003f00 <lwip_htons>
 800b606:	4603      	mov	r3, r0
 800b608:	461a      	mov	r2, r3
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b60e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b610:	4618      	mov	r0, r3
 800b612:	f7f8 fc75 	bl	8003f00 <lwip_htons>
 800b616:	4603      	mov	r3, r0
 800b618:	461a      	mov	r2, r3
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f7f8 fc80 	bl	8003f2a <lwip_htonl>
 800b62a:	4602      	mov	r2, r0
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b630:	897b      	ldrh	r3, [r7, #10]
 800b632:	089b      	lsrs	r3, r3, #2
 800b634:	b29b      	uxth	r3, r3
 800b636:	3305      	adds	r3, #5
 800b638:	b29b      	uxth	r3, r3
 800b63a:	031b      	lsls	r3, r3, #12
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b642:	b29b      	uxth	r3, r3
 800b644:	4313      	orrs	r3, r2
 800b646:	b29b      	uxth	r3, r3
 800b648:	4618      	mov	r0, r3
 800b64a:	f7f8 fc59 	bl	8003f00 <lwip_htons>
 800b64e:	4603      	mov	r3, r0
 800b650:	461a      	mov	r2, r3
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b656:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b658:	4618      	mov	r0, r3
 800b65a:	f7f8 fc51 	bl	8003f00 <lwip_htons>
 800b65e:	4603      	mov	r3, r0
 800b660:	461a      	mov	r2, r3
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	2200      	movs	r2, #0
 800b66a:	741a      	strb	r2, [r3, #16]
 800b66c:	2200      	movs	r2, #0
 800b66e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	2200      	movs	r2, #0
 800b674:	749a      	strb	r2, [r3, #18]
 800b676:	2200      	movs	r2, #0
 800b678:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b67a:	697b      	ldr	r3, [r7, #20]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3718      	adds	r7, #24
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	08010fa8 	.word	0x08010fa8
 800b688:	08011680 	.word	0x08011680
 800b68c:	08010ffc 	.word	0x08010ffc

0800b690 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b690:	b5b0      	push	{r4, r5, r7, lr}
 800b692:	b08a      	sub	sp, #40	; 0x28
 800b694:	af04      	add	r7, sp, #16
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	607b      	str	r3, [r7, #4]
 800b69a:	460b      	mov	r3, r1
 800b69c:	817b      	strh	r3, [r7, #10]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d106      	bne.n	800b6b6 <tcp_output_alloc_header+0x26>
 800b6a8:	4b15      	ldr	r3, [pc, #84]	; (800b700 <tcp_output_alloc_header+0x70>)
 800b6aa:	f240 7242 	movw	r2, #1858	; 0x742
 800b6ae:	4915      	ldr	r1, [pc, #84]	; (800b704 <tcp_output_alloc_header+0x74>)
 800b6b0:	4815      	ldr	r0, [pc, #84]	; (800b708 <tcp_output_alloc_header+0x78>)
 800b6b2:	f003 f9bd 	bl	800ea30 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	8adb      	ldrh	r3, [r3, #22]
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	8b12      	ldrh	r2, [r2, #24]
 800b6c2:	68f9      	ldr	r1, [r7, #12]
 800b6c4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b6c6:	893d      	ldrh	r5, [r7, #8]
 800b6c8:	897c      	ldrh	r4, [r7, #10]
 800b6ca:	9103      	str	r1, [sp, #12]
 800b6cc:	2110      	movs	r1, #16
 800b6ce:	9102      	str	r1, [sp, #8]
 800b6d0:	9201      	str	r2, [sp, #4]
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	462a      	mov	r2, r5
 800b6d8:	4621      	mov	r1, r4
 800b6da:	f7ff ff67 	bl	800b5ac <tcp_output_alloc_header_common>
 800b6de:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d006      	beq.n	800b6f4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b6ee:	441a      	add	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b6f4:	697b      	ldr	r3, [r7, #20]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3718      	adds	r7, #24
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bdb0      	pop	{r4, r5, r7, pc}
 800b6fe:	bf00      	nop
 800b700:	08010fa8 	.word	0x08010fa8
 800b704:	080116b0 	.word	0x080116b0
 800b708:	08010ffc 	.word	0x08010ffc

0800b70c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b088      	sub	sp, #32
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	4611      	mov	r1, r2
 800b718:	461a      	mov	r2, r3
 800b71a:	460b      	mov	r3, r1
 800b71c:	71fb      	strb	r3, [r7, #7]
 800b71e:	4613      	mov	r3, r2
 800b720:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b722:	2300      	movs	r3, #0
 800b724:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d106      	bne.n	800b73a <tcp_output_fill_options+0x2e>
 800b72c:	4b12      	ldr	r3, [pc, #72]	; (800b778 <tcp_output_fill_options+0x6c>)
 800b72e:	f240 7256 	movw	r2, #1878	; 0x756
 800b732:	4912      	ldr	r1, [pc, #72]	; (800b77c <tcp_output_fill_options+0x70>)
 800b734:	4812      	ldr	r0, [pc, #72]	; (800b780 <tcp_output_fill_options+0x74>)
 800b736:	f003 f97b 	bl	800ea30 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	3314      	adds	r3, #20
 800b744:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b746:	8bfb      	ldrh	r3, [r7, #30]
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	461a      	mov	r2, r3
 800b74c:	79fb      	ldrb	r3, [r7, #7]
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	f003 0304 	and.w	r3, r3, #4
 800b754:	4413      	add	r3, r2
 800b756:	3314      	adds	r3, #20
 800b758:	69ba      	ldr	r2, [r7, #24]
 800b75a:	4413      	add	r3, r2
 800b75c:	697a      	ldr	r2, [r7, #20]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d006      	beq.n	800b770 <tcp_output_fill_options+0x64>
 800b762:	4b05      	ldr	r3, [pc, #20]	; (800b778 <tcp_output_fill_options+0x6c>)
 800b764:	f240 7275 	movw	r2, #1909	; 0x775
 800b768:	4906      	ldr	r1, [pc, #24]	; (800b784 <tcp_output_fill_options+0x78>)
 800b76a:	4805      	ldr	r0, [pc, #20]	; (800b780 <tcp_output_fill_options+0x74>)
 800b76c:	f003 f960 	bl	800ea30 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b770:	bf00      	nop
 800b772:	3720      	adds	r7, #32
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	08010fa8 	.word	0x08010fa8
 800b77c:	080116d8 	.word	0x080116d8
 800b780:	08010ffc 	.word	0x08010ffc
 800b784:	080115d0 	.word	0x080115d0

0800b788 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08a      	sub	sp, #40	; 0x28
 800b78c:	af04      	add	r7, sp, #16
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
 800b794:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d106      	bne.n	800b7aa <tcp_output_control_segment+0x22>
 800b79c:	4b1c      	ldr	r3, [pc, #112]	; (800b810 <tcp_output_control_segment+0x88>)
 800b79e:	f240 7287 	movw	r2, #1927	; 0x787
 800b7a2:	491c      	ldr	r1, [pc, #112]	; (800b814 <tcp_output_control_segment+0x8c>)
 800b7a4:	481c      	ldr	r0, [pc, #112]	; (800b818 <tcp_output_control_segment+0x90>)
 800b7a6:	f003 f943 	bl	800ea30 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	6879      	ldr	r1, [r7, #4]
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f7fe fae8 	bl	8009d84 <tcp_route>
 800b7b4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d102      	bne.n	800b7c2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b7bc:	23fc      	movs	r3, #252	; 0xfc
 800b7be:	75fb      	strb	r3, [r7, #23]
 800b7c0:	e01c      	b.n	800b7fc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d006      	beq.n	800b7d6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	7adb      	ldrb	r3, [r3, #11]
 800b7cc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	7a9b      	ldrb	r3, [r3, #10]
 800b7d2:	757b      	strb	r3, [r7, #21]
 800b7d4:	e003      	b.n	800b7de <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b7d6:	23ff      	movs	r3, #255	; 0xff
 800b7d8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b7de:	7dba      	ldrb	r2, [r7, #22]
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	9302      	str	r3, [sp, #8]
 800b7e4:	2306      	movs	r3, #6
 800b7e6:	9301      	str	r3, [sp, #4]
 800b7e8:	7d7b      	ldrb	r3, [r7, #21]
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	6879      	ldr	r1, [r7, #4]
 800b7f2:	68b8      	ldr	r0, [r7, #8]
 800b7f4:	f001 ff70 	bl	800d6d8 <ip4_output_if>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b7fc:	68b8      	ldr	r0, [r7, #8]
 800b7fe:	f7f9 fedd 	bl	80055bc <pbuf_free>
  return err;
 800b802:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3718      	adds	r7, #24
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	08010fa8 	.word	0x08010fa8
 800b814:	08011700 	.word	0x08011700
 800b818:	08010ffc 	.word	0x08010ffc

0800b81c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b81c:	b590      	push	{r4, r7, lr}
 800b81e:	b08b      	sub	sp, #44	; 0x2c
 800b820:	af04      	add	r7, sp, #16
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d106      	bne.n	800b83e <tcp_rst+0x22>
 800b830:	4b1f      	ldr	r3, [pc, #124]	; (800b8b0 <tcp_rst+0x94>)
 800b832:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b836:	491f      	ldr	r1, [pc, #124]	; (800b8b4 <tcp_rst+0x98>)
 800b838:	481f      	ldr	r0, [pc, #124]	; (800b8b8 <tcp_rst+0x9c>)
 800b83a:	f003 f8f9 	bl	800ea30 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b840:	2b00      	cmp	r3, #0
 800b842:	d106      	bne.n	800b852 <tcp_rst+0x36>
 800b844:	4b1a      	ldr	r3, [pc, #104]	; (800b8b0 <tcp_rst+0x94>)
 800b846:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b84a:	491c      	ldr	r1, [pc, #112]	; (800b8bc <tcp_rst+0xa0>)
 800b84c:	481a      	ldr	r0, [pc, #104]	; (800b8b8 <tcp_rst+0x9c>)
 800b84e:	f003 f8ef 	bl	800ea30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b852:	2300      	movs	r3, #0
 800b854:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b856:	f246 0308 	movw	r3, #24584	; 0x6008
 800b85a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b85c:	7dfb      	ldrb	r3, [r7, #23]
 800b85e:	b29c      	uxth	r4, r3
 800b860:	68b8      	ldr	r0, [r7, #8]
 800b862:	f7f8 fb62 	bl	8003f2a <lwip_htonl>
 800b866:	4602      	mov	r2, r0
 800b868:	8abb      	ldrh	r3, [r7, #20]
 800b86a:	9303      	str	r3, [sp, #12]
 800b86c:	2314      	movs	r3, #20
 800b86e:	9302      	str	r3, [sp, #8]
 800b870:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b872:	9301      	str	r3, [sp, #4]
 800b874:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	4613      	mov	r3, r2
 800b87a:	2200      	movs	r2, #0
 800b87c:	4621      	mov	r1, r4
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7ff fe94 	bl	800b5ac <tcp_output_alloc_header_common>
 800b884:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00c      	beq.n	800b8a6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b88c:	7dfb      	ldrb	r3, [r7, #23]
 800b88e:	2200      	movs	r2, #0
 800b890:	6939      	ldr	r1, [r7, #16]
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f7ff ff3a 	bl	800b70c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	6939      	ldr	r1, [r7, #16]
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f7ff ff72 	bl	800b788 <tcp_output_control_segment>
 800b8a4:	e000      	b.n	800b8a8 <tcp_rst+0x8c>
    return;
 800b8a6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b8a8:	371c      	adds	r7, #28
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd90      	pop	{r4, r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	08010fa8 	.word	0x08010fa8
 800b8b4:	0801172c 	.word	0x0801172c
 800b8b8:	08010ffc 	.word	0x08010ffc
 800b8bc:	08011748 	.word	0x08011748

0800b8c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b8c0:	b590      	push	{r4, r7, lr}
 800b8c2:	b087      	sub	sp, #28
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d106      	bne.n	800b8e4 <tcp_send_empty_ack+0x24>
 800b8d6:	4b28      	ldr	r3, [pc, #160]	; (800b978 <tcp_send_empty_ack+0xb8>)
 800b8d8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b8dc:	4927      	ldr	r1, [pc, #156]	; (800b97c <tcp_send_empty_ack+0xbc>)
 800b8de:	4828      	ldr	r0, [pc, #160]	; (800b980 <tcp_send_empty_ack+0xc0>)
 800b8e0:	f003 f8a6 	bl	800ea30 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b8e4:	7dfb      	ldrb	r3, [r7, #23]
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	f003 0304 	and.w	r3, r3, #4
 800b8ee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b8f0:	7d7b      	ldrb	r3, [r7, #21]
 800b8f2:	b29c      	uxth	r4, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7f8 fb16 	bl	8003f2a <lwip_htonl>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2200      	movs	r2, #0
 800b902:	4621      	mov	r1, r4
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7ff fec3 	bl	800b690 <tcp_output_alloc_header>
 800b90a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d109      	bne.n	800b926 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	8b5b      	ldrh	r3, [r3, #26]
 800b916:	f043 0303 	orr.w	r3, r3, #3
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b920:	f06f 0301 	mvn.w	r3, #1
 800b924:	e023      	b.n	800b96e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b926:	7dbb      	ldrb	r3, [r7, #22]
 800b928:	7dfa      	ldrb	r2, [r7, #23]
 800b92a:	6939      	ldr	r1, [r7, #16]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f7ff feed 	bl	800b70c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	3304      	adds	r3, #4
 800b938:	6939      	ldr	r1, [r7, #16]
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f7ff ff24 	bl	800b788 <tcp_output_control_segment>
 800b940:	4603      	mov	r3, r0
 800b942:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d007      	beq.n	800b95c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	8b5b      	ldrh	r3, [r3, #26]
 800b950:	f043 0303 	orr.w	r3, r3, #3
 800b954:	b29a      	uxth	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	835a      	strh	r2, [r3, #26]
 800b95a:	e006      	b.n	800b96a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	8b5b      	ldrh	r3, [r3, #26]
 800b960:	f023 0303 	bic.w	r3, r3, #3
 800b964:	b29a      	uxth	r2, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b96a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	371c      	adds	r7, #28
 800b972:	46bd      	mov	sp, r7
 800b974:	bd90      	pop	{r4, r7, pc}
 800b976:	bf00      	nop
 800b978:	08010fa8 	.word	0x08010fa8
 800b97c:	08011764 	.word	0x08011764
 800b980:	08010ffc 	.word	0x08010ffc

0800b984 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b984:	b590      	push	{r4, r7, lr}
 800b986:	b087      	sub	sp, #28
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b98c:	2300      	movs	r3, #0
 800b98e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d106      	bne.n	800b9a4 <tcp_keepalive+0x20>
 800b996:	4b18      	ldr	r3, [pc, #96]	; (800b9f8 <tcp_keepalive+0x74>)
 800b998:	f640 0224 	movw	r2, #2084	; 0x824
 800b99c:	4917      	ldr	r1, [pc, #92]	; (800b9fc <tcp_keepalive+0x78>)
 800b99e:	4818      	ldr	r0, [pc, #96]	; (800ba00 <tcp_keepalive+0x7c>)
 800b9a0:	f003 f846 	bl	800ea30 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b9a4:	7dfb      	ldrb	r3, [r7, #23]
 800b9a6:	b29c      	uxth	r4, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7f8 fabb 	bl	8003f2a <lwip_htonl>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	4621      	mov	r1, r4
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f7ff fe68 	bl	800b690 <tcp_output_alloc_header>
 800b9c0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d102      	bne.n	800b9ce <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9cc:	e010      	b.n	800b9f0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b9ce:	7dfb      	ldrb	r3, [r7, #23]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	6939      	ldr	r1, [r7, #16]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f7ff fe99 	bl	800b70c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	3304      	adds	r3, #4
 800b9e0:	6939      	ldr	r1, [r7, #16]
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7ff fed0 	bl	800b788 <tcp_output_control_segment>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b9ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	371c      	adds	r7, #28
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd90      	pop	{r4, r7, pc}
 800b9f8:	08010fa8 	.word	0x08010fa8
 800b9fc:	08011784 	.word	0x08011784
 800ba00:	08010ffc 	.word	0x08010ffc

0800ba04 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ba04:	b590      	push	{r4, r7, lr}
 800ba06:	b08b      	sub	sp, #44	; 0x2c
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d106      	bne.n	800ba26 <tcp_zero_window_probe+0x22>
 800ba18:	4b4c      	ldr	r3, [pc, #304]	; (800bb4c <tcp_zero_window_probe+0x148>)
 800ba1a:	f640 024f 	movw	r2, #2127	; 0x84f
 800ba1e:	494c      	ldr	r1, [pc, #304]	; (800bb50 <tcp_zero_window_probe+0x14c>)
 800ba20:	484c      	ldr	r0, [pc, #304]	; (800bb54 <tcp_zero_window_probe+0x150>)
 800ba22:	f003 f805 	bl	800ea30 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba2a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ba2c:	6a3b      	ldr	r3, [r7, #32]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d101      	bne.n	800ba36 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	e086      	b.n	800bb44 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ba3c:	2bff      	cmp	r3, #255	; 0xff
 800ba3e:	d007      	beq.n	800ba50 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ba46:	3301      	adds	r3, #1
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ba50:	6a3b      	ldr	r3, [r7, #32]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	899b      	ldrh	r3, [r3, #12]
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7f8 fa51 	bl	8003f00 <lwip_htons>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	f003 0301 	and.w	r3, r3, #1
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d005      	beq.n	800ba76 <tcp_zero_window_probe+0x72>
 800ba6a:	6a3b      	ldr	r3, [r7, #32]
 800ba6c:	891b      	ldrh	r3, [r3, #8]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <tcp_zero_window_probe+0x72>
 800ba72:	2301      	movs	r3, #1
 800ba74:	e000      	b.n	800ba78 <tcp_zero_window_probe+0x74>
 800ba76:	2300      	movs	r3, #0
 800ba78:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ba7a:	7ffb      	ldrb	r3, [r7, #31]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	bf0c      	ite	eq
 800ba80:	2301      	moveq	r3, #1
 800ba82:	2300      	movne	r3, #0
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ba88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba8c:	b299      	uxth	r1, r3
 800ba8e:	6a3b      	ldr	r3, [r7, #32]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	8bba      	ldrh	r2, [r7, #28]
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7ff fdfa 	bl	800b690 <tcp_output_alloc_header>
 800ba9c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d102      	bne.n	800baaa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800baa4:	f04f 33ff 	mov.w	r3, #4294967295
 800baa8:	e04c      	b.n	800bb44 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bab0:	7ffb      	ldrb	r3, [r7, #31]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d011      	beq.n	800bada <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	899b      	ldrh	r3, [r3, #12]
 800baba:	b29b      	uxth	r3, r3
 800babc:	b21b      	sxth	r3, r3
 800babe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bac2:	b21c      	sxth	r4, r3
 800bac4:	2011      	movs	r0, #17
 800bac6:	f7f8 fa1b 	bl	8003f00 <lwip_htons>
 800baca:	4603      	mov	r3, r0
 800bacc:	b21b      	sxth	r3, r3
 800bace:	4323      	orrs	r3, r4
 800bad0:	b21b      	sxth	r3, r3
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	819a      	strh	r2, [r3, #12]
 800bad8:	e010      	b.n	800bafc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	3314      	adds	r3, #20
 800bae0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bae2:	6a3b      	ldr	r3, [r7, #32]
 800bae4:	6858      	ldr	r0, [r3, #4]
 800bae6:	6a3b      	ldr	r3, [r7, #32]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	891a      	ldrh	r2, [r3, #8]
 800baec:	6a3b      	ldr	r3, [r7, #32]
 800baee:	891b      	ldrh	r3, [r3, #8]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	2201      	movs	r2, #1
 800baf6:	6939      	ldr	r1, [r7, #16]
 800baf8:	f7f9 ff5a 	bl	80059b0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bafc:	6a3b      	ldr	r3, [r7, #32]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7f8 fa11 	bl	8003f2a <lwip_htonl>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	da02      	bge.n	800bb20 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bb20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb24:	2200      	movs	r2, #0
 800bb26:	69b9      	ldr	r1, [r7, #24]
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7ff fdef 	bl	800b70c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	3304      	adds	r3, #4
 800bb34:	69b9      	ldr	r1, [r7, #24]
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7ff fe26 	bl	800b788 <tcp_output_control_segment>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bb40:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	372c      	adds	r7, #44	; 0x2c
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd90      	pop	{r4, r7, pc}
 800bb4c:	08010fa8 	.word	0x08010fa8
 800bb50:	080117a0 	.word	0x080117a0
 800bb54:	08010ffc 	.word	0x08010ffc

0800bb58 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bb60:	f7fa f814 	bl	8005b8c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bb64:	4b0a      	ldr	r3, [pc, #40]	; (800bb90 <tcpip_tcp_timer+0x38>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d103      	bne.n	800bb74 <tcpip_tcp_timer+0x1c>
 800bb6c:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <tcpip_tcp_timer+0x3c>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d005      	beq.n	800bb80 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bb74:	2200      	movs	r2, #0
 800bb76:	4908      	ldr	r1, [pc, #32]	; (800bb98 <tcpip_tcp_timer+0x40>)
 800bb78:	20fa      	movs	r0, #250	; 0xfa
 800bb7a:	f000 f8f3 	bl	800bd64 <sys_timeout>
 800bb7e:	e003      	b.n	800bb88 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bb80:	4b06      	ldr	r3, [pc, #24]	; (800bb9c <tcpip_tcp_timer+0x44>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	601a      	str	r2, [r3, #0]
  }
}
 800bb86:	bf00      	nop
 800bb88:	bf00      	nop
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	2000824c 	.word	0x2000824c
 800bb94:	20008250 	.word	0x20008250
 800bb98:	0800bb59 	.word	0x0800bb59
 800bb9c:	20008298 	.word	0x20008298

0800bba0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bba4:	4b0a      	ldr	r3, [pc, #40]	; (800bbd0 <tcp_timer_needed+0x30>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10f      	bne.n	800bbcc <tcp_timer_needed+0x2c>
 800bbac:	4b09      	ldr	r3, [pc, #36]	; (800bbd4 <tcp_timer_needed+0x34>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d103      	bne.n	800bbbc <tcp_timer_needed+0x1c>
 800bbb4:	4b08      	ldr	r3, [pc, #32]	; (800bbd8 <tcp_timer_needed+0x38>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d007      	beq.n	800bbcc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bbbc:	4b04      	ldr	r3, [pc, #16]	; (800bbd0 <tcp_timer_needed+0x30>)
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	4905      	ldr	r1, [pc, #20]	; (800bbdc <tcp_timer_needed+0x3c>)
 800bbc6:	20fa      	movs	r0, #250	; 0xfa
 800bbc8:	f000 f8cc 	bl	800bd64 <sys_timeout>
  }
}
 800bbcc:	bf00      	nop
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	20008298 	.word	0x20008298
 800bbd4:	2000824c 	.word	0x2000824c
 800bbd8:	20008250 	.word	0x20008250
 800bbdc:	0800bb59 	.word	0x0800bb59

0800bbe0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b086      	sub	sp, #24
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bbec:	2006      	movs	r0, #6
 800bbee:	f7f8 fdff 	bl	80047f0 <memp_malloc>
 800bbf2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d109      	bne.n	800bc0e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d151      	bne.n	800bca4 <sys_timeout_abs+0xc4>
 800bc00:	4b2a      	ldr	r3, [pc, #168]	; (800bcac <sys_timeout_abs+0xcc>)
 800bc02:	22be      	movs	r2, #190	; 0xbe
 800bc04:	492a      	ldr	r1, [pc, #168]	; (800bcb0 <sys_timeout_abs+0xd0>)
 800bc06:	482b      	ldr	r0, [pc, #172]	; (800bcb4 <sys_timeout_abs+0xd4>)
 800bc08:	f002 ff12 	bl	800ea30 <iprintf>
    return;
 800bc0c:	e04a      	b.n	800bca4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	2200      	movs	r2, #0
 800bc12:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bc26:	4b24      	ldr	r3, [pc, #144]	; (800bcb8 <sys_timeout_abs+0xd8>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d103      	bne.n	800bc36 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bc2e:	4a22      	ldr	r2, [pc, #136]	; (800bcb8 <sys_timeout_abs+0xd8>)
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	6013      	str	r3, [r2, #0]
    return;
 800bc34:	e037      	b.n	800bca6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	685a      	ldr	r2, [r3, #4]
 800bc3a:	4b1f      	ldr	r3, [pc, #124]	; (800bcb8 <sys_timeout_abs+0xd8>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	0fdb      	lsrs	r3, r3, #31
 800bc44:	f003 0301 	and.w	r3, r3, #1
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d007      	beq.n	800bc5e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bc4e:	4b1a      	ldr	r3, [pc, #104]	; (800bcb8 <sys_timeout_abs+0xd8>)
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bc56:	4a18      	ldr	r2, [pc, #96]	; (800bcb8 <sys_timeout_abs+0xd8>)
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	6013      	str	r3, [r2, #0]
 800bc5c:	e023      	b.n	800bca6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bc5e:	4b16      	ldr	r3, [pc, #88]	; (800bcb8 <sys_timeout_abs+0xd8>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	617b      	str	r3, [r7, #20]
 800bc64:	e01a      	b.n	800bc9c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00b      	beq.n	800bc86 <sys_timeout_abs+0xa6>
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	685a      	ldr	r2, [r3, #4]
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	0fdb      	lsrs	r3, r3, #31
 800bc7c:	f003 0301 	and.w	r3, r3, #1
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d007      	beq.n	800bc96 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	601a      	str	r2, [r3, #0]
        break;
 800bc94:	e007      	b.n	800bca6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	617b      	str	r3, [r7, #20]
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1e1      	bne.n	800bc66 <sys_timeout_abs+0x86>
 800bca2:	e000      	b.n	800bca6 <sys_timeout_abs+0xc6>
    return;
 800bca4:	bf00      	nop
      }
    }
  }
}
 800bca6:	3718      	adds	r7, #24
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	080117c4 	.word	0x080117c4
 800bcb0:	080117f8 	.word	0x080117f8
 800bcb4:	08011838 	.word	0x08011838
 800bcb8:	20008290 	.word	0x20008290

0800bcbc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	4798      	blx	r3

  now = sys_now();
 800bcce:	f7f7 feff 	bl	8003ad0 <sys_now>
 800bcd2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	4b0f      	ldr	r3, [pc, #60]	; (800bd18 <lwip_cyclic_timer+0x5c>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4413      	add	r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	1ad3      	subs	r3, r2, r3
 800bce6:	0fdb      	lsrs	r3, r3, #31
 800bce8:	f003 0301 	and.w	r3, r3, #1
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d009      	beq.n	800bd06 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	4907      	ldr	r1, [pc, #28]	; (800bd1c <lwip_cyclic_timer+0x60>)
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7ff ff6e 	bl	800bbe0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bd04:	e004      	b.n	800bd10 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	4904      	ldr	r1, [pc, #16]	; (800bd1c <lwip_cyclic_timer+0x60>)
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f7ff ff68 	bl	800bbe0 <sys_timeout_abs>
}
 800bd10:	bf00      	nop
 800bd12:	3718      	adds	r7, #24
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	20008294 	.word	0x20008294
 800bd1c:	0800bcbd 	.word	0x0800bcbd

0800bd20 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bd26:	2301      	movs	r3, #1
 800bd28:	607b      	str	r3, [r7, #4]
 800bd2a:	e00e      	b.n	800bd4a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bd2c:	4a0b      	ldr	r2, [pc, #44]	; (800bd5c <sys_timeouts_init+0x3c>)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	00db      	lsls	r3, r3, #3
 800bd38:	4a08      	ldr	r2, [pc, #32]	; (800bd5c <sys_timeouts_init+0x3c>)
 800bd3a:	4413      	add	r3, r2
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	4908      	ldr	r1, [pc, #32]	; (800bd60 <sys_timeouts_init+0x40>)
 800bd40:	f000 f810 	bl	800bd64 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	3301      	adds	r3, #1
 800bd48:	607b      	str	r3, [r7, #4]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b02      	cmp	r3, #2
 800bd4e:	d9ed      	bls.n	800bd2c <sys_timeouts_init+0xc>
  }
}
 800bd50:	bf00      	nop
 800bd52:	bf00      	nop
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	080123a8 	.word	0x080123a8
 800bd60:	0800bcbd 	.word	0x0800bcbd

0800bd64 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd76:	d306      	bcc.n	800bd86 <sys_timeout+0x22>
 800bd78:	4b0a      	ldr	r3, [pc, #40]	; (800bda4 <sys_timeout+0x40>)
 800bd7a:	f240 1229 	movw	r2, #297	; 0x129
 800bd7e:	490a      	ldr	r1, [pc, #40]	; (800bda8 <sys_timeout+0x44>)
 800bd80:	480a      	ldr	r0, [pc, #40]	; (800bdac <sys_timeout+0x48>)
 800bd82:	f002 fe55 	bl	800ea30 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bd86:	f7f7 fea3 	bl	8003ad0 <sys_now>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	4413      	add	r3, r2
 800bd90:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	68b9      	ldr	r1, [r7, #8]
 800bd96:	6978      	ldr	r0, [r7, #20]
 800bd98:	f7ff ff22 	bl	800bbe0 <sys_timeout_abs>
#endif
}
 800bd9c:	bf00      	nop
 800bd9e:	3718      	adds	r7, #24
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	080117c4 	.word	0x080117c4
 800bda8:	08011860 	.word	0x08011860
 800bdac:	08011838 	.word	0x08011838

0800bdb0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bdb6:	f7f7 fe8b 	bl	8003ad0 <sys_now>
 800bdba:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bdbc:	4b1a      	ldr	r3, [pc, #104]	; (800be28 <sys_check_timeouts+0x78>)
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d001      	beq.n	800bdca <sys_check_timeouts+0x1a>
 800bdc6:	f7f9 f8bf 	bl	8004f48 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bdca:	4b18      	ldr	r3, [pc, #96]	; (800be2c <sys_check_timeouts+0x7c>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d022      	beq.n	800be1c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	0fdb      	lsrs	r3, r3, #31
 800bde0:	f003 0301 	and.w	r3, r3, #1
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d11a      	bne.n	800be20 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a0f      	ldr	r2, [pc, #60]	; (800be2c <sys_check_timeouts+0x7c>)
 800bdf0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	4a0b      	ldr	r2, [pc, #44]	; (800be30 <sys_check_timeouts+0x80>)
 800be04:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800be06:	68b9      	ldr	r1, [r7, #8]
 800be08:	2006      	movs	r0, #6
 800be0a:	f7f8 fd61 	bl	80048d0 <memp_free>
    if (handler != NULL) {
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d0d3      	beq.n	800bdbc <sys_check_timeouts+0xc>
      handler(arg);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6838      	ldr	r0, [r7, #0]
 800be18:	4798      	blx	r3
  do {
 800be1a:	e7cf      	b.n	800bdbc <sys_check_timeouts+0xc>
      return;
 800be1c:	bf00      	nop
 800be1e:	e000      	b.n	800be22 <sys_check_timeouts+0x72>
      return;
 800be20:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	2000823d 	.word	0x2000823d
 800be2c:	20008290 	.word	0x20008290
 800be30:	20008294 	.word	0x20008294

0800be34 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800be38:	f002 fd0c 	bl	800e854 <rand>
 800be3c:	4603      	mov	r3, r0
 800be3e:	b29b      	uxth	r3, r3
 800be40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800be44:	b29b      	uxth	r3, r3
 800be46:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	4b01      	ldr	r3, [pc, #4]	; (800be54 <udp_init+0x20>)
 800be4e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800be50:	bf00      	nop
 800be52:	bd80      	pop	{r7, pc}
 800be54:	20000028 	.word	0x20000028

0800be58 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	4613      	mov	r3, r2
 800be64:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d105      	bne.n	800be78 <udp_input_local_match+0x20>
 800be6c:	4b27      	ldr	r3, [pc, #156]	; (800bf0c <udp_input_local_match+0xb4>)
 800be6e:	2287      	movs	r2, #135	; 0x87
 800be70:	4927      	ldr	r1, [pc, #156]	; (800bf10 <udp_input_local_match+0xb8>)
 800be72:	4828      	ldr	r0, [pc, #160]	; (800bf14 <udp_input_local_match+0xbc>)
 800be74:	f002 fddc 	bl	800ea30 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d105      	bne.n	800be8a <udp_input_local_match+0x32>
 800be7e:	4b23      	ldr	r3, [pc, #140]	; (800bf0c <udp_input_local_match+0xb4>)
 800be80:	2288      	movs	r2, #136	; 0x88
 800be82:	4925      	ldr	r1, [pc, #148]	; (800bf18 <udp_input_local_match+0xc0>)
 800be84:	4823      	ldr	r0, [pc, #140]	; (800bf14 <udp_input_local_match+0xbc>)
 800be86:	f002 fdd3 	bl	800ea30 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	7a1b      	ldrb	r3, [r3, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00b      	beq.n	800beaa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	7a1a      	ldrb	r2, [r3, #8]
 800be96:	4b21      	ldr	r3, [pc, #132]	; (800bf1c <udp_input_local_match+0xc4>)
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be9e:	3301      	adds	r3, #1
 800bea0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d001      	beq.n	800beaa <udp_input_local_match+0x52>
    return 0;
 800bea6:	2300      	movs	r3, #0
 800bea8:	e02b      	b.n	800bf02 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800beaa:	79fb      	ldrb	r3, [r7, #7]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d018      	beq.n	800bee2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d013      	beq.n	800bede <udp_input_local_match+0x86>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00f      	beq.n	800bede <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bebe:	4b17      	ldr	r3, [pc, #92]	; (800bf1c <udp_input_local_match+0xc4>)
 800bec0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec6:	d00a      	beq.n	800bede <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	4b13      	ldr	r3, [pc, #76]	; (800bf1c <udp_input_local_match+0xc4>)
 800bece:	695b      	ldr	r3, [r3, #20]
 800bed0:	405a      	eors	r2, r3
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	3308      	adds	r3, #8
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d110      	bne.n	800bf00 <udp_input_local_match+0xa8>
          return 1;
 800bede:	2301      	movs	r3, #1
 800bee0:	e00f      	b.n	800bf02 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d009      	beq.n	800befc <udp_input_local_match+0xa4>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d005      	beq.n	800befc <udp_input_local_match+0xa4>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	4b09      	ldr	r3, [pc, #36]	; (800bf1c <udp_input_local_match+0xc4>)
 800bef6:	695b      	ldr	r3, [r3, #20]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d101      	bne.n	800bf00 <udp_input_local_match+0xa8>
        return 1;
 800befc:	2301      	movs	r3, #1
 800befe:	e000      	b.n	800bf02 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	080118ac 	.word	0x080118ac
 800bf10:	080118dc 	.word	0x080118dc
 800bf14:	08011900 	.word	0x08011900
 800bf18:	08011928 	.word	0x08011928
 800bf1c:	20004cd0 	.word	0x20004cd0

0800bf20 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bf20:	b590      	push	{r4, r7, lr}
 800bf22:	b08d      	sub	sp, #52	; 0x34
 800bf24:	af02      	add	r7, sp, #8
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d105      	bne.n	800bf40 <udp_input+0x20>
 800bf34:	4b7c      	ldr	r3, [pc, #496]	; (800c128 <udp_input+0x208>)
 800bf36:	22cf      	movs	r2, #207	; 0xcf
 800bf38:	497c      	ldr	r1, [pc, #496]	; (800c12c <udp_input+0x20c>)
 800bf3a:	487d      	ldr	r0, [pc, #500]	; (800c130 <udp_input+0x210>)
 800bf3c:	f002 fd78 	bl	800ea30 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d105      	bne.n	800bf52 <udp_input+0x32>
 800bf46:	4b78      	ldr	r3, [pc, #480]	; (800c128 <udp_input+0x208>)
 800bf48:	22d0      	movs	r2, #208	; 0xd0
 800bf4a:	497a      	ldr	r1, [pc, #488]	; (800c134 <udp_input+0x214>)
 800bf4c:	4878      	ldr	r0, [pc, #480]	; (800c130 <udp_input+0x210>)
 800bf4e:	f002 fd6f 	bl	800ea30 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	895b      	ldrh	r3, [r3, #10]
 800bf56:	2b07      	cmp	r3, #7
 800bf58:	d803      	bhi.n	800bf62 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7f9 fb2e 	bl	80055bc <pbuf_free>
    goto end;
 800bf60:	e0de      	b.n	800c120 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bf68:	4b73      	ldr	r3, [pc, #460]	; (800c138 <udp_input+0x218>)
 800bf6a:	695b      	ldr	r3, [r3, #20]
 800bf6c:	4a72      	ldr	r2, [pc, #456]	; (800c138 <udp_input+0x218>)
 800bf6e:	6812      	ldr	r2, [r2, #0]
 800bf70:	4611      	mov	r1, r2
 800bf72:	4618      	mov	r0, r3
 800bf74:	f001 fc88 	bl	800d888 <ip4_addr_isbroadcast_u32>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	881b      	ldrh	r3, [r3, #0]
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7f7 ffbc 	bl	8003f00 <lwip_htons>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	885b      	ldrh	r3, [r3, #2]
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7f7 ffb4 	bl	8003f00 <lwip_htons>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bfa8:	4b64      	ldr	r3, [pc, #400]	; (800c13c <udp_input+0x21c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	627b      	str	r3, [r7, #36]	; 0x24
 800bfae:	e054      	b.n	800c05a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	8a5b      	ldrh	r3, [r3, #18]
 800bfb4:	89fa      	ldrh	r2, [r7, #14]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d14a      	bne.n	800c050 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bfba:	7cfb      	ldrb	r3, [r7, #19]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfc2:	f7ff ff49 	bl	800be58 <udp_input_local_match>
 800bfc6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d041      	beq.n	800c050 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	7c1b      	ldrb	r3, [r3, #16]
 800bfd0:	f003 0304 	and.w	r3, r3, #4
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d11d      	bne.n	800c014 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d102      	bne.n	800bfe4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe0:	61fb      	str	r3, [r7, #28]
 800bfe2:	e017      	b.n	800c014 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bfe4:	7cfb      	ldrb	r3, [r7, #19]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d014      	beq.n	800c014 <udp_input+0xf4>
 800bfea:	4b53      	ldr	r3, [pc, #332]	; (800c138 <udp_input+0x218>)
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff2:	d10f      	bne.n	800c014 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	3304      	adds	r3, #4
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d008      	beq.n	800c014 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	3304      	adds	r3, #4
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d101      	bne.n	800c014 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c012:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c016:	8a9b      	ldrh	r3, [r3, #20]
 800c018:	8a3a      	ldrh	r2, [r7, #16]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d118      	bne.n	800c050 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c022:	2b00      	cmp	r3, #0
 800c024:	d005      	beq.n	800c032 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	4b43      	ldr	r3, [pc, #268]	; (800c138 <udp_input+0x218>)
 800c02c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c02e:	429a      	cmp	r2, r3
 800c030:	d10e      	bne.n	800c050 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d014      	beq.n	800c062 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03a:	68da      	ldr	r2, [r3, #12]
 800c03c:	6a3b      	ldr	r3, [r7, #32]
 800c03e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c040:	4b3e      	ldr	r3, [pc, #248]	; (800c13c <udp_input+0x21c>)
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c048:	4a3c      	ldr	r2, [pc, #240]	; (800c13c <udp_input+0x21c>)
 800c04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c04e:	e008      	b.n	800c062 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c052:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	627b      	str	r3, [r7, #36]	; 0x24
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1a7      	bne.n	800bfb0 <udp_input+0x90>
 800c060:	e000      	b.n	800c064 <udp_input+0x144>
        break;
 800c062:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c066:	2b00      	cmp	r3, #0
 800c068:	d101      	bne.n	800c06e <udp_input+0x14e>
    pcb = uncon_pcb;
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <udp_input+0x15a>
    for_us = 1;
 800c074:	2301      	movs	r3, #1
 800c076:	76fb      	strb	r3, [r7, #27]
 800c078:	e00a      	b.n	800c090 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	3304      	adds	r3, #4
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	4b2d      	ldr	r3, [pc, #180]	; (800c138 <udp_input+0x218>)
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	429a      	cmp	r2, r3
 800c086:	bf0c      	ite	eq
 800c088:	2301      	moveq	r3, #1
 800c08a:	2300      	movne	r3, #0
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c090:	7efb      	ldrb	r3, [r7, #27]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d041      	beq.n	800c11a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c096:	2108      	movs	r1, #8
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7f9 fa09 	bl	80054b0 <pbuf_remove_header>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00a      	beq.n	800c0ba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c0a4:	4b20      	ldr	r3, [pc, #128]	; (800c128 <udp_input+0x208>)
 800c0a6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c0aa:	4925      	ldr	r1, [pc, #148]	; (800c140 <udp_input+0x220>)
 800c0ac:	4820      	ldr	r0, [pc, #128]	; (800c130 <udp_input+0x210>)
 800c0ae:	f002 fcbf 	bl	800ea30 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f7f9 fa82 	bl	80055bc <pbuf_free>
      goto end;
 800c0b8:	e032      	b.n	800c120 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d012      	beq.n	800c0e6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	699b      	ldr	r3, [r3, #24]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d00a      	beq.n	800c0de <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ca:	699c      	ldr	r4, [r3, #24]
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ce:	69d8      	ldr	r0, [r3, #28]
 800c0d0:	8a3b      	ldrh	r3, [r7, #16]
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	4b1b      	ldr	r3, [pc, #108]	; (800c144 <udp_input+0x224>)
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0da:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c0dc:	e021      	b.n	800c122 <udp_input+0x202>
        pbuf_free(p);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7f9 fa6c 	bl	80055bc <pbuf_free>
        goto end;
 800c0e4:	e01c      	b.n	800c120 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c0e6:	7cfb      	ldrb	r3, [r7, #19]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d112      	bne.n	800c112 <udp_input+0x1f2>
 800c0ec:	4b12      	ldr	r3, [pc, #72]	; (800c138 <udp_input+0x218>)
 800c0ee:	695b      	ldr	r3, [r3, #20]
 800c0f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0f4:	2be0      	cmp	r3, #224	; 0xe0
 800c0f6:	d00c      	beq.n	800c112 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c0f8:	4b0f      	ldr	r3, [pc, #60]	; (800c138 <udp_input+0x218>)
 800c0fa:	899b      	ldrh	r3, [r3, #12]
 800c0fc:	3308      	adds	r3, #8
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	b21b      	sxth	r3, r3
 800c102:	4619      	mov	r1, r3
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7f9 fa46 	bl	8005596 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c10a:	2103      	movs	r1, #3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f001 f89b 	bl	800d248 <icmp_dest_unreach>
      pbuf_free(p);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7f9 fa52 	bl	80055bc <pbuf_free>
  return;
 800c118:	e003      	b.n	800c122 <udp_input+0x202>
    pbuf_free(p);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7f9 fa4e 	bl	80055bc <pbuf_free>
  return;
 800c120:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c122:	372c      	adds	r7, #44	; 0x2c
 800c124:	46bd      	mov	sp, r7
 800c126:	bd90      	pop	{r4, r7, pc}
 800c128:	080118ac 	.word	0x080118ac
 800c12c:	08011950 	.word	0x08011950
 800c130:	08011900 	.word	0x08011900
 800c134:	08011968 	.word	0x08011968
 800c138:	20004cd0 	.word	0x20004cd0
 800c13c:	2000829c 	.word	0x2000829c
 800c140:	08011984 	.word	0x08011984
 800c144:	20004ce0 	.word	0x20004ce0

0800c148 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d01e      	beq.n	800c196 <udp_netif_ip_addr_changed+0x4e>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d01a      	beq.n	800c196 <udp_netif_ip_addr_changed+0x4e>
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d017      	beq.n	800c196 <udp_netif_ip_addr_changed+0x4e>
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d013      	beq.n	800c196 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c16e:	4b0d      	ldr	r3, [pc, #52]	; (800c1a4 <udp_netif_ip_addr_changed+0x5c>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	60fb      	str	r3, [r7, #12]
 800c174:	e00c      	b.n	800c190 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d103      	bne.n	800c18a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	68db      	ldr	r3, [r3, #12]
 800c18e:	60fb      	str	r3, [r7, #12]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1ef      	bne.n	800c176 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c196:	bf00      	nop
 800c198:	3714      	adds	r7, #20
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	2000829c 	.word	0x2000829c

0800c1a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c1b0:	4915      	ldr	r1, [pc, #84]	; (800c208 <etharp_free_entry+0x60>)
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	005b      	lsls	r3, r3, #1
 800c1b8:	4413      	add	r3, r2
 800c1ba:	00db      	lsls	r3, r3, #3
 800c1bc:	440b      	add	r3, r1
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d013      	beq.n	800c1ec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c1c4:	4910      	ldr	r1, [pc, #64]	; (800c208 <etharp_free_entry+0x60>)
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	005b      	lsls	r3, r3, #1
 800c1cc:	4413      	add	r3, r2
 800c1ce:	00db      	lsls	r3, r3, #3
 800c1d0:	440b      	add	r3, r1
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7f9 f9f1 	bl	80055bc <pbuf_free>
    arp_table[i].q = NULL;
 800c1da:	490b      	ldr	r1, [pc, #44]	; (800c208 <etharp_free_entry+0x60>)
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	4613      	mov	r3, r2
 800c1e0:	005b      	lsls	r3, r3, #1
 800c1e2:	4413      	add	r3, r2
 800c1e4:	00db      	lsls	r3, r3, #3
 800c1e6:	440b      	add	r3, r1
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c1ec:	4906      	ldr	r1, [pc, #24]	; (800c208 <etharp_free_entry+0x60>)
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	005b      	lsls	r3, r3, #1
 800c1f4:	4413      	add	r3, r2
 800c1f6:	00db      	lsls	r3, r3, #3
 800c1f8:	440b      	add	r3, r1
 800c1fa:	3314      	adds	r3, #20
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c200:	bf00      	nop
 800c202:	3708      	adds	r7, #8
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	200082a0 	.word	0x200082a0

0800c20c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c212:	2300      	movs	r3, #0
 800c214:	607b      	str	r3, [r7, #4]
 800c216:	e096      	b.n	800c346 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c218:	494f      	ldr	r1, [pc, #316]	; (800c358 <etharp_tmr+0x14c>)
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	4613      	mov	r3, r2
 800c21e:	005b      	lsls	r3, r3, #1
 800c220:	4413      	add	r3, r2
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	440b      	add	r3, r1
 800c226:	3314      	adds	r3, #20
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c22c:	78fb      	ldrb	r3, [r7, #3]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f000 8086 	beq.w	800c340 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c234:	4948      	ldr	r1, [pc, #288]	; (800c358 <etharp_tmr+0x14c>)
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	4613      	mov	r3, r2
 800c23a:	005b      	lsls	r3, r3, #1
 800c23c:	4413      	add	r3, r2
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	440b      	add	r3, r1
 800c242:	3312      	adds	r3, #18
 800c244:	881b      	ldrh	r3, [r3, #0]
 800c246:	3301      	adds	r3, #1
 800c248:	b298      	uxth	r0, r3
 800c24a:	4943      	ldr	r1, [pc, #268]	; (800c358 <etharp_tmr+0x14c>)
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	4613      	mov	r3, r2
 800c250:	005b      	lsls	r3, r3, #1
 800c252:	4413      	add	r3, r2
 800c254:	00db      	lsls	r3, r3, #3
 800c256:	440b      	add	r3, r1
 800c258:	3312      	adds	r3, #18
 800c25a:	4602      	mov	r2, r0
 800c25c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c25e:	493e      	ldr	r1, [pc, #248]	; (800c358 <etharp_tmr+0x14c>)
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	4613      	mov	r3, r2
 800c264:	005b      	lsls	r3, r3, #1
 800c266:	4413      	add	r3, r2
 800c268:	00db      	lsls	r3, r3, #3
 800c26a:	440b      	add	r3, r1
 800c26c:	3312      	adds	r3, #18
 800c26e:	881b      	ldrh	r3, [r3, #0]
 800c270:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c274:	d215      	bcs.n	800c2a2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c276:	4938      	ldr	r1, [pc, #224]	; (800c358 <etharp_tmr+0x14c>)
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	4613      	mov	r3, r2
 800c27c:	005b      	lsls	r3, r3, #1
 800c27e:	4413      	add	r3, r2
 800c280:	00db      	lsls	r3, r3, #3
 800c282:	440b      	add	r3, r1
 800c284:	3314      	adds	r3, #20
 800c286:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d10e      	bne.n	800c2aa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c28c:	4932      	ldr	r1, [pc, #200]	; (800c358 <etharp_tmr+0x14c>)
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	4613      	mov	r3, r2
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	4413      	add	r3, r2
 800c296:	00db      	lsls	r3, r3, #3
 800c298:	440b      	add	r3, r1
 800c29a:	3312      	adds	r3, #18
 800c29c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c29e:	2b04      	cmp	r3, #4
 800c2a0:	d903      	bls.n	800c2aa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff ff80 	bl	800c1a8 <etharp_free_entry>
 800c2a8:	e04a      	b.n	800c340 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c2aa:	492b      	ldr	r1, [pc, #172]	; (800c358 <etharp_tmr+0x14c>)
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	005b      	lsls	r3, r3, #1
 800c2b2:	4413      	add	r3, r2
 800c2b4:	00db      	lsls	r3, r3, #3
 800c2b6:	440b      	add	r3, r1
 800c2b8:	3314      	adds	r3, #20
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	2b03      	cmp	r3, #3
 800c2be:	d10a      	bne.n	800c2d6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c2c0:	4925      	ldr	r1, [pc, #148]	; (800c358 <etharp_tmr+0x14c>)
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	005b      	lsls	r3, r3, #1
 800c2c8:	4413      	add	r3, r2
 800c2ca:	00db      	lsls	r3, r3, #3
 800c2cc:	440b      	add	r3, r1
 800c2ce:	3314      	adds	r3, #20
 800c2d0:	2204      	movs	r2, #4
 800c2d2:	701a      	strb	r2, [r3, #0]
 800c2d4:	e034      	b.n	800c340 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c2d6:	4920      	ldr	r1, [pc, #128]	; (800c358 <etharp_tmr+0x14c>)
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	4613      	mov	r3, r2
 800c2dc:	005b      	lsls	r3, r3, #1
 800c2de:	4413      	add	r3, r2
 800c2e0:	00db      	lsls	r3, r3, #3
 800c2e2:	440b      	add	r3, r1
 800c2e4:	3314      	adds	r3, #20
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	2b04      	cmp	r3, #4
 800c2ea:	d10a      	bne.n	800c302 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c2ec:	491a      	ldr	r1, [pc, #104]	; (800c358 <etharp_tmr+0x14c>)
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	4413      	add	r3, r2
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	440b      	add	r3, r1
 800c2fa:	3314      	adds	r3, #20
 800c2fc:	2202      	movs	r2, #2
 800c2fe:	701a      	strb	r2, [r3, #0]
 800c300:	e01e      	b.n	800c340 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c302:	4915      	ldr	r1, [pc, #84]	; (800c358 <etharp_tmr+0x14c>)
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	4613      	mov	r3, r2
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	4413      	add	r3, r2
 800c30c:	00db      	lsls	r3, r3, #3
 800c30e:	440b      	add	r3, r1
 800c310:	3314      	adds	r3, #20
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	2b01      	cmp	r3, #1
 800c316:	d113      	bne.n	800c340 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c318:	490f      	ldr	r1, [pc, #60]	; (800c358 <etharp_tmr+0x14c>)
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	4613      	mov	r3, r2
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	4413      	add	r3, r2
 800c322:	00db      	lsls	r3, r3, #3
 800c324:	440b      	add	r3, r1
 800c326:	3308      	adds	r3, #8
 800c328:	6818      	ldr	r0, [r3, #0]
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	4613      	mov	r3, r2
 800c32e:	005b      	lsls	r3, r3, #1
 800c330:	4413      	add	r3, r2
 800c332:	00db      	lsls	r3, r3, #3
 800c334:	4a08      	ldr	r2, [pc, #32]	; (800c358 <etharp_tmr+0x14c>)
 800c336:	4413      	add	r3, r2
 800c338:	3304      	adds	r3, #4
 800c33a:	4619      	mov	r1, r3
 800c33c:	f000 fe6e 	bl	800d01c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3301      	adds	r3, #1
 800c344:	607b      	str	r3, [r7, #4]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b09      	cmp	r3, #9
 800c34a:	f77f af65 	ble.w	800c218 <etharp_tmr+0xc>
      }
    }
  }
}
 800c34e:	bf00      	nop
 800c350:	bf00      	nop
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	200082a0 	.word	0x200082a0

0800c35c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b08a      	sub	sp, #40	; 0x28
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	460b      	mov	r3, r1
 800c366:	607a      	str	r2, [r7, #4]
 800c368:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c36a:	230a      	movs	r3, #10
 800c36c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c36e:	230a      	movs	r3, #10
 800c370:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c372:	230a      	movs	r3, #10
 800c374:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c376:	2300      	movs	r3, #0
 800c378:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c37a:	230a      	movs	r3, #10
 800c37c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	83bb      	strh	r3, [r7, #28]
 800c382:	2300      	movs	r3, #0
 800c384:	837b      	strh	r3, [r7, #26]
 800c386:	2300      	movs	r3, #0
 800c388:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c38a:	2300      	movs	r3, #0
 800c38c:	843b      	strh	r3, [r7, #32]
 800c38e:	e0ae      	b.n	800c4ee <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c390:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c394:	49a6      	ldr	r1, [pc, #664]	; (800c630 <etharp_find_entry+0x2d4>)
 800c396:	4613      	mov	r3, r2
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	4413      	add	r3, r2
 800c39c:	00db      	lsls	r3, r3, #3
 800c39e:	440b      	add	r3, r1
 800c3a0:	3314      	adds	r3, #20
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c3a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c3aa:	2b0a      	cmp	r3, #10
 800c3ac:	d105      	bne.n	800c3ba <etharp_find_entry+0x5e>
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d102      	bne.n	800c3ba <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c3b4:	8c3b      	ldrh	r3, [r7, #32]
 800c3b6:	847b      	strh	r3, [r7, #34]	; 0x22
 800c3b8:	e095      	b.n	800c4e6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c3ba:	7dfb      	ldrb	r3, [r7, #23]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f000 8092 	beq.w	800c4e6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c3c2:	7dfb      	ldrb	r3, [r7, #23]
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d009      	beq.n	800c3dc <etharp_find_entry+0x80>
 800c3c8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d806      	bhi.n	800c3dc <etharp_find_entry+0x80>
 800c3ce:	4b99      	ldr	r3, [pc, #612]	; (800c634 <etharp_find_entry+0x2d8>)
 800c3d0:	f240 1223 	movw	r2, #291	; 0x123
 800c3d4:	4998      	ldr	r1, [pc, #608]	; (800c638 <etharp_find_entry+0x2dc>)
 800c3d6:	4899      	ldr	r0, [pc, #612]	; (800c63c <etharp_find_entry+0x2e0>)
 800c3d8:	f002 fb2a 	bl	800ea30 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d020      	beq.n	800c424 <etharp_find_entry+0xc8>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6819      	ldr	r1, [r3, #0]
 800c3e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3ea:	4891      	ldr	r0, [pc, #580]	; (800c630 <etharp_find_entry+0x2d4>)
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	005b      	lsls	r3, r3, #1
 800c3f0:	4413      	add	r3, r2
 800c3f2:	00db      	lsls	r3, r3, #3
 800c3f4:	4403      	add	r3, r0
 800c3f6:	3304      	adds	r3, #4
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4299      	cmp	r1, r3
 800c3fc:	d112      	bne.n	800c424 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00c      	beq.n	800c41e <etharp_find_entry+0xc2>
 800c404:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c408:	4989      	ldr	r1, [pc, #548]	; (800c630 <etharp_find_entry+0x2d4>)
 800c40a:	4613      	mov	r3, r2
 800c40c:	005b      	lsls	r3, r3, #1
 800c40e:	4413      	add	r3, r2
 800c410:	00db      	lsls	r3, r3, #3
 800c412:	440b      	add	r3, r1
 800c414:	3308      	adds	r3, #8
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d102      	bne.n	800c424 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c41e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c422:	e100      	b.n	800c626 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c424:	7dfb      	ldrb	r3, [r7, #23]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d140      	bne.n	800c4ac <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c42a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c42e:	4980      	ldr	r1, [pc, #512]	; (800c630 <etharp_find_entry+0x2d4>)
 800c430:	4613      	mov	r3, r2
 800c432:	005b      	lsls	r3, r3, #1
 800c434:	4413      	add	r3, r2
 800c436:	00db      	lsls	r3, r3, #3
 800c438:	440b      	add	r3, r1
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d01a      	beq.n	800c476 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c440:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c444:	497a      	ldr	r1, [pc, #488]	; (800c630 <etharp_find_entry+0x2d4>)
 800c446:	4613      	mov	r3, r2
 800c448:	005b      	lsls	r3, r3, #1
 800c44a:	4413      	add	r3, r2
 800c44c:	00db      	lsls	r3, r3, #3
 800c44e:	440b      	add	r3, r1
 800c450:	3312      	adds	r3, #18
 800c452:	881b      	ldrh	r3, [r3, #0]
 800c454:	8bba      	ldrh	r2, [r7, #28]
 800c456:	429a      	cmp	r2, r3
 800c458:	d845      	bhi.n	800c4e6 <etharp_find_entry+0x18a>
            old_queue = i;
 800c45a:	8c3b      	ldrh	r3, [r7, #32]
 800c45c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c45e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c462:	4973      	ldr	r1, [pc, #460]	; (800c630 <etharp_find_entry+0x2d4>)
 800c464:	4613      	mov	r3, r2
 800c466:	005b      	lsls	r3, r3, #1
 800c468:	4413      	add	r3, r2
 800c46a:	00db      	lsls	r3, r3, #3
 800c46c:	440b      	add	r3, r1
 800c46e:	3312      	adds	r3, #18
 800c470:	881b      	ldrh	r3, [r3, #0]
 800c472:	83bb      	strh	r3, [r7, #28]
 800c474:	e037      	b.n	800c4e6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c476:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c47a:	496d      	ldr	r1, [pc, #436]	; (800c630 <etharp_find_entry+0x2d4>)
 800c47c:	4613      	mov	r3, r2
 800c47e:	005b      	lsls	r3, r3, #1
 800c480:	4413      	add	r3, r2
 800c482:	00db      	lsls	r3, r3, #3
 800c484:	440b      	add	r3, r1
 800c486:	3312      	adds	r3, #18
 800c488:	881b      	ldrh	r3, [r3, #0]
 800c48a:	8b7a      	ldrh	r2, [r7, #26]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d82a      	bhi.n	800c4e6 <etharp_find_entry+0x18a>
            old_pending = i;
 800c490:	8c3b      	ldrh	r3, [r7, #32]
 800c492:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c494:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c498:	4965      	ldr	r1, [pc, #404]	; (800c630 <etharp_find_entry+0x2d4>)
 800c49a:	4613      	mov	r3, r2
 800c49c:	005b      	lsls	r3, r3, #1
 800c49e:	4413      	add	r3, r2
 800c4a0:	00db      	lsls	r3, r3, #3
 800c4a2:	440b      	add	r3, r1
 800c4a4:	3312      	adds	r3, #18
 800c4a6:	881b      	ldrh	r3, [r3, #0]
 800c4a8:	837b      	strh	r3, [r7, #26]
 800c4aa:	e01c      	b.n	800c4e6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c4ac:	7dfb      	ldrb	r3, [r7, #23]
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d919      	bls.n	800c4e6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c4b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4b6:	495e      	ldr	r1, [pc, #376]	; (800c630 <etharp_find_entry+0x2d4>)
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	005b      	lsls	r3, r3, #1
 800c4bc:	4413      	add	r3, r2
 800c4be:	00db      	lsls	r3, r3, #3
 800c4c0:	440b      	add	r3, r1
 800c4c2:	3312      	adds	r3, #18
 800c4c4:	881b      	ldrh	r3, [r3, #0]
 800c4c6:	8b3a      	ldrh	r2, [r7, #24]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d80c      	bhi.n	800c4e6 <etharp_find_entry+0x18a>
            old_stable = i;
 800c4cc:	8c3b      	ldrh	r3, [r7, #32]
 800c4ce:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c4d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4d4:	4956      	ldr	r1, [pc, #344]	; (800c630 <etharp_find_entry+0x2d4>)
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	005b      	lsls	r3, r3, #1
 800c4da:	4413      	add	r3, r2
 800c4dc:	00db      	lsls	r3, r3, #3
 800c4de:	440b      	add	r3, r1
 800c4e0:	3312      	adds	r3, #18
 800c4e2:	881b      	ldrh	r3, [r3, #0]
 800c4e4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c4e6:	8c3b      	ldrh	r3, [r7, #32]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	843b      	strh	r3, [r7, #32]
 800c4ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c4f2:	2b09      	cmp	r3, #9
 800c4f4:	f77f af4c 	ble.w	800c390 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c4f8:	7afb      	ldrb	r3, [r7, #11]
 800c4fa:	f003 0302 	and.w	r3, r3, #2
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d108      	bne.n	800c514 <etharp_find_entry+0x1b8>
 800c502:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c506:	2b0a      	cmp	r3, #10
 800c508:	d107      	bne.n	800c51a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c50a:	7afb      	ldrb	r3, [r7, #11]
 800c50c:	f003 0301 	and.w	r3, r3, #1
 800c510:	2b00      	cmp	r3, #0
 800c512:	d102      	bne.n	800c51a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c514:	f04f 33ff 	mov.w	r3, #4294967295
 800c518:	e085      	b.n	800c626 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c51a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c51e:	2b09      	cmp	r3, #9
 800c520:	dc02      	bgt.n	800c528 <etharp_find_entry+0x1cc>
    i = empty;
 800c522:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c524:	843b      	strh	r3, [r7, #32]
 800c526:	e039      	b.n	800c59c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c528:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c52c:	2b09      	cmp	r3, #9
 800c52e:	dc14      	bgt.n	800c55a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c532:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c534:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c538:	493d      	ldr	r1, [pc, #244]	; (800c630 <etharp_find_entry+0x2d4>)
 800c53a:	4613      	mov	r3, r2
 800c53c:	005b      	lsls	r3, r3, #1
 800c53e:	4413      	add	r3, r2
 800c540:	00db      	lsls	r3, r3, #3
 800c542:	440b      	add	r3, r1
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d018      	beq.n	800c57c <etharp_find_entry+0x220>
 800c54a:	4b3a      	ldr	r3, [pc, #232]	; (800c634 <etharp_find_entry+0x2d8>)
 800c54c:	f240 126d 	movw	r2, #365	; 0x16d
 800c550:	493b      	ldr	r1, [pc, #236]	; (800c640 <etharp_find_entry+0x2e4>)
 800c552:	483a      	ldr	r0, [pc, #232]	; (800c63c <etharp_find_entry+0x2e0>)
 800c554:	f002 fa6c 	bl	800ea30 <iprintf>
 800c558:	e010      	b.n	800c57c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c55a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c55e:	2b09      	cmp	r3, #9
 800c560:	dc02      	bgt.n	800c568 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c562:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c564:	843b      	strh	r3, [r7, #32]
 800c566:	e009      	b.n	800c57c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c568:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c56c:	2b09      	cmp	r3, #9
 800c56e:	dc02      	bgt.n	800c576 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c570:	8bfb      	ldrh	r3, [r7, #30]
 800c572:	843b      	strh	r3, [r7, #32]
 800c574:	e002      	b.n	800c57c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c576:	f04f 33ff 	mov.w	r3, #4294967295
 800c57a:	e054      	b.n	800c626 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c57c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c580:	2b09      	cmp	r3, #9
 800c582:	dd06      	ble.n	800c592 <etharp_find_entry+0x236>
 800c584:	4b2b      	ldr	r3, [pc, #172]	; (800c634 <etharp_find_entry+0x2d8>)
 800c586:	f240 127f 	movw	r2, #383	; 0x17f
 800c58a:	492e      	ldr	r1, [pc, #184]	; (800c644 <etharp_find_entry+0x2e8>)
 800c58c:	482b      	ldr	r0, [pc, #172]	; (800c63c <etharp_find_entry+0x2e0>)
 800c58e:	f002 fa4f 	bl	800ea30 <iprintf>
    etharp_free_entry(i);
 800c592:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c596:	4618      	mov	r0, r3
 800c598:	f7ff fe06 	bl	800c1a8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c59c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c5a0:	2b09      	cmp	r3, #9
 800c5a2:	dd06      	ble.n	800c5b2 <etharp_find_entry+0x256>
 800c5a4:	4b23      	ldr	r3, [pc, #140]	; (800c634 <etharp_find_entry+0x2d8>)
 800c5a6:	f240 1283 	movw	r2, #387	; 0x183
 800c5aa:	4926      	ldr	r1, [pc, #152]	; (800c644 <etharp_find_entry+0x2e8>)
 800c5ac:	4823      	ldr	r0, [pc, #140]	; (800c63c <etharp_find_entry+0x2e0>)
 800c5ae:	f002 fa3f 	bl	800ea30 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c5b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5b6:	491e      	ldr	r1, [pc, #120]	; (800c630 <etharp_find_entry+0x2d4>)
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	005b      	lsls	r3, r3, #1
 800c5bc:	4413      	add	r3, r2
 800c5be:	00db      	lsls	r3, r3, #3
 800c5c0:	440b      	add	r3, r1
 800c5c2:	3314      	adds	r3, #20
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d006      	beq.n	800c5d8 <etharp_find_entry+0x27c>
 800c5ca:	4b1a      	ldr	r3, [pc, #104]	; (800c634 <etharp_find_entry+0x2d8>)
 800c5cc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c5d0:	491d      	ldr	r1, [pc, #116]	; (800c648 <etharp_find_entry+0x2ec>)
 800c5d2:	481a      	ldr	r0, [pc, #104]	; (800c63c <etharp_find_entry+0x2e0>)
 800c5d4:	f002 fa2c 	bl	800ea30 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00b      	beq.n	800c5f6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c5de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6819      	ldr	r1, [r3, #0]
 800c5e6:	4812      	ldr	r0, [pc, #72]	; (800c630 <etharp_find_entry+0x2d4>)
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	005b      	lsls	r3, r3, #1
 800c5ec:	4413      	add	r3, r2
 800c5ee:	00db      	lsls	r3, r3, #3
 800c5f0:	4403      	add	r3, r0
 800c5f2:	3304      	adds	r3, #4
 800c5f4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c5f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5fa:	490d      	ldr	r1, [pc, #52]	; (800c630 <etharp_find_entry+0x2d4>)
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	005b      	lsls	r3, r3, #1
 800c600:	4413      	add	r3, r2
 800c602:	00db      	lsls	r3, r3, #3
 800c604:	440b      	add	r3, r1
 800c606:	3312      	adds	r3, #18
 800c608:	2200      	movs	r2, #0
 800c60a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c60c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c610:	4907      	ldr	r1, [pc, #28]	; (800c630 <etharp_find_entry+0x2d4>)
 800c612:	4613      	mov	r3, r2
 800c614:	005b      	lsls	r3, r3, #1
 800c616:	4413      	add	r3, r2
 800c618:	00db      	lsls	r3, r3, #3
 800c61a:	440b      	add	r3, r1
 800c61c:	3308      	adds	r3, #8
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c622:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c626:	4618      	mov	r0, r3
 800c628:	3728      	adds	r7, #40	; 0x28
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	200082a0 	.word	0x200082a0
 800c634:	08011c10 	.word	0x08011c10
 800c638:	08011c48 	.word	0x08011c48
 800c63c:	08011c88 	.word	0x08011c88
 800c640:	08011cb0 	.word	0x08011cb0
 800c644:	08011cc8 	.word	0x08011cc8
 800c648:	08011cdc 	.word	0x08011cdc

0800c64c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b088      	sub	sp, #32
 800c650:	af02      	add	r7, sp, #8
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
 800c658:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c660:	2b06      	cmp	r3, #6
 800c662:	d006      	beq.n	800c672 <etharp_update_arp_entry+0x26>
 800c664:	4b48      	ldr	r3, [pc, #288]	; (800c788 <etharp_update_arp_entry+0x13c>)
 800c666:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c66a:	4948      	ldr	r1, [pc, #288]	; (800c78c <etharp_update_arp_entry+0x140>)
 800c66c:	4848      	ldr	r0, [pc, #288]	; (800c790 <etharp_update_arp_entry+0x144>)
 800c66e:	f002 f9df 	bl	800ea30 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d012      	beq.n	800c69e <etharp_update_arp_entry+0x52>
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00e      	beq.n	800c69e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68f9      	ldr	r1, [r7, #12]
 800c686:	4618      	mov	r0, r3
 800c688:	f001 f8fe 	bl	800d888 <ip4_addr_isbroadcast_u32>
 800c68c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d105      	bne.n	800c69e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c69a:	2be0      	cmp	r3, #224	; 0xe0
 800c69c:	d102      	bne.n	800c6a4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c69e:	f06f 030f 	mvn.w	r3, #15
 800c6a2:	e06c      	b.n	800c77e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c6a4:	78fb      	ldrb	r3, [r7, #3]
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	68b8      	ldr	r0, [r7, #8]
 800c6ac:	f7ff fe56 	bl	800c35c <etharp_find_entry>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c6b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	da02      	bge.n	800c6c2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c6bc:	8afb      	ldrh	r3, [r7, #22]
 800c6be:	b25b      	sxtb	r3, r3
 800c6c0:	e05d      	b.n	800c77e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c6c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6c6:	4933      	ldr	r1, [pc, #204]	; (800c794 <etharp_update_arp_entry+0x148>)
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	005b      	lsls	r3, r3, #1
 800c6cc:	4413      	add	r3, r2
 800c6ce:	00db      	lsls	r3, r3, #3
 800c6d0:	440b      	add	r3, r1
 800c6d2:	3314      	adds	r3, #20
 800c6d4:	2202      	movs	r2, #2
 800c6d6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c6d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6dc:	492d      	ldr	r1, [pc, #180]	; (800c794 <etharp_update_arp_entry+0x148>)
 800c6de:	4613      	mov	r3, r2
 800c6e0:	005b      	lsls	r3, r3, #1
 800c6e2:	4413      	add	r3, r2
 800c6e4:	00db      	lsls	r3, r3, #3
 800c6e6:	440b      	add	r3, r1
 800c6e8:	3308      	adds	r3, #8
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c6ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	005b      	lsls	r3, r3, #1
 800c6f6:	4413      	add	r3, r2
 800c6f8:	00db      	lsls	r3, r3, #3
 800c6fa:	3308      	adds	r3, #8
 800c6fc:	4a25      	ldr	r2, [pc, #148]	; (800c794 <etharp_update_arp_entry+0x148>)
 800c6fe:	4413      	add	r3, r2
 800c700:	3304      	adds	r3, #4
 800c702:	2206      	movs	r2, #6
 800c704:	6879      	ldr	r1, [r7, #4]
 800c706:	4618      	mov	r0, r3
 800c708:	f002 fa7e 	bl	800ec08 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c70c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c710:	4920      	ldr	r1, [pc, #128]	; (800c794 <etharp_update_arp_entry+0x148>)
 800c712:	4613      	mov	r3, r2
 800c714:	005b      	lsls	r3, r3, #1
 800c716:	4413      	add	r3, r2
 800c718:	00db      	lsls	r3, r3, #3
 800c71a:	440b      	add	r3, r1
 800c71c:	3312      	adds	r3, #18
 800c71e:	2200      	movs	r2, #0
 800c720:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c722:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c726:	491b      	ldr	r1, [pc, #108]	; (800c794 <etharp_update_arp_entry+0x148>)
 800c728:	4613      	mov	r3, r2
 800c72a:	005b      	lsls	r3, r3, #1
 800c72c:	4413      	add	r3, r2
 800c72e:	00db      	lsls	r3, r3, #3
 800c730:	440b      	add	r3, r1
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d021      	beq.n	800c77c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c738:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c73c:	4915      	ldr	r1, [pc, #84]	; (800c794 <etharp_update_arp_entry+0x148>)
 800c73e:	4613      	mov	r3, r2
 800c740:	005b      	lsls	r3, r3, #1
 800c742:	4413      	add	r3, r2
 800c744:	00db      	lsls	r3, r3, #3
 800c746:	440b      	add	r3, r1
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c74c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c750:	4910      	ldr	r1, [pc, #64]	; (800c794 <etharp_update_arp_entry+0x148>)
 800c752:	4613      	mov	r3, r2
 800c754:	005b      	lsls	r3, r3, #1
 800c756:	4413      	add	r3, r2
 800c758:	00db      	lsls	r3, r3, #3
 800c75a:	440b      	add	r3, r1
 800c75c:	2200      	movs	r2, #0
 800c75e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c766:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6939      	ldr	r1, [r7, #16]
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f002 f827 	bl	800e7c4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c776:	6938      	ldr	r0, [r7, #16]
 800c778:	f7f8 ff20 	bl	80055bc <pbuf_free>
  }
  return ERR_OK;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3718      	adds	r7, #24
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	08011c10 	.word	0x08011c10
 800c78c:	08011d08 	.word	0x08011d08
 800c790:	08011c88 	.word	0x08011c88
 800c794:	200082a0 	.word	0x200082a0

0800c798 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	e01e      	b.n	800c7e4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c7a6:	4913      	ldr	r1, [pc, #76]	; (800c7f4 <etharp_cleanup_netif+0x5c>)
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	4413      	add	r3, r2
 800c7b0:	00db      	lsls	r3, r3, #3
 800c7b2:	440b      	add	r3, r1
 800c7b4:	3314      	adds	r3, #20
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c7ba:	7afb      	ldrb	r3, [r7, #11]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d00e      	beq.n	800c7de <etharp_cleanup_netif+0x46>
 800c7c0:	490c      	ldr	r1, [pc, #48]	; (800c7f4 <etharp_cleanup_netif+0x5c>)
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	005b      	lsls	r3, r3, #1
 800c7c8:	4413      	add	r3, r2
 800c7ca:	00db      	lsls	r3, r3, #3
 800c7cc:	440b      	add	r3, r1
 800c7ce:	3308      	adds	r3, #8
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d102      	bne.n	800c7de <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f7ff fce5 	bl	800c1a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	60fb      	str	r3, [r7, #12]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2b09      	cmp	r3, #9
 800c7e8:	dddd      	ble.n	800c7a6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c7ea:	bf00      	nop
 800c7ec:	bf00      	nop
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	200082a0 	.word	0x200082a0

0800c7f8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c7f8:	b5b0      	push	{r4, r5, r7, lr}
 800c7fa:	b08a      	sub	sp, #40	; 0x28
 800c7fc:	af04      	add	r7, sp, #16
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d107      	bne.n	800c818 <etharp_input+0x20>
 800c808:	4b3d      	ldr	r3, [pc, #244]	; (800c900 <etharp_input+0x108>)
 800c80a:	f240 228a 	movw	r2, #650	; 0x28a
 800c80e:	493d      	ldr	r1, [pc, #244]	; (800c904 <etharp_input+0x10c>)
 800c810:	483d      	ldr	r0, [pc, #244]	; (800c908 <etharp_input+0x110>)
 800c812:	f002 f90d 	bl	800ea30 <iprintf>
 800c816:	e06f      	b.n	800c8f8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	881b      	ldrh	r3, [r3, #0]
 800c822:	b29b      	uxth	r3, r3
 800c824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c828:	d10c      	bne.n	800c844 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c82e:	2b06      	cmp	r3, #6
 800c830:	d108      	bne.n	800c844 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c836:	2b04      	cmp	r3, #4
 800c838:	d104      	bne.n	800c844 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	885b      	ldrh	r3, [r3, #2]
 800c83e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c840:	2b08      	cmp	r3, #8
 800c842:	d003      	beq.n	800c84c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f7f8 feb9 	bl	80055bc <pbuf_free>
    return;
 800c84a:	e055      	b.n	800c8f8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	330e      	adds	r3, #14
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	3318      	adds	r3, #24
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	3304      	adds	r3, #4
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d102      	bne.n	800c86c <etharp_input+0x74>
    for_us = 0;
 800c866:	2300      	movs	r3, #0
 800c868:	75fb      	strb	r3, [r7, #23]
 800c86a:	e009      	b.n	800c880 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c86c:	68ba      	ldr	r2, [r7, #8]
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	3304      	adds	r3, #4
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	429a      	cmp	r2, r3
 800c876:	bf0c      	ite	eq
 800c878:	2301      	moveq	r3, #1
 800c87a:	2300      	movne	r3, #0
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	f103 0208 	add.w	r2, r3, #8
 800c886:	7dfb      	ldrb	r3, [r7, #23]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d001      	beq.n	800c890 <etharp_input+0x98>
 800c88c:	2301      	movs	r3, #1
 800c88e:	e000      	b.n	800c892 <etharp_input+0x9a>
 800c890:	2302      	movs	r3, #2
 800c892:	f107 010c 	add.w	r1, r7, #12
 800c896:	6838      	ldr	r0, [r7, #0]
 800c898:	f7ff fed8 	bl	800c64c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	88db      	ldrh	r3, [r3, #6]
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8a6:	d003      	beq.n	800c8b0 <etharp_input+0xb8>
 800c8a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8ac:	d01e      	beq.n	800c8ec <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c8ae:	e020      	b.n	800c8f2 <etharp_input+0xfa>
      if (for_us) {
 800c8b0:	7dfb      	ldrb	r3, [r7, #23]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d01c      	beq.n	800c8f0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c8cc:	693a      	ldr	r2, [r7, #16]
 800c8ce:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c8d0:	2102      	movs	r1, #2
 800c8d2:	9103      	str	r1, [sp, #12]
 800c8d4:	f107 010c 	add.w	r1, r7, #12
 800c8d8:	9102      	str	r1, [sp, #8]
 800c8da:	9201      	str	r2, [sp, #4]
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	462b      	mov	r3, r5
 800c8e0:	4622      	mov	r2, r4
 800c8e2:	4601      	mov	r1, r0
 800c8e4:	6838      	ldr	r0, [r7, #0]
 800c8e6:	f000 faeb 	bl	800cec0 <etharp_raw>
      break;
 800c8ea:	e001      	b.n	800c8f0 <etharp_input+0xf8>
      break;
 800c8ec:	bf00      	nop
 800c8ee:	e000      	b.n	800c8f2 <etharp_input+0xfa>
      break;
 800c8f0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f7f8 fe62 	bl	80055bc <pbuf_free>
}
 800c8f8:	3718      	adds	r7, #24
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bdb0      	pop	{r4, r5, r7, pc}
 800c8fe:	bf00      	nop
 800c900:	08011c10 	.word	0x08011c10
 800c904:	08011d60 	.word	0x08011d60
 800c908:	08011c88 	.word	0x08011c88

0800c90c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af02      	add	r7, sp, #8
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	4613      	mov	r3, r2
 800c918:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c91a:	79fa      	ldrb	r2, [r7, #7]
 800c91c:	4944      	ldr	r1, [pc, #272]	; (800ca30 <etharp_output_to_arp_index+0x124>)
 800c91e:	4613      	mov	r3, r2
 800c920:	005b      	lsls	r3, r3, #1
 800c922:	4413      	add	r3, r2
 800c924:	00db      	lsls	r3, r3, #3
 800c926:	440b      	add	r3, r1
 800c928:	3314      	adds	r3, #20
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d806      	bhi.n	800c93e <etharp_output_to_arp_index+0x32>
 800c930:	4b40      	ldr	r3, [pc, #256]	; (800ca34 <etharp_output_to_arp_index+0x128>)
 800c932:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c936:	4940      	ldr	r1, [pc, #256]	; (800ca38 <etharp_output_to_arp_index+0x12c>)
 800c938:	4840      	ldr	r0, [pc, #256]	; (800ca3c <etharp_output_to_arp_index+0x130>)
 800c93a:	f002 f879 	bl	800ea30 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c93e:	79fa      	ldrb	r2, [r7, #7]
 800c940:	493b      	ldr	r1, [pc, #236]	; (800ca30 <etharp_output_to_arp_index+0x124>)
 800c942:	4613      	mov	r3, r2
 800c944:	005b      	lsls	r3, r3, #1
 800c946:	4413      	add	r3, r2
 800c948:	00db      	lsls	r3, r3, #3
 800c94a:	440b      	add	r3, r1
 800c94c:	3314      	adds	r3, #20
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	2b02      	cmp	r3, #2
 800c952:	d153      	bne.n	800c9fc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c954:	79fa      	ldrb	r2, [r7, #7]
 800c956:	4936      	ldr	r1, [pc, #216]	; (800ca30 <etharp_output_to_arp_index+0x124>)
 800c958:	4613      	mov	r3, r2
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	4413      	add	r3, r2
 800c95e:	00db      	lsls	r3, r3, #3
 800c960:	440b      	add	r3, r1
 800c962:	3312      	adds	r3, #18
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c96a:	d919      	bls.n	800c9a0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c96c:	79fa      	ldrb	r2, [r7, #7]
 800c96e:	4613      	mov	r3, r2
 800c970:	005b      	lsls	r3, r3, #1
 800c972:	4413      	add	r3, r2
 800c974:	00db      	lsls	r3, r3, #3
 800c976:	4a2e      	ldr	r2, [pc, #184]	; (800ca30 <etharp_output_to_arp_index+0x124>)
 800c978:	4413      	add	r3, r2
 800c97a:	3304      	adds	r3, #4
 800c97c:	4619      	mov	r1, r3
 800c97e:	68f8      	ldr	r0, [r7, #12]
 800c980:	f000 fb4c 	bl	800d01c <etharp_request>
 800c984:	4603      	mov	r3, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d138      	bne.n	800c9fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c98a:	79fa      	ldrb	r2, [r7, #7]
 800c98c:	4928      	ldr	r1, [pc, #160]	; (800ca30 <etharp_output_to_arp_index+0x124>)
 800c98e:	4613      	mov	r3, r2
 800c990:	005b      	lsls	r3, r3, #1
 800c992:	4413      	add	r3, r2
 800c994:	00db      	lsls	r3, r3, #3
 800c996:	440b      	add	r3, r1
 800c998:	3314      	adds	r3, #20
 800c99a:	2203      	movs	r2, #3
 800c99c:	701a      	strb	r2, [r3, #0]
 800c99e:	e02d      	b.n	800c9fc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c9a0:	79fa      	ldrb	r2, [r7, #7]
 800c9a2:	4923      	ldr	r1, [pc, #140]	; (800ca30 <etharp_output_to_arp_index+0x124>)
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	005b      	lsls	r3, r3, #1
 800c9a8:	4413      	add	r3, r2
 800c9aa:	00db      	lsls	r3, r3, #3
 800c9ac:	440b      	add	r3, r1
 800c9ae:	3312      	adds	r3, #18
 800c9b0:	881b      	ldrh	r3, [r3, #0]
 800c9b2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c9b6:	d321      	bcc.n	800c9fc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c9b8:	79fa      	ldrb	r2, [r7, #7]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	005b      	lsls	r3, r3, #1
 800c9be:	4413      	add	r3, r2
 800c9c0:	00db      	lsls	r3, r3, #3
 800c9c2:	4a1b      	ldr	r2, [pc, #108]	; (800ca30 <etharp_output_to_arp_index+0x124>)
 800c9c4:	4413      	add	r3, r2
 800c9c6:	1d19      	adds	r1, r3, #4
 800c9c8:	79fa      	ldrb	r2, [r7, #7]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	005b      	lsls	r3, r3, #1
 800c9ce:	4413      	add	r3, r2
 800c9d0:	00db      	lsls	r3, r3, #3
 800c9d2:	3308      	adds	r3, #8
 800c9d4:	4a16      	ldr	r2, [pc, #88]	; (800ca30 <etharp_output_to_arp_index+0x124>)
 800c9d6:	4413      	add	r3, r2
 800c9d8:	3304      	adds	r3, #4
 800c9da:	461a      	mov	r2, r3
 800c9dc:	68f8      	ldr	r0, [r7, #12]
 800c9de:	f000 fafb 	bl	800cfd8 <etharp_request_dst>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d109      	bne.n	800c9fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c9e8:	79fa      	ldrb	r2, [r7, #7]
 800c9ea:	4911      	ldr	r1, [pc, #68]	; (800ca30 <etharp_output_to_arp_index+0x124>)
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	4413      	add	r3, r2
 800c9f2:	00db      	lsls	r3, r3, #3
 800c9f4:	440b      	add	r3, r1
 800c9f6:	3314      	adds	r3, #20
 800c9f8:	2203      	movs	r2, #3
 800c9fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ca02:	79fa      	ldrb	r2, [r7, #7]
 800ca04:	4613      	mov	r3, r2
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	4413      	add	r3, r2
 800ca0a:	00db      	lsls	r3, r3, #3
 800ca0c:	3308      	adds	r3, #8
 800ca0e:	4a08      	ldr	r2, [pc, #32]	; (800ca30 <etharp_output_to_arp_index+0x124>)
 800ca10:	4413      	add	r3, r2
 800ca12:	3304      	adds	r3, #4
 800ca14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca18:	9200      	str	r2, [sp, #0]
 800ca1a:	460a      	mov	r2, r1
 800ca1c:	68b9      	ldr	r1, [r7, #8]
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f001 fed0 	bl	800e7c4 <ethernet_output>
 800ca24:	4603      	mov	r3, r0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	200082a0 	.word	0x200082a0
 800ca34:	08011c10 	.word	0x08011c10
 800ca38:	08011d80 	.word	0x08011d80
 800ca3c:	08011c88 	.word	0x08011c88

0800ca40 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b08a      	sub	sp, #40	; 0x28
 800ca44:	af02      	add	r7, sp, #8
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d106      	bne.n	800ca64 <etharp_output+0x24>
 800ca56:	4b73      	ldr	r3, [pc, #460]	; (800cc24 <etharp_output+0x1e4>)
 800ca58:	f240 321e 	movw	r2, #798	; 0x31e
 800ca5c:	4972      	ldr	r1, [pc, #456]	; (800cc28 <etharp_output+0x1e8>)
 800ca5e:	4873      	ldr	r0, [pc, #460]	; (800cc2c <etharp_output+0x1ec>)
 800ca60:	f001 ffe6 	bl	800ea30 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d106      	bne.n	800ca78 <etharp_output+0x38>
 800ca6a:	4b6e      	ldr	r3, [pc, #440]	; (800cc24 <etharp_output+0x1e4>)
 800ca6c:	f240 321f 	movw	r2, #799	; 0x31f
 800ca70:	496f      	ldr	r1, [pc, #444]	; (800cc30 <etharp_output+0x1f0>)
 800ca72:	486e      	ldr	r0, [pc, #440]	; (800cc2c <etharp_output+0x1ec>)
 800ca74:	f001 ffdc 	bl	800ea30 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d106      	bne.n	800ca8c <etharp_output+0x4c>
 800ca7e:	4b69      	ldr	r3, [pc, #420]	; (800cc24 <etharp_output+0x1e4>)
 800ca80:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ca84:	496b      	ldr	r1, [pc, #428]	; (800cc34 <etharp_output+0x1f4>)
 800ca86:	4869      	ldr	r0, [pc, #420]	; (800cc2c <etharp_output+0x1ec>)
 800ca88:	f001 ffd2 	bl	800ea30 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68f9      	ldr	r1, [r7, #12]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f000 fef8 	bl	800d888 <ip4_addr_isbroadcast_u32>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d002      	beq.n	800caa4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ca9e:	4b66      	ldr	r3, [pc, #408]	; (800cc38 <etharp_output+0x1f8>)
 800caa0:	61fb      	str	r3, [r7, #28]
 800caa2:	e0af      	b.n	800cc04 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800caac:	2be0      	cmp	r3, #224	; 0xe0
 800caae:	d118      	bne.n	800cae2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cab0:	2301      	movs	r3, #1
 800cab2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cab4:	2300      	movs	r3, #0
 800cab6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cab8:	235e      	movs	r3, #94	; 0x5e
 800caba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	3301      	adds	r3, #1
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	3302      	adds	r3, #2
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	3303      	adds	r3, #3
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cada:	f107 0310 	add.w	r3, r7, #16
 800cade:	61fb      	str	r3, [r7, #28]
 800cae0:	e090      	b.n	800cc04 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	3304      	adds	r3, #4
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	405a      	eors	r2, r3
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3308      	adds	r3, #8
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4013      	ands	r3, r2
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d012      	beq.n	800cb20 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cb00:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d00b      	beq.n	800cb20 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	330c      	adds	r3, #12
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d003      	beq.n	800cb1a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	330c      	adds	r3, #12
 800cb16:	61bb      	str	r3, [r7, #24]
 800cb18:	e002      	b.n	800cb20 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cb1a:	f06f 0303 	mvn.w	r3, #3
 800cb1e:	e07d      	b.n	800cc1c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cb20:	4b46      	ldr	r3, [pc, #280]	; (800cc3c <etharp_output+0x1fc>)
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	4619      	mov	r1, r3
 800cb26:	4a46      	ldr	r2, [pc, #280]	; (800cc40 <etharp_output+0x200>)
 800cb28:	460b      	mov	r3, r1
 800cb2a:	005b      	lsls	r3, r3, #1
 800cb2c:	440b      	add	r3, r1
 800cb2e:	00db      	lsls	r3, r3, #3
 800cb30:	4413      	add	r3, r2
 800cb32:	3314      	adds	r3, #20
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d925      	bls.n	800cb86 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cb3a:	4b40      	ldr	r3, [pc, #256]	; (800cc3c <etharp_output+0x1fc>)
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	4619      	mov	r1, r3
 800cb40:	4a3f      	ldr	r2, [pc, #252]	; (800cc40 <etharp_output+0x200>)
 800cb42:	460b      	mov	r3, r1
 800cb44:	005b      	lsls	r3, r3, #1
 800cb46:	440b      	add	r3, r1
 800cb48:	00db      	lsls	r3, r3, #3
 800cb4a:	4413      	add	r3, r2
 800cb4c:	3308      	adds	r3, #8
 800cb4e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d117      	bne.n	800cb86 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	4b38      	ldr	r3, [pc, #224]	; (800cc3c <etharp_output+0x1fc>)
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	4937      	ldr	r1, [pc, #220]	; (800cc40 <etharp_output+0x200>)
 800cb62:	4603      	mov	r3, r0
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	4403      	add	r3, r0
 800cb68:	00db      	lsls	r3, r3, #3
 800cb6a:	440b      	add	r3, r1
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d108      	bne.n	800cb86 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cb74:	4b31      	ldr	r3, [pc, #196]	; (800cc3c <etharp_output+0x1fc>)
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	461a      	mov	r2, r3
 800cb7a:	68b9      	ldr	r1, [r7, #8]
 800cb7c:	68f8      	ldr	r0, [r7, #12]
 800cb7e:	f7ff fec5 	bl	800c90c <etharp_output_to_arp_index>
 800cb82:	4603      	mov	r3, r0
 800cb84:	e04a      	b.n	800cc1c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cb86:	2300      	movs	r3, #0
 800cb88:	75fb      	strb	r3, [r7, #23]
 800cb8a:	e031      	b.n	800cbf0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cb8c:	7dfa      	ldrb	r2, [r7, #23]
 800cb8e:	492c      	ldr	r1, [pc, #176]	; (800cc40 <etharp_output+0x200>)
 800cb90:	4613      	mov	r3, r2
 800cb92:	005b      	lsls	r3, r3, #1
 800cb94:	4413      	add	r3, r2
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	440b      	add	r3, r1
 800cb9a:	3314      	adds	r3, #20
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d923      	bls.n	800cbea <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cba2:	7dfa      	ldrb	r2, [r7, #23]
 800cba4:	4926      	ldr	r1, [pc, #152]	; (800cc40 <etharp_output+0x200>)
 800cba6:	4613      	mov	r3, r2
 800cba8:	005b      	lsls	r3, r3, #1
 800cbaa:	4413      	add	r3, r2
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	440b      	add	r3, r1
 800cbb0:	3308      	adds	r3, #8
 800cbb2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d117      	bne.n	800cbea <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	6819      	ldr	r1, [r3, #0]
 800cbbe:	7dfa      	ldrb	r2, [r7, #23]
 800cbc0:	481f      	ldr	r0, [pc, #124]	; (800cc40 <etharp_output+0x200>)
 800cbc2:	4613      	mov	r3, r2
 800cbc4:	005b      	lsls	r3, r3, #1
 800cbc6:	4413      	add	r3, r2
 800cbc8:	00db      	lsls	r3, r3, #3
 800cbca:	4403      	add	r3, r0
 800cbcc:	3304      	adds	r3, #4
 800cbce:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cbd0:	4299      	cmp	r1, r3
 800cbd2:	d10a      	bne.n	800cbea <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cbd4:	4a19      	ldr	r2, [pc, #100]	; (800cc3c <etharp_output+0x1fc>)
 800cbd6:	7dfb      	ldrb	r3, [r7, #23]
 800cbd8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cbda:	7dfb      	ldrb	r3, [r7, #23]
 800cbdc:	461a      	mov	r2, r3
 800cbde:	68b9      	ldr	r1, [r7, #8]
 800cbe0:	68f8      	ldr	r0, [r7, #12]
 800cbe2:	f7ff fe93 	bl	800c90c <etharp_output_to_arp_index>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	e018      	b.n	800cc1c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cbea:	7dfb      	ldrb	r3, [r7, #23]
 800cbec:	3301      	adds	r3, #1
 800cbee:	75fb      	strb	r3, [r7, #23]
 800cbf0:	7dfb      	ldrb	r3, [r7, #23]
 800cbf2:	2b09      	cmp	r3, #9
 800cbf4:	d9ca      	bls.n	800cb8c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cbf6:	68ba      	ldr	r2, [r7, #8]
 800cbf8:	69b9      	ldr	r1, [r7, #24]
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	f000 f822 	bl	800cc44 <etharp_query>
 800cc00:	4603      	mov	r3, r0
 800cc02:	e00b      	b.n	800cc1c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cc0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	68b9      	ldr	r1, [r7, #8]
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f001 fdd5 	bl	800e7c4 <ethernet_output>
 800cc1a:	4603      	mov	r3, r0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3720      	adds	r7, #32
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	08011c10 	.word	0x08011c10
 800cc28:	08011d60 	.word	0x08011d60
 800cc2c:	08011c88 	.word	0x08011c88
 800cc30:	08011db0 	.word	0x08011db0
 800cc34:	08011d50 	.word	0x08011d50
 800cc38:	080123c4 	.word	0x080123c4
 800cc3c:	20008390 	.word	0x20008390
 800cc40:	200082a0 	.word	0x200082a0

0800cc44 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b08c      	sub	sp, #48	; 0x30
 800cc48:	af02      	add	r7, sp, #8
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	3326      	adds	r3, #38	; 0x26
 800cc54:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cc56:	23ff      	movs	r3, #255	; 0xff
 800cc58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	68f9      	ldr	r1, [r7, #12]
 800cc66:	4618      	mov	r0, r3
 800cc68:	f000 fe0e 	bl	800d888 <ip4_addr_isbroadcast_u32>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d10c      	bne.n	800cc8c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc7a:	2be0      	cmp	r3, #224	; 0xe0
 800cc7c:	d006      	beq.n	800cc8c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d003      	beq.n	800cc8c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d102      	bne.n	800cc92 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cc8c:	f06f 030f 	mvn.w	r3, #15
 800cc90:	e101      	b.n	800ce96 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	2101      	movs	r1, #1
 800cc96:	68b8      	ldr	r0, [r7, #8]
 800cc98:	f7ff fb60 	bl	800c35c <etharp_find_entry>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cca0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	da02      	bge.n	800ccae <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cca8:	8a7b      	ldrh	r3, [r7, #18]
 800ccaa:	b25b      	sxtb	r3, r3
 800ccac:	e0f3      	b.n	800ce96 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ccae:	8a7b      	ldrh	r3, [r7, #18]
 800ccb0:	2b7e      	cmp	r3, #126	; 0x7e
 800ccb2:	d906      	bls.n	800ccc2 <etharp_query+0x7e>
 800ccb4:	4b7a      	ldr	r3, [pc, #488]	; (800cea0 <etharp_query+0x25c>)
 800ccb6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ccba:	497a      	ldr	r1, [pc, #488]	; (800cea4 <etharp_query+0x260>)
 800ccbc:	487a      	ldr	r0, [pc, #488]	; (800cea8 <etharp_query+0x264>)
 800ccbe:	f001 feb7 	bl	800ea30 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ccc2:	8a7b      	ldrh	r3, [r7, #18]
 800ccc4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ccc6:	7c7a      	ldrb	r2, [r7, #17]
 800ccc8:	4978      	ldr	r1, [pc, #480]	; (800ceac <etharp_query+0x268>)
 800ccca:	4613      	mov	r3, r2
 800cccc:	005b      	lsls	r3, r3, #1
 800ccce:	4413      	add	r3, r2
 800ccd0:	00db      	lsls	r3, r3, #3
 800ccd2:	440b      	add	r3, r1
 800ccd4:	3314      	adds	r3, #20
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d115      	bne.n	800cd08 <etharp_query+0xc4>
    is_new_entry = 1;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cce0:	7c7a      	ldrb	r2, [r7, #17]
 800cce2:	4972      	ldr	r1, [pc, #456]	; (800ceac <etharp_query+0x268>)
 800cce4:	4613      	mov	r3, r2
 800cce6:	005b      	lsls	r3, r3, #1
 800cce8:	4413      	add	r3, r2
 800ccea:	00db      	lsls	r3, r3, #3
 800ccec:	440b      	add	r3, r1
 800ccee:	3314      	adds	r3, #20
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ccf4:	7c7a      	ldrb	r2, [r7, #17]
 800ccf6:	496d      	ldr	r1, [pc, #436]	; (800ceac <etharp_query+0x268>)
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	005b      	lsls	r3, r3, #1
 800ccfc:	4413      	add	r3, r2
 800ccfe:	00db      	lsls	r3, r3, #3
 800cd00:	440b      	add	r3, r1
 800cd02:	3308      	adds	r3, #8
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cd08:	7c7a      	ldrb	r2, [r7, #17]
 800cd0a:	4968      	ldr	r1, [pc, #416]	; (800ceac <etharp_query+0x268>)
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	005b      	lsls	r3, r3, #1
 800cd10:	4413      	add	r3, r2
 800cd12:	00db      	lsls	r3, r3, #3
 800cd14:	440b      	add	r3, r1
 800cd16:	3314      	adds	r3, #20
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d011      	beq.n	800cd42 <etharp_query+0xfe>
 800cd1e:	7c7a      	ldrb	r2, [r7, #17]
 800cd20:	4962      	ldr	r1, [pc, #392]	; (800ceac <etharp_query+0x268>)
 800cd22:	4613      	mov	r3, r2
 800cd24:	005b      	lsls	r3, r3, #1
 800cd26:	4413      	add	r3, r2
 800cd28:	00db      	lsls	r3, r3, #3
 800cd2a:	440b      	add	r3, r1
 800cd2c:	3314      	adds	r3, #20
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d806      	bhi.n	800cd42 <etharp_query+0xfe>
 800cd34:	4b5a      	ldr	r3, [pc, #360]	; (800cea0 <etharp_query+0x25c>)
 800cd36:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cd3a:	495d      	ldr	r1, [pc, #372]	; (800ceb0 <etharp_query+0x26c>)
 800cd3c:	485a      	ldr	r0, [pc, #360]	; (800cea8 <etharp_query+0x264>)
 800cd3e:	f001 fe77 	bl	800ea30 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cd42:	6a3b      	ldr	r3, [r7, #32]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d102      	bne.n	800cd4e <etharp_query+0x10a>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d10c      	bne.n	800cd68 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cd4e:	68b9      	ldr	r1, [r7, #8]
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f000 f963 	bl	800d01c <etharp_request>
 800cd56:	4603      	mov	r3, r0
 800cd58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d102      	bne.n	800cd68 <etharp_query+0x124>
      return result;
 800cd62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd66:	e096      	b.n	800ce96 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d106      	bne.n	800cd7c <etharp_query+0x138>
 800cd6e:	4b4c      	ldr	r3, [pc, #304]	; (800cea0 <etharp_query+0x25c>)
 800cd70:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cd74:	494f      	ldr	r1, [pc, #316]	; (800ceb4 <etharp_query+0x270>)
 800cd76:	484c      	ldr	r0, [pc, #304]	; (800cea8 <etharp_query+0x264>)
 800cd78:	f001 fe5a 	bl	800ea30 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cd7c:	7c7a      	ldrb	r2, [r7, #17]
 800cd7e:	494b      	ldr	r1, [pc, #300]	; (800ceac <etharp_query+0x268>)
 800cd80:	4613      	mov	r3, r2
 800cd82:	005b      	lsls	r3, r3, #1
 800cd84:	4413      	add	r3, r2
 800cd86:	00db      	lsls	r3, r3, #3
 800cd88:	440b      	add	r3, r1
 800cd8a:	3314      	adds	r3, #20
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d917      	bls.n	800cdc2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cd92:	4a49      	ldr	r2, [pc, #292]	; (800ceb8 <etharp_query+0x274>)
 800cd94:	7c7b      	ldrb	r3, [r7, #17]
 800cd96:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cd98:	7c7a      	ldrb	r2, [r7, #17]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	005b      	lsls	r3, r3, #1
 800cd9e:	4413      	add	r3, r2
 800cda0:	00db      	lsls	r3, r3, #3
 800cda2:	3308      	adds	r3, #8
 800cda4:	4a41      	ldr	r2, [pc, #260]	; (800ceac <etharp_query+0x268>)
 800cda6:	4413      	add	r3, r2
 800cda8:	3304      	adds	r3, #4
 800cdaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cdae:	9200      	str	r2, [sp, #0]
 800cdb0:	697a      	ldr	r2, [r7, #20]
 800cdb2:	6879      	ldr	r1, [r7, #4]
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f001 fd05 	bl	800e7c4 <ethernet_output>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cdc0:	e067      	b.n	800ce92 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cdc2:	7c7a      	ldrb	r2, [r7, #17]
 800cdc4:	4939      	ldr	r1, [pc, #228]	; (800ceac <etharp_query+0x268>)
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	005b      	lsls	r3, r3, #1
 800cdca:	4413      	add	r3, r2
 800cdcc:	00db      	lsls	r3, r3, #3
 800cdce:	440b      	add	r3, r1
 800cdd0:	3314      	adds	r3, #20
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d15c      	bne.n	800ce92 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cde0:	e01c      	b.n	800ce1c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	895a      	ldrh	r2, [r3, #10]
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	891b      	ldrh	r3, [r3, #8]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d10a      	bne.n	800ce04 <etharp_query+0x1c0>
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d006      	beq.n	800ce04 <etharp_query+0x1c0>
 800cdf6:	4b2a      	ldr	r3, [pc, #168]	; (800cea0 <etharp_query+0x25c>)
 800cdf8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cdfc:	492f      	ldr	r1, [pc, #188]	; (800cebc <etharp_query+0x278>)
 800cdfe:	482a      	ldr	r0, [pc, #168]	; (800cea8 <etharp_query+0x264>)
 800ce00:	f001 fe16 	bl	800ea30 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	7b1b      	ldrb	r3, [r3, #12]
 800ce08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d002      	beq.n	800ce16 <etharp_query+0x1d2>
        copy_needed = 1;
 800ce10:	2301      	movs	r3, #1
 800ce12:	61bb      	str	r3, [r7, #24]
        break;
 800ce14:	e005      	b.n	800ce22 <etharp_query+0x1de>
      }
      p = p->next;
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1df      	bne.n	800cde2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d007      	beq.n	800ce38 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ce2e:	200e      	movs	r0, #14
 800ce30:	f7f8 fe30 	bl	8005a94 <pbuf_clone>
 800ce34:	61f8      	str	r0, [r7, #28]
 800ce36:	e004      	b.n	800ce42 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ce3c:	69f8      	ldr	r0, [r7, #28]
 800ce3e:	f7f8 fc5d 	bl	80056fc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ce42:	69fb      	ldr	r3, [r7, #28]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d021      	beq.n	800ce8c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ce48:	7c7a      	ldrb	r2, [r7, #17]
 800ce4a:	4918      	ldr	r1, [pc, #96]	; (800ceac <etharp_query+0x268>)
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	005b      	lsls	r3, r3, #1
 800ce50:	4413      	add	r3, r2
 800ce52:	00db      	lsls	r3, r3, #3
 800ce54:	440b      	add	r3, r1
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00a      	beq.n	800ce72 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ce5c:	7c7a      	ldrb	r2, [r7, #17]
 800ce5e:	4913      	ldr	r1, [pc, #76]	; (800ceac <etharp_query+0x268>)
 800ce60:	4613      	mov	r3, r2
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	4413      	add	r3, r2
 800ce66:	00db      	lsls	r3, r3, #3
 800ce68:	440b      	add	r3, r1
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7f8 fba5 	bl	80055bc <pbuf_free>
      }
      arp_table[i].q = p;
 800ce72:	7c7a      	ldrb	r2, [r7, #17]
 800ce74:	490d      	ldr	r1, [pc, #52]	; (800ceac <etharp_query+0x268>)
 800ce76:	4613      	mov	r3, r2
 800ce78:	005b      	lsls	r3, r3, #1
 800ce7a:	4413      	add	r3, r2
 800ce7c:	00db      	lsls	r3, r3, #3
 800ce7e:	440b      	add	r3, r1
 800ce80:	69fa      	ldr	r2, [r7, #28]
 800ce82:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ce84:	2300      	movs	r3, #0
 800ce86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce8a:	e002      	b.n	800ce92 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ce8c:	23ff      	movs	r3, #255	; 0xff
 800ce8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ce92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3728      	adds	r7, #40	; 0x28
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	08011c10 	.word	0x08011c10
 800cea4:	08011dbc 	.word	0x08011dbc
 800cea8:	08011c88 	.word	0x08011c88
 800ceac:	200082a0 	.word	0x200082a0
 800ceb0:	08011dcc 	.word	0x08011dcc
 800ceb4:	08011db0 	.word	0x08011db0
 800ceb8:	20008390 	.word	0x20008390
 800cebc:	08011df4 	.word	0x08011df4

0800cec0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b08a      	sub	sp, #40	; 0x28
 800cec4:	af02      	add	r7, sp, #8
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	607a      	str	r2, [r7, #4]
 800cecc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d106      	bne.n	800cee6 <etharp_raw+0x26>
 800ced8:	4b3a      	ldr	r3, [pc, #232]	; (800cfc4 <etharp_raw+0x104>)
 800ceda:	f240 4257 	movw	r2, #1111	; 0x457
 800cede:	493a      	ldr	r1, [pc, #232]	; (800cfc8 <etharp_raw+0x108>)
 800cee0:	483a      	ldr	r0, [pc, #232]	; (800cfcc <etharp_raw+0x10c>)
 800cee2:	f001 fda5 	bl	800ea30 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cee6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ceea:	211c      	movs	r1, #28
 800ceec:	200e      	movs	r0, #14
 800ceee:	f7f8 f881 	bl	8004ff4 <pbuf_alloc>
 800cef2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d102      	bne.n	800cf00 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800cefa:	f04f 33ff 	mov.w	r3, #4294967295
 800cefe:	e05d      	b.n	800cfbc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	895b      	ldrh	r3, [r3, #10]
 800cf04:	2b1b      	cmp	r3, #27
 800cf06:	d806      	bhi.n	800cf16 <etharp_raw+0x56>
 800cf08:	4b2e      	ldr	r3, [pc, #184]	; (800cfc4 <etharp_raw+0x104>)
 800cf0a:	f240 4262 	movw	r2, #1122	; 0x462
 800cf0e:	4930      	ldr	r1, [pc, #192]	; (800cfd0 <etharp_raw+0x110>)
 800cf10:	482e      	ldr	r0, [pc, #184]	; (800cfcc <etharp_raw+0x10c>)
 800cf12:	f001 fd8d 	bl	800ea30 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cf1c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7f6 ffee 	bl	8003f00 <lwip_htons>
 800cf24:	4603      	mov	r3, r0
 800cf26:	461a      	mov	r2, r3
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cf32:	2b06      	cmp	r3, #6
 800cf34:	d006      	beq.n	800cf44 <etharp_raw+0x84>
 800cf36:	4b23      	ldr	r3, [pc, #140]	; (800cfc4 <etharp_raw+0x104>)
 800cf38:	f240 4269 	movw	r2, #1129	; 0x469
 800cf3c:	4925      	ldr	r1, [pc, #148]	; (800cfd4 <etharp_raw+0x114>)
 800cf3e:	4823      	ldr	r0, [pc, #140]	; (800cfcc <etharp_raw+0x10c>)
 800cf40:	f001 fd76 	bl	800ea30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	3308      	adds	r3, #8
 800cf48:	2206      	movs	r2, #6
 800cf4a:	6839      	ldr	r1, [r7, #0]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f001 fe5b 	bl	800ec08 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	3312      	adds	r3, #18
 800cf56:	2206      	movs	r2, #6
 800cf58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f001 fe54 	bl	800ec08 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	330e      	adds	r3, #14
 800cf64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf66:	6812      	ldr	r2, [r2, #0]
 800cf68:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	3318      	adds	r3, #24
 800cf6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf70:	6812      	ldr	r2, [r2, #0]
 800cf72:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	2200      	movs	r2, #0
 800cf78:	701a      	strb	r2, [r3, #0]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f042 0201 	orr.w	r2, r2, #1
 800cf80:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	2200      	movs	r2, #0
 800cf86:	f042 0208 	orr.w	r2, r2, #8
 800cf8a:	709a      	strb	r2, [r3, #2]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	2206      	movs	r2, #6
 800cf94:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	2204      	movs	r2, #4
 800cf9a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cf9c:	f640 0306 	movw	r3, #2054	; 0x806
 800cfa0:	9300      	str	r3, [sp, #0]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	69b9      	ldr	r1, [r7, #24]
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f001 fc0b 	bl	800e7c4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cfae:	69b8      	ldr	r0, [r7, #24]
 800cfb0:	f7f8 fb04 	bl	80055bc <pbuf_free>
  p = NULL;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cfb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3720      	adds	r7, #32
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	08011c10 	.word	0x08011c10
 800cfc8:	08011d60 	.word	0x08011d60
 800cfcc:	08011c88 	.word	0x08011c88
 800cfd0:	08011e10 	.word	0x08011e10
 800cfd4:	08011e44 	.word	0x08011e44

0800cfd8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b088      	sub	sp, #32
 800cfdc:	af04      	add	r7, sp, #16
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cff4:	2201      	movs	r2, #1
 800cff6:	9203      	str	r2, [sp, #12]
 800cff8:	68ba      	ldr	r2, [r7, #8]
 800cffa:	9202      	str	r2, [sp, #8]
 800cffc:	4a06      	ldr	r2, [pc, #24]	; (800d018 <etharp_request_dst+0x40>)
 800cffe:	9201      	str	r2, [sp, #4]
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	4603      	mov	r3, r0
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	68f8      	ldr	r0, [r7, #12]
 800d008:	f7ff ff5a 	bl	800cec0 <etharp_raw>
 800d00c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	080123cc 	.word	0x080123cc

0800d01c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d026:	4a05      	ldr	r2, [pc, #20]	; (800d03c <etharp_request+0x20>)
 800d028:	6839      	ldr	r1, [r7, #0]
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7ff ffd4 	bl	800cfd8 <etharp_request_dst>
 800d030:	4603      	mov	r3, r0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	080123c4 	.word	0x080123c4

0800d040 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b08e      	sub	sp, #56	; 0x38
 800d044:	af04      	add	r7, sp, #16
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d04a:	4b79      	ldr	r3, [pc, #484]	; (800d230 <icmp_input+0x1f0>)
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	f003 030f 	and.w	r3, r3, #15
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d060:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d062:	2b13      	cmp	r3, #19
 800d064:	f240 80cd 	bls.w	800d202 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	895b      	ldrh	r3, [r3, #10]
 800d06c:	2b03      	cmp	r3, #3
 800d06e:	f240 80ca 	bls.w	800d206 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d07c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d080:	2b00      	cmp	r3, #0
 800d082:	f000 80b7 	beq.w	800d1f4 <icmp_input+0x1b4>
 800d086:	2b08      	cmp	r3, #8
 800d088:	f040 80b7 	bne.w	800d1fa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d08c:	4b69      	ldr	r3, [pc, #420]	; (800d234 <icmp_input+0x1f4>)
 800d08e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d090:	4b67      	ldr	r3, [pc, #412]	; (800d230 <icmp_input+0x1f0>)
 800d092:	695b      	ldr	r3, [r3, #20]
 800d094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d098:	2be0      	cmp	r3, #224	; 0xe0
 800d09a:	f000 80bb 	beq.w	800d214 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d09e:	4b64      	ldr	r3, [pc, #400]	; (800d230 <icmp_input+0x1f0>)
 800d0a0:	695b      	ldr	r3, [r3, #20]
 800d0a2:	4a63      	ldr	r2, [pc, #396]	; (800d230 <icmp_input+0x1f0>)
 800d0a4:	6812      	ldr	r2, [r2, #0]
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f000 fbed 	bl	800d888 <ip4_addr_isbroadcast_u32>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	f040 80b1 	bne.w	800d218 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	891b      	ldrh	r3, [r3, #8]
 800d0ba:	2b07      	cmp	r3, #7
 800d0bc:	f240 80a5 	bls.w	800d20a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d0c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0c2:	330e      	adds	r3, #14
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f7f8 f9e2 	bl	8005490 <pbuf_add_header>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d04b      	beq.n	800d16a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	891a      	ldrh	r2, [r3, #8]
 800d0d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0d8:	4413      	add	r3, r2
 800d0da:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	891b      	ldrh	r3, [r3, #8]
 800d0e0:	8b7a      	ldrh	r2, [r7, #26]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	f0c0 809a 	bcc.w	800d21c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d0e8:	8b7b      	ldrh	r3, [r7, #26]
 800d0ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	200e      	movs	r0, #14
 800d0f2:	f7f7 ff7f 	bl	8004ff4 <pbuf_alloc>
 800d0f6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f000 8090 	beq.w	800d220 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	895b      	ldrh	r3, [r3, #10]
 800d104:	461a      	mov	r2, r3
 800d106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d108:	3308      	adds	r3, #8
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d203      	bcs.n	800d116 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d10e:	6978      	ldr	r0, [r7, #20]
 800d110:	f7f8 fa54 	bl	80055bc <pbuf_free>
          goto icmperr;
 800d114:	e085      	b.n	800d222 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d11c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d11e:	4618      	mov	r0, r3
 800d120:	f001 fd72 	bl	800ec08 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d126:	4619      	mov	r1, r3
 800d128:	6978      	ldr	r0, [r7, #20]
 800d12a:	f7f8 f9c1 	bl	80054b0 <pbuf_remove_header>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d009      	beq.n	800d148 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d134:	4b40      	ldr	r3, [pc, #256]	; (800d238 <icmp_input+0x1f8>)
 800d136:	22b6      	movs	r2, #182	; 0xb6
 800d138:	4940      	ldr	r1, [pc, #256]	; (800d23c <icmp_input+0x1fc>)
 800d13a:	4841      	ldr	r0, [pc, #260]	; (800d240 <icmp_input+0x200>)
 800d13c:	f001 fc78 	bl	800ea30 <iprintf>
          pbuf_free(r);
 800d140:	6978      	ldr	r0, [r7, #20]
 800d142:	f7f8 fa3b 	bl	80055bc <pbuf_free>
          goto icmperr;
 800d146:	e06c      	b.n	800d222 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d148:	6879      	ldr	r1, [r7, #4]
 800d14a:	6978      	ldr	r0, [r7, #20]
 800d14c:	f7f8 fb5e 	bl	800580c <pbuf_copy>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d003      	beq.n	800d15e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d156:	6978      	ldr	r0, [r7, #20]
 800d158:	f7f8 fa30 	bl	80055bc <pbuf_free>
          goto icmperr;
 800d15c:	e061      	b.n	800d222 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f7f8 fa2c 	bl	80055bc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	607b      	str	r3, [r7, #4]
 800d168:	e00f      	b.n	800d18a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d16a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d16c:	330e      	adds	r3, #14
 800d16e:	4619      	mov	r1, r3
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f7f8 f99d 	bl	80054b0 <pbuf_remove_header>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d006      	beq.n	800d18a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d17c:	4b2e      	ldr	r3, [pc, #184]	; (800d238 <icmp_input+0x1f8>)
 800d17e:	22c7      	movs	r2, #199	; 0xc7
 800d180:	4930      	ldr	r1, [pc, #192]	; (800d244 <icmp_input+0x204>)
 800d182:	482f      	ldr	r0, [pc, #188]	; (800d240 <icmp_input+0x200>)
 800d184:	f001 fc54 	bl	800ea30 <iprintf>
          goto icmperr;
 800d188:	e04b      	b.n	800d222 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d190:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d192:	4619      	mov	r1, r3
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f7f8 f97b 	bl	8005490 <pbuf_add_header>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d12b      	bne.n	800d1f8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d1ae:	4b20      	ldr	r3, [pc, #128]	; (800d230 <icmp_input+0x1f0>)
 800d1b0:	691a      	ldr	r2, [r3, #16]
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	709a      	strb	r2, [r3, #2]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	22ff      	movs	r2, #255	; 0xff
 800d1ca:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	729a      	strb	r2, [r3, #10]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	9302      	str	r3, [sp, #8]
 800d1da:	2301      	movs	r3, #1
 800d1dc:	9301      	str	r3, [sp, #4]
 800d1de:	2300      	movs	r3, #0
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	23ff      	movs	r3, #255	; 0xff
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	69f9      	ldr	r1, [r7, #28]
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 fa75 	bl	800d6d8 <ip4_output_if>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d1f2:	e001      	b.n	800d1f8 <icmp_input+0x1b8>
      break;
 800d1f4:	bf00      	nop
 800d1f6:	e000      	b.n	800d1fa <icmp_input+0x1ba>
      break;
 800d1f8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7f8 f9de 	bl	80055bc <pbuf_free>
  return;
 800d200:	e013      	b.n	800d22a <icmp_input+0x1ea>
    goto lenerr;
 800d202:	bf00      	nop
 800d204:	e002      	b.n	800d20c <icmp_input+0x1cc>
    goto lenerr;
 800d206:	bf00      	nop
 800d208:	e000      	b.n	800d20c <icmp_input+0x1cc>
        goto lenerr;
 800d20a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f7f8 f9d5 	bl	80055bc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d212:	e00a      	b.n	800d22a <icmp_input+0x1ea>
        goto icmperr;
 800d214:	bf00      	nop
 800d216:	e004      	b.n	800d222 <icmp_input+0x1e2>
        goto icmperr;
 800d218:	bf00      	nop
 800d21a:	e002      	b.n	800d222 <icmp_input+0x1e2>
          goto icmperr;
 800d21c:	bf00      	nop
 800d21e:	e000      	b.n	800d222 <icmp_input+0x1e2>
          goto icmperr;
 800d220:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f7f8 f9ca 	bl	80055bc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d228:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d22a:	3728      	adds	r7, #40	; 0x28
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	20004cd0 	.word	0x20004cd0
 800d234:	20004ce4 	.word	0x20004ce4
 800d238:	08011e88 	.word	0x08011e88
 800d23c:	08011ec0 	.word	0x08011ec0
 800d240:	08011ef8 	.word	0x08011ef8
 800d244:	08011f20 	.word	0x08011f20

0800d248 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	460b      	mov	r3, r1
 800d252:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d254:	78fb      	ldrb	r3, [r7, #3]
 800d256:	461a      	mov	r2, r3
 800d258:	2103      	movs	r1, #3
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 f814 	bl	800d288 <icmp_send_response>
}
 800d260:	bf00      	nop
 800d262:	3708      	adds	r7, #8
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	460b      	mov	r3, r1
 800d272:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d274:	78fb      	ldrb	r3, [r7, #3]
 800d276:	461a      	mov	r2, r3
 800d278:	210b      	movs	r1, #11
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f804 	bl	800d288 <icmp_send_response>
}
 800d280:	bf00      	nop
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b08c      	sub	sp, #48	; 0x30
 800d28c:	af04      	add	r7, sp, #16
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	460b      	mov	r3, r1
 800d292:	70fb      	strb	r3, [r7, #3]
 800d294:	4613      	mov	r3, r2
 800d296:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d298:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d29c:	2124      	movs	r1, #36	; 0x24
 800d29e:	2022      	movs	r0, #34	; 0x22
 800d2a0:	f7f7 fea8 	bl	8004ff4 <pbuf_alloc>
 800d2a4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d04c      	beq.n	800d346 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	895b      	ldrh	r3, [r3, #10]
 800d2b0:	2b23      	cmp	r3, #35	; 0x23
 800d2b2:	d806      	bhi.n	800d2c2 <icmp_send_response+0x3a>
 800d2b4:	4b26      	ldr	r3, [pc, #152]	; (800d350 <icmp_send_response+0xc8>)
 800d2b6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d2ba:	4926      	ldr	r1, [pc, #152]	; (800d354 <icmp_send_response+0xcc>)
 800d2bc:	4826      	ldr	r0, [pc, #152]	; (800d358 <icmp_send_response+0xd0>)
 800d2be:	f001 fbb7 	bl	800ea30 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	78fa      	ldrb	r2, [r7, #3]
 800d2d2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	78ba      	ldrb	r2, [r7, #2]
 800d2d8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	711a      	strb	r2, [r3, #4]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	719a      	strb	r2, [r3, #6]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d2ee:	69fb      	ldr	r3, [r7, #28]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f103 0008 	add.w	r0, r3, #8
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	221c      	movs	r2, #28
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	f001 fc83 	bl	800ec08 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d308:	f107 030c 	add.w	r3, r7, #12
 800d30c:	4618      	mov	r0, r3
 800d30e:	f000 f825 	bl	800d35c <ip4_route>
 800d312:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d011      	beq.n	800d33e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	2200      	movs	r2, #0
 800d31e:	709a      	strb	r2, [r3, #2]
 800d320:	2200      	movs	r2, #0
 800d322:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d324:	f107 020c 	add.w	r2, r7, #12
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	9302      	str	r3, [sp, #8]
 800d32c:	2301      	movs	r3, #1
 800d32e:	9301      	str	r3, [sp, #4]
 800d330:	2300      	movs	r3, #0
 800d332:	9300      	str	r3, [sp, #0]
 800d334:	23ff      	movs	r3, #255	; 0xff
 800d336:	2100      	movs	r1, #0
 800d338:	69f8      	ldr	r0, [r7, #28]
 800d33a:	f000 f9cd 	bl	800d6d8 <ip4_output_if>
  }
  pbuf_free(q);
 800d33e:	69f8      	ldr	r0, [r7, #28]
 800d340:	f7f8 f93c 	bl	80055bc <pbuf_free>
 800d344:	e000      	b.n	800d348 <icmp_send_response+0xc0>
    return;
 800d346:	bf00      	nop
}
 800d348:	3720      	adds	r7, #32
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	08011e88 	.word	0x08011e88
 800d354:	08011f54 	.word	0x08011f54
 800d358:	08011ef8 	.word	0x08011ef8

0800d35c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d364:	4b33      	ldr	r3, [pc, #204]	; (800d434 <ip4_route+0xd8>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	60fb      	str	r3, [r7, #12]
 800d36a:	e036      	b.n	800d3da <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d372:	f003 0301 	and.w	r3, r3, #1
 800d376:	b2db      	uxtb	r3, r3
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d02b      	beq.n	800d3d4 <ip4_route+0x78>
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d382:	089b      	lsrs	r3, r3, #2
 800d384:	f003 0301 	and.w	r3, r3, #1
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d022      	beq.n	800d3d4 <ip4_route+0x78>
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3304      	adds	r3, #4
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d01d      	beq.n	800d3d4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	3304      	adds	r3, #4
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	405a      	eors	r2, r3
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	3308      	adds	r3, #8
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4013      	ands	r3, r2
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d101      	bne.n	800d3b4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	e038      	b.n	800d426 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3ba:	f003 0302 	and.w	r3, r3, #2
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d108      	bne.n	800d3d4 <ip4_route+0x78>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	330c      	adds	r3, #12
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d101      	bne.n	800d3d4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	e028      	b.n	800d426 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	60fb      	str	r3, [r7, #12]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1c5      	bne.n	800d36c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d3e0:	4b15      	ldr	r3, [pc, #84]	; (800d438 <ip4_route+0xdc>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d01a      	beq.n	800d41e <ip4_route+0xc2>
 800d3e8:	4b13      	ldr	r3, [pc, #76]	; (800d438 <ip4_route+0xdc>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3f0:	f003 0301 	and.w	r3, r3, #1
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d012      	beq.n	800d41e <ip4_route+0xc2>
 800d3f8:	4b0f      	ldr	r3, [pc, #60]	; (800d438 <ip4_route+0xdc>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d400:	f003 0304 	and.w	r3, r3, #4
 800d404:	2b00      	cmp	r3, #0
 800d406:	d00a      	beq.n	800d41e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d408:	4b0b      	ldr	r3, [pc, #44]	; (800d438 <ip4_route+0xdc>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3304      	adds	r3, #4
 800d40e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d410:	2b00      	cmp	r3, #0
 800d412:	d004      	beq.n	800d41e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	2b7f      	cmp	r3, #127	; 0x7f
 800d41c:	d101      	bne.n	800d422 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d41e:	2300      	movs	r3, #0
 800d420:	e001      	b.n	800d426 <ip4_route+0xca>
  }

  return netif_default;
 800d422:	4b05      	ldr	r3, [pc, #20]	; (800d438 <ip4_route+0xdc>)
 800d424:	681b      	ldr	r3, [r3, #0]
}
 800d426:	4618      	mov	r0, r3
 800d428:	3714      	adds	r7, #20
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr
 800d432:	bf00      	nop
 800d434:	20008234 	.word	0x20008234
 800d438:	20008238 	.word	0x20008238

0800d43c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d44a:	f003 0301 	and.w	r3, r3, #1
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	2b00      	cmp	r3, #0
 800d452:	d016      	beq.n	800d482 <ip4_input_accept+0x46>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	3304      	adds	r3, #4
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d011      	beq.n	800d482 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d45e:	4b0b      	ldr	r3, [pc, #44]	; (800d48c <ip4_input_accept+0x50>)
 800d460:	695a      	ldr	r2, [r3, #20]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	3304      	adds	r3, #4
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d008      	beq.n	800d47e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d46c:	4b07      	ldr	r3, [pc, #28]	; (800d48c <ip4_input_accept+0x50>)
 800d46e:	695b      	ldr	r3, [r3, #20]
 800d470:	6879      	ldr	r1, [r7, #4]
 800d472:	4618      	mov	r0, r3
 800d474:	f000 fa08 	bl	800d888 <ip4_addr_isbroadcast_u32>
 800d478:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d001      	beq.n	800d482 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d47e:	2301      	movs	r3, #1
 800d480:	e000      	b.n	800d484 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d482:	2300      	movs	r3, #0
}
 800d484:	4618      	mov	r0, r3
 800d486:	3708      	adds	r7, #8
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	20004cd0 	.word	0x20004cd0

0800d490 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b086      	sub	sp, #24
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	091b      	lsrs	r3, r3, #4
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	2b04      	cmp	r3, #4
 800d4aa:	d004      	beq.n	800d4b6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f7f8 f885 	bl	80055bc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	e107      	b.n	800d6c6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	f003 030f 	and.w	r3, r3, #15
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	885b      	ldrh	r3, [r3, #2]
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7f6 fd17 	bl	8003f00 <lwip_htons>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	891b      	ldrh	r3, [r3, #8]
 800d4da:	89ba      	ldrh	r2, [r7, #12]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d204      	bcs.n	800d4ea <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d4e0:	89bb      	ldrh	r3, [r7, #12]
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7f7 fee3 	bl	80052b0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	895b      	ldrh	r3, [r3, #10]
 800d4ee:	89fa      	ldrh	r2, [r7, #14]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d807      	bhi.n	800d504 <ip4_input+0x74>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	891b      	ldrh	r3, [r3, #8]
 800d4f8:	89ba      	ldrh	r2, [r7, #12]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d802      	bhi.n	800d504 <ip4_input+0x74>
 800d4fe:	89fb      	ldrh	r3, [r7, #14]
 800d500:	2b13      	cmp	r3, #19
 800d502:	d804      	bhi.n	800d50e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f7f8 f859 	bl	80055bc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d50a:	2300      	movs	r3, #0
 800d50c:	e0db      	b.n	800d6c6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	691b      	ldr	r3, [r3, #16]
 800d512:	4a6f      	ldr	r2, [pc, #444]	; (800d6d0 <ip4_input+0x240>)
 800d514:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	4a6d      	ldr	r2, [pc, #436]	; (800d6d0 <ip4_input+0x240>)
 800d51c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d51e:	4b6c      	ldr	r3, [pc, #432]	; (800d6d0 <ip4_input+0x240>)
 800d520:	695b      	ldr	r3, [r3, #20]
 800d522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d526:	2be0      	cmp	r3, #224	; 0xe0
 800d528:	d112      	bne.n	800d550 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d530:	f003 0301 	and.w	r3, r3, #1
 800d534:	b2db      	uxtb	r3, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	d007      	beq.n	800d54a <ip4_input+0xba>
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	3304      	adds	r3, #4
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d002      	beq.n	800d54a <ip4_input+0xba>
      netif = inp;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	613b      	str	r3, [r7, #16]
 800d548:	e02a      	b.n	800d5a0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d54a:	2300      	movs	r3, #0
 800d54c:	613b      	str	r3, [r7, #16]
 800d54e:	e027      	b.n	800d5a0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d550:	6838      	ldr	r0, [r7, #0]
 800d552:	f7ff ff73 	bl	800d43c <ip4_input_accept>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d002      	beq.n	800d562 <ip4_input+0xd2>
      netif = inp;
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	613b      	str	r3, [r7, #16]
 800d560:	e01e      	b.n	800d5a0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d562:	2300      	movs	r3, #0
 800d564:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d566:	4b5a      	ldr	r3, [pc, #360]	; (800d6d0 <ip4_input+0x240>)
 800d568:	695b      	ldr	r3, [r3, #20]
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	2b7f      	cmp	r3, #127	; 0x7f
 800d56e:	d017      	beq.n	800d5a0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d570:	4b58      	ldr	r3, [pc, #352]	; (800d6d4 <ip4_input+0x244>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	613b      	str	r3, [r7, #16]
 800d576:	e00e      	b.n	800d596 <ip4_input+0x106>
          if (netif == inp) {
 800d578:	693a      	ldr	r2, [r7, #16]
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d006      	beq.n	800d58e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d580:	6938      	ldr	r0, [r7, #16]
 800d582:	f7ff ff5b 	bl	800d43c <ip4_input_accept>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d108      	bne.n	800d59e <ip4_input+0x10e>
 800d58c:	e000      	b.n	800d590 <ip4_input+0x100>
            continue;
 800d58e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	613b      	str	r3, [r7, #16]
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1ed      	bne.n	800d578 <ip4_input+0xe8>
 800d59c:	e000      	b.n	800d5a0 <ip4_input+0x110>
            break;
 800d59e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d5a0:	4b4b      	ldr	r3, [pc, #300]	; (800d6d0 <ip4_input+0x240>)
 800d5a2:	691b      	ldr	r3, [r3, #16]
 800d5a4:	6839      	ldr	r1, [r7, #0]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f000 f96e 	bl	800d888 <ip4_addr_isbroadcast_u32>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d105      	bne.n	800d5be <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d5b2:	4b47      	ldr	r3, [pc, #284]	; (800d6d0 <ip4_input+0x240>)
 800d5b4:	691b      	ldr	r3, [r3, #16]
 800d5b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d5ba:	2be0      	cmp	r3, #224	; 0xe0
 800d5bc:	d104      	bne.n	800d5c8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7f7 fffc 	bl	80055bc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	e07e      	b.n	800d6c6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d104      	bne.n	800d5d8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7f7 fff4 	bl	80055bc <pbuf_free>
    return ERR_OK;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	e076      	b.n	800d6c6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	88db      	ldrh	r3, [r3, #6]
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	461a      	mov	r2, r3
 800d5e0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d5e4:	4013      	ands	r3, r2
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00b      	beq.n	800d602 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 fd22 	bl	800e034 <ip4_reass>
 800d5f0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d101      	bne.n	800d5fc <ip4_input+0x16c>
      return ERR_OK;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	e064      	b.n	800d6c6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d602:	4a33      	ldr	r2, [pc, #204]	; (800d6d0 <ip4_input+0x240>)
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d608:	4a31      	ldr	r2, [pc, #196]	; (800d6d0 <ip4_input+0x240>)
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d60e:	4a30      	ldr	r2, [pc, #192]	; (800d6d0 <ip4_input+0x240>)
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	f003 030f 	and.w	r3, r3, #15
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	b2db      	uxtb	r3, r3
 800d622:	b29a      	uxth	r2, r3
 800d624:	4b2a      	ldr	r3, [pc, #168]	; (800d6d0 <ip4_input+0x240>)
 800d626:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d628:	89fb      	ldrh	r3, [r7, #14]
 800d62a:	4619      	mov	r1, r3
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f7f7 ff3f 	bl	80054b0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	7a5b      	ldrb	r3, [r3, #9]
 800d636:	2b11      	cmp	r3, #17
 800d638:	d006      	beq.n	800d648 <ip4_input+0x1b8>
 800d63a:	2b11      	cmp	r3, #17
 800d63c:	dc13      	bgt.n	800d666 <ip4_input+0x1d6>
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d00c      	beq.n	800d65c <ip4_input+0x1cc>
 800d642:	2b06      	cmp	r3, #6
 800d644:	d005      	beq.n	800d652 <ip4_input+0x1c2>
 800d646:	e00e      	b.n	800d666 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d648:	6839      	ldr	r1, [r7, #0]
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f7fe fc68 	bl	800bf20 <udp_input>
        break;
 800d650:	e026      	b.n	800d6a0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d652:	6839      	ldr	r1, [r7, #0]
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f7fa f889 	bl	800776c <tcp_input>
        break;
 800d65a:	e021      	b.n	800d6a0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d65c:	6839      	ldr	r1, [r7, #0]
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7ff fcee 	bl	800d040 <icmp_input>
        break;
 800d664:	e01c      	b.n	800d6a0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d666:	4b1a      	ldr	r3, [pc, #104]	; (800d6d0 <ip4_input+0x240>)
 800d668:	695b      	ldr	r3, [r3, #20]
 800d66a:	6939      	ldr	r1, [r7, #16]
 800d66c:	4618      	mov	r0, r3
 800d66e:	f000 f90b 	bl	800d888 <ip4_addr_isbroadcast_u32>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10f      	bne.n	800d698 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d678:	4b15      	ldr	r3, [pc, #84]	; (800d6d0 <ip4_input+0x240>)
 800d67a:	695b      	ldr	r3, [r3, #20]
 800d67c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d680:	2be0      	cmp	r3, #224	; 0xe0
 800d682:	d009      	beq.n	800d698 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d688:	4619      	mov	r1, r3
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7f7 ff83 	bl	8005596 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d690:	2102      	movs	r1, #2
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7ff fdd8 	bl	800d248 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f7f7 ff8f 	bl	80055bc <pbuf_free>
        break;
 800d69e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d6a0:	4b0b      	ldr	r3, [pc, #44]	; (800d6d0 <ip4_input+0x240>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d6a6:	4b0a      	ldr	r3, [pc, #40]	; (800d6d0 <ip4_input+0x240>)
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d6ac:	4b08      	ldr	r3, [pc, #32]	; (800d6d0 <ip4_input+0x240>)
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d6b2:	4b07      	ldr	r3, [pc, #28]	; (800d6d0 <ip4_input+0x240>)
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d6b8:	4b05      	ldr	r3, [pc, #20]	; (800d6d0 <ip4_input+0x240>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d6be:	4b04      	ldr	r3, [pc, #16]	; (800d6d0 <ip4_input+0x240>)
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3718      	adds	r7, #24
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	20004cd0 	.word	0x20004cd0
 800d6d4:	20008234 	.word	0x20008234

0800d6d8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b08a      	sub	sp, #40	; 0x28
 800d6dc:	af04      	add	r7, sp, #16
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	607a      	str	r2, [r7, #4]
 800d6e4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d009      	beq.n	800d704 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d003      	beq.n	800d6fe <ip4_output_if+0x26>
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d102      	bne.n	800d704 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d700:	3304      	adds	r3, #4
 800d702:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d704:	78fa      	ldrb	r2, [r7, #3]
 800d706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d708:	9302      	str	r3, [sp, #8]
 800d70a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d70e:	9301      	str	r3, [sp, #4]
 800d710:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	4613      	mov	r3, r2
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	6979      	ldr	r1, [r7, #20]
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f000 f805 	bl	800d72c <ip4_output_if_src>
 800d722:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d724:	4618      	mov	r0, r3
 800d726:	3718      	adds	r7, #24
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b088      	sub	sp, #32
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	607a      	str	r2, [r7, #4]
 800d738:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	7b9b      	ldrb	r3, [r3, #14]
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d006      	beq.n	800d750 <ip4_output_if_src+0x24>
 800d742:	4b4b      	ldr	r3, [pc, #300]	; (800d870 <ip4_output_if_src+0x144>)
 800d744:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d748:	494a      	ldr	r1, [pc, #296]	; (800d874 <ip4_output_if_src+0x148>)
 800d74a:	484b      	ldr	r0, [pc, #300]	; (800d878 <ip4_output_if_src+0x14c>)
 800d74c:	f001 f970 	bl	800ea30 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d060      	beq.n	800d818 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d756:	2314      	movs	r3, #20
 800d758:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d75a:	2114      	movs	r1, #20
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f7f7 fe97 	bl	8005490 <pbuf_add_header>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d002      	beq.n	800d76e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d768:	f06f 0301 	mvn.w	r3, #1
 800d76c:	e07c      	b.n	800d868 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	895b      	ldrh	r3, [r3, #10]
 800d778:	2b13      	cmp	r3, #19
 800d77a:	d806      	bhi.n	800d78a <ip4_output_if_src+0x5e>
 800d77c:	4b3c      	ldr	r3, [pc, #240]	; (800d870 <ip4_output_if_src+0x144>)
 800d77e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d782:	493e      	ldr	r1, [pc, #248]	; (800d87c <ip4_output_if_src+0x150>)
 800d784:	483c      	ldr	r0, [pc, #240]	; (800d878 <ip4_output_if_src+0x14c>)
 800d786:	f001 f953 	bl	800ea30 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	78fa      	ldrb	r2, [r7, #3]
 800d78e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d796:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d7a0:	8b7b      	ldrh	r3, [r7, #26]
 800d7a2:	089b      	lsrs	r3, r3, #2
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d7b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	891b      	ldrh	r3, [r3, #8]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7f6 fb9e 	bl	8003f00 <lwip_htons>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	719a      	strb	r2, [r3, #6]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d7d6:	4b2a      	ldr	r3, [pc, #168]	; (800d880 <ip4_output_if_src+0x154>)
 800d7d8:	881b      	ldrh	r3, [r3, #0]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7f6 fb90 	bl	8003f00 <lwip_htons>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d7e8:	4b25      	ldr	r3, [pc, #148]	; (800d880 <ip4_output_if_src+0x154>)
 800d7ea:	881b      	ldrh	r3, [r3, #0]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	4b23      	ldr	r3, [pc, #140]	; (800d880 <ip4_output_if_src+0x154>)
 800d7f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d104      	bne.n	800d804 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d7fa:	4b22      	ldr	r3, [pc, #136]	; (800d884 <ip4_output_if_src+0x158>)
 800d7fc:	681a      	ldr	r2, [r3, #0]
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	60da      	str	r2, [r3, #12]
 800d802:	e003      	b.n	800d80c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	2200      	movs	r2, #0
 800d810:	729a      	strb	r2, [r3, #10]
 800d812:	2200      	movs	r2, #0
 800d814:	72da      	strb	r2, [r3, #11]
 800d816:	e00f      	b.n	800d838 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	895b      	ldrh	r3, [r3, #10]
 800d81c:	2b13      	cmp	r3, #19
 800d81e:	d802      	bhi.n	800d826 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d820:	f06f 0301 	mvn.w	r3, #1
 800d824:	e020      	b.n	800d868 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	691b      	ldr	r3, [r3, #16]
 800d830:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d832:	f107 0314 	add.w	r3, r7, #20
 800d836:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00c      	beq.n	800d85a <ip4_output_if_src+0x12e>
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	891a      	ldrh	r2, [r3, #8]
 800d844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d846:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d848:	429a      	cmp	r2, r3
 800d84a:	d906      	bls.n	800d85a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f000 fde3 	bl	800e41c <ip4_frag>
 800d856:	4603      	mov	r3, r0
 800d858:	e006      	b.n	800d868 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85c:	695b      	ldr	r3, [r3, #20]
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	68f9      	ldr	r1, [r7, #12]
 800d862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d864:	4798      	blx	r3
 800d866:	4603      	mov	r3, r0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3720      	adds	r7, #32
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	08011f80 	.word	0x08011f80
 800d874:	08011fb4 	.word	0x08011fb4
 800d878:	08011fc0 	.word	0x08011fc0
 800d87c:	08011fe8 	.word	0x08011fe8
 800d880:	20008392 	.word	0x20008392
 800d884:	080123c0 	.word	0x080123c0

0800d888 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d888:	b480      	push	{r7}
 800d88a:	b085      	sub	sp, #20
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d89c:	d002      	beq.n	800d8a4 <ip4_addr_isbroadcast_u32+0x1c>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d101      	bne.n	800d8a8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	e02a      	b.n	800d8fe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8ae:	f003 0302 	and.w	r3, r3, #2
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d101      	bne.n	800d8ba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	e021      	b.n	800d8fe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	3304      	adds	r3, #4
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d101      	bne.n	800d8ca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	e019      	b.n	800d8fe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d8ca:	68fa      	ldr	r2, [r7, #12]
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	3304      	adds	r3, #4
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	405a      	eors	r2, r3
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	3308      	adds	r3, #8
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4013      	ands	r3, r2
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d10d      	bne.n	800d8fc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	3308      	adds	r3, #8
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	43da      	mvns	r2, r3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	3308      	adds	r3, #8
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d101      	bne.n	800d8fc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e000      	b.n	800d8fe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d8fc:	2300      	movs	r3, #0
  }
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3714      	adds	r7, #20
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr
	...

0800d90c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800d914:	2210      	movs	r2, #16
 800d916:	4904      	ldr	r1, [pc, #16]	; (800d928 <ip4addr_ntoa+0x1c>)
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f000 f807 	bl	800d92c <ip4addr_ntoa_r>
 800d91e:	4603      	mov	r3, r0
}
 800d920:	4618      	mov	r0, r3
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	20008394 	.word	0x20008394

0800d92c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b08d      	sub	sp, #52	; 0x34
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800d938:	2300      	movs	r3, #0
 800d93a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800d946:	f107 0318 	add.w	r3, r7, #24
 800d94a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800d94c:	2300      	movs	r3, #0
 800d94e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d952:	e058      	b.n	800da06 <ip4addr_ntoa_r+0xda>
    i = 0;
 800d954:	2300      	movs	r3, #0
 800d956:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800d95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95c:	781a      	ldrb	r2, [r3, #0]
 800d95e:	4b32      	ldr	r3, [pc, #200]	; (800da28 <ip4addr_ntoa_r+0xfc>)
 800d960:	fba3 1302 	umull	r1, r3, r3, r2
 800d964:	08d9      	lsrs	r1, r3, #3
 800d966:	460b      	mov	r3, r1
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	440b      	add	r3, r1
 800d96c:	005b      	lsls	r3, r3, #1
 800d96e:	1ad3      	subs	r3, r2, r3
 800d970:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800d972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	4a2c      	ldr	r2, [pc, #176]	; (800da28 <ip4addr_ntoa_r+0xfc>)
 800d978:	fba2 2303 	umull	r2, r3, r2, r3
 800d97c:	08db      	lsrs	r3, r3, #3
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d982:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800d984:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d988:	1c5a      	adds	r2, r3, #1
 800d98a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800d98e:	4619      	mov	r1, r3
 800d990:	7ffb      	ldrb	r3, [r7, #31]
 800d992:	3330      	adds	r3, #48	; 0x30
 800d994:	b2da      	uxtb	r2, r3
 800d996:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800d99a:	443b      	add	r3, r7
 800d99c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800d9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d1d8      	bne.n	800d95a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800d9a8:	e011      	b.n	800d9ce <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800d9aa:	6a3b      	ldr	r3, [r7, #32]
 800d9ac:	1c5a      	adds	r2, r3, #1
 800d9ae:	623a      	str	r2, [r7, #32]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	dc01      	bgt.n	800d9ba <ip4addr_ntoa_r+0x8e>
        return NULL;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	e030      	b.n	800da1c <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800d9ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c0:	1c59      	adds	r1, r3, #1
 800d9c2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d9c4:	3230      	adds	r2, #48	; 0x30
 800d9c6:	443a      	add	r2, r7
 800d9c8:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800d9cc:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800d9ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9d2:	1e5a      	subs	r2, r3, #1
 800d9d4:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d1e6      	bne.n	800d9aa <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800d9dc:	6a3b      	ldr	r3, [r7, #32]
 800d9de:	1c5a      	adds	r2, r3, #1
 800d9e0:	623a      	str	r2, [r7, #32]
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	dc01      	bgt.n	800d9ec <ip4addr_ntoa_r+0xc0>
      return NULL;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	e017      	b.n	800da1c <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800d9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ee:	1c5a      	adds	r2, r3, #1
 800d9f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d9f2:	222e      	movs	r2, #46	; 0x2e
 800d9f4:	701a      	strb	r2, [r3, #0]
    ap++;
 800d9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800d9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da00:	3301      	adds	r3, #1
 800da02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da0a:	2b03      	cmp	r3, #3
 800da0c:	d9a2      	bls.n	800d954 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800da0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da10:	3b01      	subs	r3, #1
 800da12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da16:	2200      	movs	r2, #0
 800da18:	701a      	strb	r2, [r3, #0]
  return buf;
 800da1a:	68bb      	ldr	r3, [r7, #8]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3734      	adds	r7, #52	; 0x34
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr
 800da28:	cccccccd 	.word	0xcccccccd

0800da2c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800da32:	2300      	movs	r3, #0
 800da34:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800da36:	4b12      	ldr	r3, [pc, #72]	; (800da80 <ip_reass_tmr+0x54>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800da3c:	e018      	b.n	800da70 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	7fdb      	ldrb	r3, [r3, #31]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00b      	beq.n	800da5e <ip_reass_tmr+0x32>
      r->timer--;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	7fdb      	ldrb	r3, [r3, #31]
 800da4a:	3b01      	subs	r3, #1
 800da4c:	b2da      	uxtb	r2, r3
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	60fb      	str	r3, [r7, #12]
 800da5c:	e008      	b.n	800da70 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800da68:	68b9      	ldr	r1, [r7, #8]
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f80a 	bl	800da84 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d1e3      	bne.n	800da3e <ip_reass_tmr+0x12>
    }
  }
}
 800da76:	bf00      	nop
 800da78:	bf00      	nop
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	200083a4 	.word	0x200083a4

0800da84 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b088      	sub	sp, #32
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800da8e:	2300      	movs	r3, #0
 800da90:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	429a      	cmp	r2, r3
 800da98:	d105      	bne.n	800daa6 <ip_reass_free_complete_datagram+0x22>
 800da9a:	4b45      	ldr	r3, [pc, #276]	; (800dbb0 <ip_reass_free_complete_datagram+0x12c>)
 800da9c:	22ab      	movs	r2, #171	; 0xab
 800da9e:	4945      	ldr	r1, [pc, #276]	; (800dbb4 <ip_reass_free_complete_datagram+0x130>)
 800daa0:	4845      	ldr	r0, [pc, #276]	; (800dbb8 <ip_reass_free_complete_datagram+0x134>)
 800daa2:	f000 ffc5 	bl	800ea30 <iprintf>
  if (prev != NULL) {
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d00a      	beq.n	800dac2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	687a      	ldr	r2, [r7, #4]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d005      	beq.n	800dac2 <ip_reass_free_complete_datagram+0x3e>
 800dab6:	4b3e      	ldr	r3, [pc, #248]	; (800dbb0 <ip_reass_free_complete_datagram+0x12c>)
 800dab8:	22ad      	movs	r2, #173	; 0xad
 800daba:	4940      	ldr	r1, [pc, #256]	; (800dbbc <ip_reass_free_complete_datagram+0x138>)
 800dabc:	483e      	ldr	r0, [pc, #248]	; (800dbb8 <ip_reass_free_complete_datagram+0x134>)
 800dabe:	f000 ffb7 	bl	800ea30 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	889b      	ldrh	r3, [r3, #4]
 800dace:	b29b      	uxth	r3, r3
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d12a      	bne.n	800db2a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	681a      	ldr	r2, [r3, #0]
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	6858      	ldr	r0, [r3, #4]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	3308      	adds	r3, #8
 800daea:	2214      	movs	r2, #20
 800daec:	4619      	mov	r1, r3
 800daee:	f001 f88b 	bl	800ec08 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800daf2:	2101      	movs	r1, #1
 800daf4:	69b8      	ldr	r0, [r7, #24]
 800daf6:	f7ff fbb7 	bl	800d268 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800dafa:	69b8      	ldr	r0, [r7, #24]
 800dafc:	f7f7 fde6 	bl	80056cc <pbuf_clen>
 800db00:	4603      	mov	r3, r0
 800db02:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800db04:	8bfa      	ldrh	r2, [r7, #30]
 800db06:	8a7b      	ldrh	r3, [r7, #18]
 800db08:	4413      	add	r3, r2
 800db0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db0e:	db05      	blt.n	800db1c <ip_reass_free_complete_datagram+0x98>
 800db10:	4b27      	ldr	r3, [pc, #156]	; (800dbb0 <ip_reass_free_complete_datagram+0x12c>)
 800db12:	22bc      	movs	r2, #188	; 0xbc
 800db14:	492a      	ldr	r1, [pc, #168]	; (800dbc0 <ip_reass_free_complete_datagram+0x13c>)
 800db16:	4828      	ldr	r0, [pc, #160]	; (800dbb8 <ip_reass_free_complete_datagram+0x134>)
 800db18:	f000 ff8a 	bl	800ea30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800db1c:	8bfa      	ldrh	r2, [r7, #30]
 800db1e:	8a7b      	ldrh	r3, [r7, #18]
 800db20:	4413      	add	r3, r2
 800db22:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800db24:	69b8      	ldr	r0, [r7, #24]
 800db26:	f7f7 fd49 	bl	80055bc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800db30:	e01f      	b.n	800db72 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	617b      	str	r3, [r7, #20]
    pcur = p;
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f7f7 fdc2 	bl	80056cc <pbuf_clen>
 800db48:	4603      	mov	r3, r0
 800db4a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800db4c:	8bfa      	ldrh	r2, [r7, #30]
 800db4e:	8a7b      	ldrh	r3, [r7, #18]
 800db50:	4413      	add	r3, r2
 800db52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db56:	db05      	blt.n	800db64 <ip_reass_free_complete_datagram+0xe0>
 800db58:	4b15      	ldr	r3, [pc, #84]	; (800dbb0 <ip_reass_free_complete_datagram+0x12c>)
 800db5a:	22cc      	movs	r2, #204	; 0xcc
 800db5c:	4918      	ldr	r1, [pc, #96]	; (800dbc0 <ip_reass_free_complete_datagram+0x13c>)
 800db5e:	4816      	ldr	r0, [pc, #88]	; (800dbb8 <ip_reass_free_complete_datagram+0x134>)
 800db60:	f000 ff66 	bl	800ea30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800db64:	8bfa      	ldrh	r2, [r7, #30]
 800db66:	8a7b      	ldrh	r3, [r7, #18]
 800db68:	4413      	add	r3, r2
 800db6a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800db6c:	68f8      	ldr	r0, [r7, #12]
 800db6e:	f7f7 fd25 	bl	80055bc <pbuf_free>
  while (p != NULL) {
 800db72:	69bb      	ldr	r3, [r7, #24]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d1dc      	bne.n	800db32 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800db78:	6839      	ldr	r1, [r7, #0]
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 f8c2 	bl	800dd04 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800db80:	4b10      	ldr	r3, [pc, #64]	; (800dbc4 <ip_reass_free_complete_datagram+0x140>)
 800db82:	881b      	ldrh	r3, [r3, #0]
 800db84:	8bfa      	ldrh	r2, [r7, #30]
 800db86:	429a      	cmp	r2, r3
 800db88:	d905      	bls.n	800db96 <ip_reass_free_complete_datagram+0x112>
 800db8a:	4b09      	ldr	r3, [pc, #36]	; (800dbb0 <ip_reass_free_complete_datagram+0x12c>)
 800db8c:	22d2      	movs	r2, #210	; 0xd2
 800db8e:	490e      	ldr	r1, [pc, #56]	; (800dbc8 <ip_reass_free_complete_datagram+0x144>)
 800db90:	4809      	ldr	r0, [pc, #36]	; (800dbb8 <ip_reass_free_complete_datagram+0x134>)
 800db92:	f000 ff4d 	bl	800ea30 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800db96:	4b0b      	ldr	r3, [pc, #44]	; (800dbc4 <ip_reass_free_complete_datagram+0x140>)
 800db98:	881a      	ldrh	r2, [r3, #0]
 800db9a:	8bfb      	ldrh	r3, [r7, #30]
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	b29a      	uxth	r2, r3
 800dba0:	4b08      	ldr	r3, [pc, #32]	; (800dbc4 <ip_reass_free_complete_datagram+0x140>)
 800dba2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dba4:	8bfb      	ldrh	r3, [r7, #30]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3720      	adds	r7, #32
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	08012018 	.word	0x08012018
 800dbb4:	08012054 	.word	0x08012054
 800dbb8:	08012060 	.word	0x08012060
 800dbbc:	08012088 	.word	0x08012088
 800dbc0:	0801209c 	.word	0x0801209c
 800dbc4:	200083a8 	.word	0x200083a8
 800dbc8:	080120bc 	.word	0x080120bc

0800dbcc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b08a      	sub	sp, #40	; 0x28
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800dbea:	4b28      	ldr	r3, [pc, #160]	; (800dc8c <ip_reass_remove_oldest_datagram+0xc0>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dbf0:	e030      	b.n	800dc54 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf4:	695a      	ldr	r2, [r3, #20]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d10c      	bne.n	800dc18 <ip_reass_remove_oldest_datagram+0x4c>
 800dbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc00:	699a      	ldr	r2, [r3, #24]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	691b      	ldr	r3, [r3, #16]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d106      	bne.n	800dc18 <ip_reass_remove_oldest_datagram+0x4c>
 800dc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0c:	899a      	ldrh	r2, [r3, #12]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	889b      	ldrh	r3, [r3, #4]
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d014      	beq.n	800dc42 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800dc1e:	6a3b      	ldr	r3, [r7, #32]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d104      	bne.n	800dc2e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc26:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	61bb      	str	r3, [r7, #24]
 800dc2c:	e009      	b.n	800dc42 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800dc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc30:	7fda      	ldrb	r2, [r3, #31]
 800dc32:	6a3b      	ldr	r3, [r7, #32]
 800dc34:	7fdb      	ldrb	r3, [r3, #31]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d803      	bhi.n	800dc42 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800dc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dc3e:	69fb      	ldr	r3, [r7, #28]
 800dc40:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d001      	beq.n	800dc4e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800dc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800dc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1cb      	bne.n	800dbf2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800dc5a:	6a3b      	ldr	r3, [r7, #32]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d008      	beq.n	800dc72 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800dc60:	69b9      	ldr	r1, [r7, #24]
 800dc62:	6a38      	ldr	r0, [r7, #32]
 800dc64:	f7ff ff0e 	bl	800da84 <ip_reass_free_complete_datagram>
 800dc68:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800dc6a:	697a      	ldr	r2, [r7, #20]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	4413      	add	r3, r2
 800dc70:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800dc72:	697a      	ldr	r2, [r7, #20]
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	da02      	bge.n	800dc80 <ip_reass_remove_oldest_datagram+0xb4>
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	dcac      	bgt.n	800dbda <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800dc80:	697b      	ldr	r3, [r7, #20]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3728      	adds	r7, #40	; 0x28
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	200083a4 	.word	0x200083a4

0800dc90 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dc9a:	2004      	movs	r0, #4
 800dc9c:	f7f6 fda8 	bl	80047f0 <memp_malloc>
 800dca0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d110      	bne.n	800dcca <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800dca8:	6839      	ldr	r1, [r7, #0]
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f7ff ff8e 	bl	800dbcc <ip_reass_remove_oldest_datagram>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	dc03      	bgt.n	800dcc0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dcb8:	2004      	movs	r0, #4
 800dcba:	f7f6 fd99 	bl	80047f0 <memp_malloc>
 800dcbe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d101      	bne.n	800dcca <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	e016      	b.n	800dcf8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800dcca:	2220      	movs	r2, #32
 800dccc:	2100      	movs	r1, #0
 800dcce:	68f8      	ldr	r0, [r7, #12]
 800dcd0:	f000 ff13 	bl	800eafa <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	220f      	movs	r2, #15
 800dcd8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800dcda:	4b09      	ldr	r3, [pc, #36]	; (800dd00 <ip_reass_enqueue_new_datagram+0x70>)
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dce2:	4a07      	ldr	r2, [pc, #28]	; (800dd00 <ip_reass_enqueue_new_datagram+0x70>)
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	3308      	adds	r3, #8
 800dcec:	2214      	movs	r2, #20
 800dcee:	6879      	ldr	r1, [r7, #4]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f000 ff89 	bl	800ec08 <memcpy>
  return ipr;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	200083a4 	.word	0x200083a4

0800dd04 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800dd0e:	4b10      	ldr	r3, [pc, #64]	; (800dd50 <ip_reass_dequeue_datagram+0x4c>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d104      	bne.n	800dd22 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a0c      	ldr	r2, [pc, #48]	; (800dd50 <ip_reass_dequeue_datagram+0x4c>)
 800dd1e:	6013      	str	r3, [r2, #0]
 800dd20:	e00d      	b.n	800dd3e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d106      	bne.n	800dd36 <ip_reass_dequeue_datagram+0x32>
 800dd28:	4b0a      	ldr	r3, [pc, #40]	; (800dd54 <ip_reass_dequeue_datagram+0x50>)
 800dd2a:	f240 1245 	movw	r2, #325	; 0x145
 800dd2e:	490a      	ldr	r1, [pc, #40]	; (800dd58 <ip_reass_dequeue_datagram+0x54>)
 800dd30:	480a      	ldr	r0, [pc, #40]	; (800dd5c <ip_reass_dequeue_datagram+0x58>)
 800dd32:	f000 fe7d 	bl	800ea30 <iprintf>
    prev->next = ipr->next;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800dd3e:	6879      	ldr	r1, [r7, #4]
 800dd40:	2004      	movs	r0, #4
 800dd42:	f7f6 fdc5 	bl	80048d0 <memp_free>
}
 800dd46:	bf00      	nop
 800dd48:	3708      	adds	r7, #8
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	200083a4 	.word	0x200083a4
 800dd54:	08012018 	.word	0x08012018
 800dd58:	080120e0 	.word	0x080120e0
 800dd5c:	08012060 	.word	0x08012060

0800dd60 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b08c      	sub	sp, #48	; 0x30
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800dd70:	2301      	movs	r3, #1
 800dd72:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	885b      	ldrh	r3, [r3, #2]
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7f6 f8bd 	bl	8003f00 <lwip_htons>
 800dd86:	4603      	mov	r3, r0
 800dd88:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	f003 030f 	and.w	r3, r3, #15
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800dd98:	7e7b      	ldrb	r3, [r7, #25]
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	8b7a      	ldrh	r2, [r7, #26]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d202      	bcs.n	800dda8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dda2:	f04f 33ff 	mov.w	r3, #4294967295
 800dda6:	e135      	b.n	800e014 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800dda8:	7e7b      	ldrb	r3, [r7, #25]
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	8b7a      	ldrh	r2, [r7, #26]
 800ddae:	1ad3      	subs	r3, r2, r3
 800ddb0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	88db      	ldrh	r3, [r3, #6]
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7f6 f8a1 	bl	8003f00 <lwip_htons>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	00db      	lsls	r3, r3, #3
 800ddc8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ddd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	701a      	strb	r2, [r3, #0]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	705a      	strb	r2, [r3, #1]
 800ddda:	2200      	movs	r2, #0
 800dddc:	709a      	strb	r2, [r3, #2]
 800ddde:	2200      	movs	r2, #0
 800dde0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800dde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde4:	8afa      	ldrh	r2, [r7, #22]
 800dde6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800dde8:	8afa      	ldrh	r2, [r7, #22]
 800ddea:	8b7b      	ldrh	r3, [r7, #26]
 800ddec:	4413      	add	r3, r2
 800ddee:	b29a      	uxth	r2, r3
 800ddf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ddf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf6:	88db      	ldrh	r3, [r3, #6]
 800ddf8:	b29b      	uxth	r3, r3
 800ddfa:	8afa      	ldrh	r2, [r7, #22]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d902      	bls.n	800de06 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de00:	f04f 33ff 	mov.w	r3, #4294967295
 800de04:	e106      	b.n	800e014 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	627b      	str	r3, [r7, #36]	; 0x24
 800de0c:	e068      	b.n	800dee0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800de0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800de14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de16:	889b      	ldrh	r3, [r3, #4]
 800de18:	b29a      	uxth	r2, r3
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	889b      	ldrh	r3, [r3, #4]
 800de1e:	b29b      	uxth	r3, r3
 800de20:	429a      	cmp	r2, r3
 800de22:	d235      	bcs.n	800de90 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800de24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de28:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800de2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d020      	beq.n	800de72 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800de30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de32:	889b      	ldrh	r3, [r3, #4]
 800de34:	b29a      	uxth	r2, r3
 800de36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de38:	88db      	ldrh	r3, [r3, #6]
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d307      	bcc.n	800de50 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800de40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de42:	88db      	ldrh	r3, [r3, #6]
 800de44:	b29a      	uxth	r2, r3
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	889b      	ldrh	r3, [r3, #4]
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d902      	bls.n	800de56 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de50:	f04f 33ff 	mov.w	r3, #4294967295
 800de54:	e0de      	b.n	800e014 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800de56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de58:	68ba      	ldr	r2, [r7, #8]
 800de5a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800de5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5e:	88db      	ldrh	r3, [r3, #6]
 800de60:	b29a      	uxth	r2, r3
 800de62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de64:	889b      	ldrh	r3, [r3, #4]
 800de66:	b29b      	uxth	r3, r3
 800de68:	429a      	cmp	r2, r3
 800de6a:	d03d      	beq.n	800dee8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800de6c:	2300      	movs	r3, #0
 800de6e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800de70:	e03a      	b.n	800dee8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800de72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de74:	88db      	ldrh	r3, [r3, #6]
 800de76:	b29a      	uxth	r2, r3
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	889b      	ldrh	r3, [r3, #4]
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	429a      	cmp	r2, r3
 800de80:	d902      	bls.n	800de88 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de82:	f04f 33ff 	mov.w	r3, #4294967295
 800de86:	e0c5      	b.n	800e014 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	68ba      	ldr	r2, [r7, #8]
 800de8c:	605a      	str	r2, [r3, #4]
      break;
 800de8e:	e02b      	b.n	800dee8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800de90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de92:	889b      	ldrh	r3, [r3, #4]
 800de94:	b29a      	uxth	r2, r3
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	889b      	ldrh	r3, [r3, #4]
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d102      	bne.n	800dea6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dea0:	f04f 33ff 	mov.w	r3, #4294967295
 800dea4:	e0b6      	b.n	800e014 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800dea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea8:	889b      	ldrh	r3, [r3, #4]
 800deaa:	b29a      	uxth	r2, r3
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	88db      	ldrh	r3, [r3, #6]
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d202      	bcs.n	800debc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800deb6:	f04f 33ff 	mov.w	r3, #4294967295
 800deba:	e0ab      	b.n	800e014 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800debc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d009      	beq.n	800ded6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800dec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec4:	88db      	ldrh	r3, [r3, #6]
 800dec6:	b29a      	uxth	r2, r3
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	889b      	ldrh	r3, [r3, #4]
 800decc:	b29b      	uxth	r3, r3
 800dece:	429a      	cmp	r2, r3
 800ded0:	d001      	beq.n	800ded6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ded2:	2300      	movs	r3, #0
 800ded4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800dee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d193      	bne.n	800de0e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800dee6:	e000      	b.n	800deea <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800dee8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	2b00      	cmp	r3, #0
 800deee:	d12d      	bne.n	800df4c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800def0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def2:	2b00      	cmp	r3, #0
 800def4:	d01c      	beq.n	800df30 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800def6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def8:	88db      	ldrh	r3, [r3, #6]
 800defa:	b29a      	uxth	r2, r3
 800defc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defe:	889b      	ldrh	r3, [r3, #4]
 800df00:	b29b      	uxth	r3, r3
 800df02:	429a      	cmp	r2, r3
 800df04:	d906      	bls.n	800df14 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800df06:	4b45      	ldr	r3, [pc, #276]	; (800e01c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800df08:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800df0c:	4944      	ldr	r1, [pc, #272]	; (800e020 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800df0e:	4845      	ldr	r0, [pc, #276]	; (800e024 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800df10:	f000 fd8e 	bl	800ea30 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800df14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df16:	68ba      	ldr	r2, [r7, #8]
 800df18:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800df1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1c:	88db      	ldrh	r3, [r3, #6]
 800df1e:	b29a      	uxth	r2, r3
 800df20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df22:	889b      	ldrh	r3, [r3, #4]
 800df24:	b29b      	uxth	r3, r3
 800df26:	429a      	cmp	r2, r3
 800df28:	d010      	beq.n	800df4c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800df2a:	2300      	movs	r3, #0
 800df2c:	623b      	str	r3, [r7, #32]
 800df2e:	e00d      	b.n	800df4c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d006      	beq.n	800df46 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800df38:	4b38      	ldr	r3, [pc, #224]	; (800e01c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800df3a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800df3e:	493a      	ldr	r1, [pc, #232]	; (800e028 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800df40:	4838      	ldr	r0, [pc, #224]	; (800e024 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800df42:	f000 fd75 	bl	800ea30 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	68ba      	ldr	r2, [r7, #8]
 800df4a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d105      	bne.n	800df5e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	7f9b      	ldrb	r3, [r3, #30]
 800df56:	f003 0301 	and.w	r3, r3, #1
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d059      	beq.n	800e012 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800df5e:	6a3b      	ldr	r3, [r7, #32]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d04f      	beq.n	800e004 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d006      	beq.n	800df7a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	889b      	ldrh	r3, [r3, #4]
 800df74:	b29b      	uxth	r3, r3
 800df76:	2b00      	cmp	r3, #0
 800df78:	d002      	beq.n	800df80 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800df7a:	2300      	movs	r3, #0
 800df7c:	623b      	str	r3, [r7, #32]
 800df7e:	e041      	b.n	800e004 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800df80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df82:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800df84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800df8a:	e012      	b.n	800dfb2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800df8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800df92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df94:	88db      	ldrh	r3, [r3, #6]
 800df96:	b29a      	uxth	r2, r3
 800df98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9a:	889b      	ldrh	r3, [r3, #4]
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d002      	beq.n	800dfa8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	623b      	str	r3, [r7, #32]
            break;
 800dfa6:	e007      	b.n	800dfb8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800dfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfaa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800dfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1e9      	bne.n	800df8c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800dfb8:	6a3b      	ldr	r3, [r7, #32]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d022      	beq.n	800e004 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d106      	bne.n	800dfd4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800dfc6:	4b15      	ldr	r3, [pc, #84]	; (800e01c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dfc8:	f240 12df 	movw	r2, #479	; 0x1df
 800dfcc:	4917      	ldr	r1, [pc, #92]	; (800e02c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dfce:	4815      	ldr	r0, [pc, #84]	; (800e024 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dfd0:	f000 fd2e 	bl	800ea30 <iprintf>
          LWIP_ASSERT("sanity check",
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d106      	bne.n	800dfee <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800dfe0:	4b0e      	ldr	r3, [pc, #56]	; (800e01c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dfe2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dfe6:	4911      	ldr	r1, [pc, #68]	; (800e02c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dfe8:	480e      	ldr	r0, [pc, #56]	; (800e024 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dfea:	f000 fd21 	bl	800ea30 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800dfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d006      	beq.n	800e004 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800dff6:	4b09      	ldr	r3, [pc, #36]	; (800e01c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dff8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800dffc:	490c      	ldr	r1, [pc, #48]	; (800e030 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800dffe:	4809      	ldr	r0, [pc, #36]	; (800e024 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e000:	f000 fd16 	bl	800ea30 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e004:	6a3b      	ldr	r3, [r7, #32]
 800e006:	2b00      	cmp	r3, #0
 800e008:	bf14      	ite	ne
 800e00a:	2301      	movne	r3, #1
 800e00c:	2300      	moveq	r3, #0
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	e000      	b.n	800e014 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e012:	2300      	movs	r3, #0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3730      	adds	r7, #48	; 0x30
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	08012018 	.word	0x08012018
 800e020:	080120fc 	.word	0x080120fc
 800e024:	08012060 	.word	0x08012060
 800e028:	0801211c 	.word	0x0801211c
 800e02c:	08012154 	.word	0x08012154
 800e030:	08012164 	.word	0x08012164

0800e034 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b08e      	sub	sp, #56	; 0x38
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	f003 030f 	and.w	r3, r3, #15
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	2b14      	cmp	r3, #20
 800e052:	f040 8171 	bne.w	800e338 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e058:	88db      	ldrh	r3, [r3, #6]
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7f5 ff4f 	bl	8003f00 <lwip_htons>
 800e062:	4603      	mov	r3, r0
 800e064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e068:	b29b      	uxth	r3, r3
 800e06a:	00db      	lsls	r3, r3, #3
 800e06c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e070:	885b      	ldrh	r3, [r3, #2]
 800e072:	b29b      	uxth	r3, r3
 800e074:	4618      	mov	r0, r3
 800e076:	f7f5 ff43 	bl	8003f00 <lwip_htons>
 800e07a:	4603      	mov	r3, r0
 800e07c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	f003 030f 	and.w	r3, r3, #15
 800e086:	b2db      	uxtb	r3, r3
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e08e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e092:	b29b      	uxth	r3, r3
 800e094:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e096:	429a      	cmp	r2, r3
 800e098:	f0c0 8150 	bcc.w	800e33c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e09c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e0a4:	1ad3      	subs	r3, r2, r3
 800e0a6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f7f7 fb0f 	bl	80056cc <pbuf_clen>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e0b2:	4b8c      	ldr	r3, [pc, #560]	; (800e2e4 <ip4_reass+0x2b0>)
 800e0b4:	881b      	ldrh	r3, [r3, #0]
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	8c3b      	ldrh	r3, [r7, #32]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	2b0a      	cmp	r3, #10
 800e0be:	dd10      	ble.n	800e0e2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e0c0:	8c3b      	ldrh	r3, [r7, #32]
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0c6:	f7ff fd81 	bl	800dbcc <ip_reass_remove_oldest_datagram>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	f000 8137 	beq.w	800e340 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e0d2:	4b84      	ldr	r3, [pc, #528]	; (800e2e4 <ip4_reass+0x2b0>)
 800e0d4:	881b      	ldrh	r3, [r3, #0]
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	8c3b      	ldrh	r3, [r7, #32]
 800e0da:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e0dc:	2b0a      	cmp	r3, #10
 800e0de:	f300 812f 	bgt.w	800e340 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e0e2:	4b81      	ldr	r3, [pc, #516]	; (800e2e8 <ip4_reass+0x2b4>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	633b      	str	r3, [r7, #48]	; 0x30
 800e0e8:	e015      	b.n	800e116 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ec:	695a      	ldr	r2, [r3, #20]
 800e0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d10c      	bne.n	800e110 <ip4_reass+0xdc>
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f8:	699a      	ldr	r2, [r3, #24]
 800e0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0fc:	691b      	ldr	r3, [r3, #16]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d106      	bne.n	800e110 <ip4_reass+0xdc>
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	899a      	ldrh	r2, [r3, #12]
 800e106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e108:	889b      	ldrh	r3, [r3, #4]
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d006      	beq.n	800e11e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	633b      	str	r3, [r7, #48]	; 0x30
 800e116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d1e6      	bne.n	800e0ea <ip4_reass+0xb6>
 800e11c:	e000      	b.n	800e120 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e11e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e122:	2b00      	cmp	r3, #0
 800e124:	d109      	bne.n	800e13a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e126:	8c3b      	ldrh	r3, [r7, #32]
 800e128:	4619      	mov	r1, r3
 800e12a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e12c:	f7ff fdb0 	bl	800dc90 <ip_reass_enqueue_new_datagram>
 800e130:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e134:	2b00      	cmp	r3, #0
 800e136:	d11c      	bne.n	800e172 <ip4_reass+0x13e>
      goto nullreturn;
 800e138:	e105      	b.n	800e346 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13c:	88db      	ldrh	r3, [r3, #6]
 800e13e:	b29b      	uxth	r3, r3
 800e140:	4618      	mov	r0, r3
 800e142:	f7f5 fedd 	bl	8003f00 <lwip_htons>
 800e146:	4603      	mov	r3, r0
 800e148:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d110      	bne.n	800e172 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e152:	89db      	ldrh	r3, [r3, #14]
 800e154:	4618      	mov	r0, r3
 800e156:	f7f5 fed3 	bl	8003f00 <lwip_htons>
 800e15a:	4603      	mov	r3, r0
 800e15c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e160:	2b00      	cmp	r3, #0
 800e162:	d006      	beq.n	800e172 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e166:	3308      	adds	r3, #8
 800e168:	2214      	movs	r2, #20
 800e16a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e16c:	4618      	mov	r0, r3
 800e16e:	f000 fd4b 	bl	800ec08 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e174:	88db      	ldrh	r3, [r3, #6]
 800e176:	b29b      	uxth	r3, r3
 800e178:	f003 0320 	and.w	r3, r3, #32
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	bf0c      	ite	eq
 800e180:	2301      	moveq	r3, #1
 800e182:	2300      	movne	r3, #0
 800e184:	b2db      	uxtb	r3, r3
 800e186:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00e      	beq.n	800e1ac <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e18e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e190:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e192:	4413      	add	r3, r2
 800e194:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e196:	8b7a      	ldrh	r2, [r7, #26]
 800e198:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e19a:	429a      	cmp	r2, r3
 800e19c:	f0c0 80a0 	bcc.w	800e2e0 <ip4_reass+0x2ac>
 800e1a0:	8b7b      	ldrh	r3, [r7, #26]
 800e1a2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	f200 809a 	bhi.w	800e2e0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e1ac:	69fa      	ldr	r2, [r7, #28]
 800e1ae:	6879      	ldr	r1, [r7, #4]
 800e1b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1b2:	f7ff fdd5 	bl	800dd60 <ip_reass_chain_frag_into_datagram_and_validate>
 800e1b6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1be:	f000 809b 	beq.w	800e2f8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e1c2:	4b48      	ldr	r3, [pc, #288]	; (800e2e4 <ip4_reass+0x2b0>)
 800e1c4:	881a      	ldrh	r2, [r3, #0]
 800e1c6:	8c3b      	ldrh	r3, [r7, #32]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	4b45      	ldr	r3, [pc, #276]	; (800e2e4 <ip4_reass+0x2b0>)
 800e1ce:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00d      	beq.n	800e1f2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e1d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e1d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1da:	4413      	add	r3, r2
 800e1dc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e0:	8a7a      	ldrh	r2, [r7, #18]
 800e1e2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e6:	7f9b      	ldrb	r3, [r3, #30]
 800e1e8:	f043 0301 	orr.w	r3, r3, #1
 800e1ec:	b2da      	uxtb	r2, r3
 800e1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d171      	bne.n	800e2dc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fa:	8b9b      	ldrh	r3, [r3, #28]
 800e1fc:	3314      	adds	r3, #20
 800e1fe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e214:	3308      	adds	r3, #8
 800e216:	2214      	movs	r2, #20
 800e218:	4619      	mov	r1, r3
 800e21a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e21c:	f000 fcf4 	bl	800ec08 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e220:	8a3b      	ldrh	r3, [r7, #16]
 800e222:	4618      	mov	r0, r3
 800e224:	f7f5 fe6c 	bl	8003f00 <lwip_htons>
 800e228:	4603      	mov	r3, r0
 800e22a:	461a      	mov	r2, r3
 800e22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e232:	2200      	movs	r2, #0
 800e234:	719a      	strb	r2, [r3, #6]
 800e236:	2200      	movs	r2, #0
 800e238:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23c:	2200      	movs	r2, #0
 800e23e:	729a      	strb	r2, [r3, #10]
 800e240:	2200      	movs	r2, #0
 800e242:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e24a:	e00d      	b.n	800e268 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e252:	2114      	movs	r1, #20
 800e254:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e256:	f7f7 f92b 	bl	80054b0 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e25a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f7f7 fa6f 	bl	8005740 <pbuf_cat>
      r = iprh->next_pbuf;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d1ee      	bne.n	800e24c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e26e:	4b1e      	ldr	r3, [pc, #120]	; (800e2e8 <ip4_reass+0x2b4>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e274:	429a      	cmp	r2, r3
 800e276:	d102      	bne.n	800e27e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e278:	2300      	movs	r3, #0
 800e27a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e27c:	e010      	b.n	800e2a0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e27e:	4b1a      	ldr	r3, [pc, #104]	; (800e2e8 <ip4_reass+0x2b4>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e284:	e007      	b.n	800e296 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d006      	beq.n	800e29e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d1f4      	bne.n	800e286 <ip4_reass+0x252>
 800e29c:	e000      	b.n	800e2a0 <ip4_reass+0x26c>
          break;
 800e29e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e2a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2a4:	f7ff fd2e 	bl	800dd04 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f7f7 fa0f 	bl	80056cc <pbuf_clen>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e2b2:	4b0c      	ldr	r3, [pc, #48]	; (800e2e4 <ip4_reass+0x2b0>)
 800e2b4:	881b      	ldrh	r3, [r3, #0]
 800e2b6:	8c3a      	ldrh	r2, [r7, #32]
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d906      	bls.n	800e2ca <ip4_reass+0x296>
 800e2bc:	4b0b      	ldr	r3, [pc, #44]	; (800e2ec <ip4_reass+0x2b8>)
 800e2be:	f240 229b 	movw	r2, #667	; 0x29b
 800e2c2:	490b      	ldr	r1, [pc, #44]	; (800e2f0 <ip4_reass+0x2bc>)
 800e2c4:	480b      	ldr	r0, [pc, #44]	; (800e2f4 <ip4_reass+0x2c0>)
 800e2c6:	f000 fbb3 	bl	800ea30 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e2ca:	4b06      	ldr	r3, [pc, #24]	; (800e2e4 <ip4_reass+0x2b0>)
 800e2cc:	881a      	ldrh	r2, [r3, #0]
 800e2ce:	8c3b      	ldrh	r3, [r7, #32]
 800e2d0:	1ad3      	subs	r3, r2, r3
 800e2d2:	b29a      	uxth	r2, r3
 800e2d4:	4b03      	ldr	r3, [pc, #12]	; (800e2e4 <ip4_reass+0x2b0>)
 800e2d6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	e038      	b.n	800e34e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	e036      	b.n	800e34e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e2e0:	bf00      	nop
 800e2e2:	e00a      	b.n	800e2fa <ip4_reass+0x2c6>
 800e2e4:	200083a8 	.word	0x200083a8
 800e2e8:	200083a4 	.word	0x200083a4
 800e2ec:	08012018 	.word	0x08012018
 800e2f0:	08012188 	.word	0x08012188
 800e2f4:	08012060 	.word	0x08012060
    goto nullreturn_ipr;
 800e2f8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d106      	bne.n	800e30e <ip4_reass+0x2da>
 800e300:	4b15      	ldr	r3, [pc, #84]	; (800e358 <ip4_reass+0x324>)
 800e302:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e306:	4915      	ldr	r1, [pc, #84]	; (800e35c <ip4_reass+0x328>)
 800e308:	4815      	ldr	r0, [pc, #84]	; (800e360 <ip4_reass+0x32c>)
 800e30a:	f000 fb91 	bl	800ea30 <iprintf>
  if (ipr->p == NULL) {
 800e30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d116      	bne.n	800e344 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e316:	4b13      	ldr	r3, [pc, #76]	; (800e364 <ip4_reass+0x330>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d006      	beq.n	800e32e <ip4_reass+0x2fa>
 800e320:	4b0d      	ldr	r3, [pc, #52]	; (800e358 <ip4_reass+0x324>)
 800e322:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e326:	4910      	ldr	r1, [pc, #64]	; (800e368 <ip4_reass+0x334>)
 800e328:	480d      	ldr	r0, [pc, #52]	; (800e360 <ip4_reass+0x32c>)
 800e32a:	f000 fb81 	bl	800ea30 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e32e:	2100      	movs	r1, #0
 800e330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e332:	f7ff fce7 	bl	800dd04 <ip_reass_dequeue_datagram>
 800e336:	e006      	b.n	800e346 <ip4_reass+0x312>
    goto nullreturn;
 800e338:	bf00      	nop
 800e33a:	e004      	b.n	800e346 <ip4_reass+0x312>
    goto nullreturn;
 800e33c:	bf00      	nop
 800e33e:	e002      	b.n	800e346 <ip4_reass+0x312>
      goto nullreturn;
 800e340:	bf00      	nop
 800e342:	e000      	b.n	800e346 <ip4_reass+0x312>
  }

nullreturn:
 800e344:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7f7 f938 	bl	80055bc <pbuf_free>
  return NULL;
 800e34c:	2300      	movs	r3, #0
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3738      	adds	r7, #56	; 0x38
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	08012018 	.word	0x08012018
 800e35c:	080121a4 	.word	0x080121a4
 800e360:	08012060 	.word	0x08012060
 800e364:	200083a4 	.word	0x200083a4
 800e368:	080121b0 	.word	0x080121b0

0800e36c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e370:	2005      	movs	r0, #5
 800e372:	f7f6 fa3d 	bl	80047f0 <memp_malloc>
 800e376:	4603      	mov	r3, r0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d106      	bne.n	800e398 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e38a:	4b07      	ldr	r3, [pc, #28]	; (800e3a8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e38c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e390:	4906      	ldr	r1, [pc, #24]	; (800e3ac <ip_frag_free_pbuf_custom_ref+0x30>)
 800e392:	4807      	ldr	r0, [pc, #28]	; (800e3b0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e394:	f000 fb4c 	bl	800ea30 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e398:	6879      	ldr	r1, [r7, #4]
 800e39a:	2005      	movs	r0, #5
 800e39c:	f7f6 fa98 	bl	80048d0 <memp_free>
}
 800e3a0:	bf00      	nop
 800e3a2:	3708      	adds	r7, #8
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	08012018 	.word	0x08012018
 800e3ac:	080121d0 	.word	0x080121d0
 800e3b0:	08012060 	.word	0x08012060

0800e3b4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d106      	bne.n	800e3d4 <ipfrag_free_pbuf_custom+0x20>
 800e3c6:	4b11      	ldr	r3, [pc, #68]	; (800e40c <ipfrag_free_pbuf_custom+0x58>)
 800e3c8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e3cc:	4910      	ldr	r1, [pc, #64]	; (800e410 <ipfrag_free_pbuf_custom+0x5c>)
 800e3ce:	4811      	ldr	r0, [pc, #68]	; (800e414 <ipfrag_free_pbuf_custom+0x60>)
 800e3d0:	f000 fb2e 	bl	800ea30 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d006      	beq.n	800e3ea <ipfrag_free_pbuf_custom+0x36>
 800e3dc:	4b0b      	ldr	r3, [pc, #44]	; (800e40c <ipfrag_free_pbuf_custom+0x58>)
 800e3de:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e3e2:	490d      	ldr	r1, [pc, #52]	; (800e418 <ipfrag_free_pbuf_custom+0x64>)
 800e3e4:	480b      	ldr	r0, [pc, #44]	; (800e414 <ipfrag_free_pbuf_custom+0x60>)
 800e3e6:	f000 fb23 	bl	800ea30 <iprintf>
  if (pcr->original != NULL) {
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	695b      	ldr	r3, [r3, #20]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d004      	beq.n	800e3fc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	695b      	ldr	r3, [r3, #20]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7f7 f8e0 	bl	80055bc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e3fc:	68f8      	ldr	r0, [r7, #12]
 800e3fe:	f7ff ffbd 	bl	800e37c <ip_frag_free_pbuf_custom_ref>
}
 800e402:	bf00      	nop
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	08012018 	.word	0x08012018
 800e410:	080121dc 	.word	0x080121dc
 800e414:	08012060 	.word	0x08012060
 800e418:	080121e8 	.word	0x080121e8

0800e41c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b094      	sub	sp, #80	; 0x50
 800e420:	af02      	add	r7, sp, #8
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	60b9      	str	r1, [r7, #8]
 800e426:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e428:	2300      	movs	r3, #0
 800e42a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e432:	3b14      	subs	r3, #20
 800e434:	2b00      	cmp	r3, #0
 800e436:	da00      	bge.n	800e43a <ip4_frag+0x1e>
 800e438:	3307      	adds	r3, #7
 800e43a:	10db      	asrs	r3, r3, #3
 800e43c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e43e:	2314      	movs	r3, #20
 800e440:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e44a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	f003 030f 	and.w	r3, r3, #15
 800e454:	b2db      	uxtb	r3, r3
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	2b14      	cmp	r3, #20
 800e45c:	d002      	beq.n	800e464 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e45e:	f06f 0305 	mvn.w	r3, #5
 800e462:	e110      	b.n	800e686 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	895b      	ldrh	r3, [r3, #10]
 800e468:	2b13      	cmp	r3, #19
 800e46a:	d809      	bhi.n	800e480 <ip4_frag+0x64>
 800e46c:	4b88      	ldr	r3, [pc, #544]	; (800e690 <ip4_frag+0x274>)
 800e46e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e472:	4988      	ldr	r1, [pc, #544]	; (800e694 <ip4_frag+0x278>)
 800e474:	4888      	ldr	r0, [pc, #544]	; (800e698 <ip4_frag+0x27c>)
 800e476:	f000 fadb 	bl	800ea30 <iprintf>
 800e47a:	f06f 0305 	mvn.w	r3, #5
 800e47e:	e102      	b.n	800e686 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e482:	88db      	ldrh	r3, [r3, #6]
 800e484:	b29b      	uxth	r3, r3
 800e486:	4618      	mov	r0, r3
 800e488:	f7f5 fd3a 	bl	8003f00 <lwip_htons>
 800e48c:	4603      	mov	r3, r0
 800e48e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e490:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e492:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e496:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e49a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e49c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	891b      	ldrh	r3, [r3, #8]
 800e4a6:	3b14      	subs	r3, #20
 800e4a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e4ac:	e0e1      	b.n	800e672 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e4ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e4b0:	00db      	lsls	r3, r3, #3
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	bf28      	it	cs
 800e4bc:	4613      	movcs	r3, r2
 800e4be:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e4c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e4c4:	2114      	movs	r1, #20
 800e4c6:	200e      	movs	r0, #14
 800e4c8:	f7f6 fd94 	bl	8004ff4 <pbuf_alloc>
 800e4cc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	f000 80d5 	beq.w	800e680 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	895b      	ldrh	r3, [r3, #10]
 800e4da:	2b13      	cmp	r3, #19
 800e4dc:	d806      	bhi.n	800e4ec <ip4_frag+0xd0>
 800e4de:	4b6c      	ldr	r3, [pc, #432]	; (800e690 <ip4_frag+0x274>)
 800e4e0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e4e4:	496d      	ldr	r1, [pc, #436]	; (800e69c <ip4_frag+0x280>)
 800e4e6:	486c      	ldr	r0, [pc, #432]	; (800e698 <ip4_frag+0x27c>)
 800e4e8:	f000 faa2 	bl	800ea30 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	2214      	movs	r2, #20
 800e4f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f000 fb87 	bl	800ec08 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e500:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e502:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e506:	e064      	b.n	800e5d2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	895a      	ldrh	r2, [r3, #10]
 800e50c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e50e:	1ad3      	subs	r3, r2, r3
 800e510:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	895b      	ldrh	r3, [r3, #10]
 800e516:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e518:	429a      	cmp	r2, r3
 800e51a:	d906      	bls.n	800e52a <ip4_frag+0x10e>
 800e51c:	4b5c      	ldr	r3, [pc, #368]	; (800e690 <ip4_frag+0x274>)
 800e51e:	f240 322d 	movw	r2, #813	; 0x32d
 800e522:	495f      	ldr	r1, [pc, #380]	; (800e6a0 <ip4_frag+0x284>)
 800e524:	485c      	ldr	r0, [pc, #368]	; (800e698 <ip4_frag+0x27c>)
 800e526:	f000 fa83 	bl	800ea30 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e52a:	8bfa      	ldrh	r2, [r7, #30]
 800e52c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e530:	4293      	cmp	r3, r2
 800e532:	bf28      	it	cs
 800e534:	4613      	movcs	r3, r2
 800e536:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e53a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d105      	bne.n	800e54e <ip4_frag+0x132>
        poff = 0;
 800e542:	2300      	movs	r3, #0
 800e544:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	60fb      	str	r3, [r7, #12]
        continue;
 800e54c:	e041      	b.n	800e5d2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e54e:	f7ff ff0d 	bl	800e36c <ip_frag_alloc_pbuf_custom_ref>
 800e552:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d103      	bne.n	800e562 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e55a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e55c:	f7f7 f82e 	bl	80055bc <pbuf_free>
        goto memerr;
 800e560:	e08f      	b.n	800e682 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e562:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e568:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e56a:	4413      	add	r3, r2
 800e56c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e570:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e574:	9201      	str	r2, [sp, #4]
 800e576:	9300      	str	r3, [sp, #0]
 800e578:	4603      	mov	r3, r0
 800e57a:	2241      	movs	r2, #65	; 0x41
 800e57c:	2000      	movs	r0, #0
 800e57e:	f7f6 fe63 	bl	8005248 <pbuf_alloced_custom>
 800e582:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d106      	bne.n	800e598 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e58a:	69b8      	ldr	r0, [r7, #24]
 800e58c:	f7ff fef6 	bl	800e37c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e592:	f7f7 f813 	bl	80055bc <pbuf_free>
        goto memerr;
 800e596:	e074      	b.n	800e682 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e598:	68f8      	ldr	r0, [r7, #12]
 800e59a:	f7f7 f8af 	bl	80056fc <pbuf_ref>
      pcr->original = p;
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	68fa      	ldr	r2, [r7, #12]
 800e5a2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e5a4:	69bb      	ldr	r3, [r7, #24]
 800e5a6:	4a3f      	ldr	r2, [pc, #252]	; (800e6a4 <ip4_frag+0x288>)
 800e5a8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e5aa:	6979      	ldr	r1, [r7, #20]
 800e5ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5ae:	f7f7 f8c7 	bl	8005740 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e5b2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e5b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e5ba:	1ad3      	subs	r3, r2, r3
 800e5bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e5c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d004      	beq.n	800e5d2 <ip4_frag+0x1b6>
        poff = 0;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e5d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d196      	bne.n	800e508 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e5da:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e5dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e5e0:	4413      	add	r3, r2
 800e5e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e5e8:	f1a3 0213 	sub.w	r2, r3, #19
 800e5ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	bfcc      	ite	gt
 800e5f4:	2301      	movgt	r3, #1
 800e5f6:	2300      	movle	r3, #0
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e5fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e604:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e606:	6a3b      	ldr	r3, [r7, #32]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d002      	beq.n	800e612 <ip4_frag+0x1f6>
 800e60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d003      	beq.n	800e61a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e612:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e614:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e618:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e61a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7f5 fc6f 	bl	8003f00 <lwip_htons>
 800e622:	4603      	mov	r3, r0
 800e624:	461a      	mov	r2, r3
 800e626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e628:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e62a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e62c:	3314      	adds	r3, #20
 800e62e:	b29b      	uxth	r3, r3
 800e630:	4618      	mov	r0, r3
 800e632:	f7f5 fc65 	bl	8003f00 <lwip_htons>
 800e636:	4603      	mov	r3, r0
 800e638:	461a      	mov	r2, r3
 800e63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e640:	2200      	movs	r2, #0
 800e642:	729a      	strb	r2, [r3, #10]
 800e644:	2200      	movs	r2, #0
 800e646:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	695b      	ldr	r3, [r3, #20]
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e650:	68b8      	ldr	r0, [r7, #8]
 800e652:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e656:	f7f6 ffb1 	bl	80055bc <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e65a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e65e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e660:	1ad3      	subs	r3, r2, r3
 800e662:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e666:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e66a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e66c:	4413      	add	r3, r2
 800e66e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e672:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e676:	2b00      	cmp	r3, #0
 800e678:	f47f af19 	bne.w	800e4ae <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e67c:	2300      	movs	r3, #0
 800e67e:	e002      	b.n	800e686 <ip4_frag+0x26a>
      goto memerr;
 800e680:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e682:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e686:	4618      	mov	r0, r3
 800e688:	3748      	adds	r7, #72	; 0x48
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
 800e68e:	bf00      	nop
 800e690:	08012018 	.word	0x08012018
 800e694:	080121f4 	.word	0x080121f4
 800e698:	08012060 	.word	0x08012060
 800e69c:	08012210 	.word	0x08012210
 800e6a0:	08012230 	.word	0x08012230
 800e6a4:	0800e3b5 	.word	0x0800e3b5

0800e6a8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e6b2:	230e      	movs	r3, #14
 800e6b4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	895b      	ldrh	r3, [r3, #10]
 800e6ba:	2b0e      	cmp	r3, #14
 800e6bc:	d96e      	bls.n	800e79c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	7bdb      	ldrb	r3, [r3, #15]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d106      	bne.n	800e6d4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	b2da      	uxtb	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	7b1a      	ldrb	r2, [r3, #12]
 800e6de:	7b5b      	ldrb	r3, [r3, #13]
 800e6e0:	021b      	lsls	r3, r3, #8
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	f003 0301 	and.w	r3, r3, #1
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d023      	beq.n	800e73a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	2b01      	cmp	r3, #1
 800e6f8:	d10f      	bne.n	800e71a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	785b      	ldrb	r3, [r3, #1]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d11b      	bne.n	800e73a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e706:	2b5e      	cmp	r3, #94	; 0x5e
 800e708:	d117      	bne.n	800e73a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	7b5b      	ldrb	r3, [r3, #13]
 800e70e:	f043 0310 	orr.w	r3, r3, #16
 800e712:	b2da      	uxtb	r2, r3
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	735a      	strb	r2, [r3, #13]
 800e718:	e00f      	b.n	800e73a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	2206      	movs	r2, #6
 800e71e:	4928      	ldr	r1, [pc, #160]	; (800e7c0 <ethernet_input+0x118>)
 800e720:	4618      	mov	r0, r3
 800e722:	f000 f9da 	bl	800eada <memcmp>
 800e726:	4603      	mov	r3, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d106      	bne.n	800e73a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	7b5b      	ldrb	r3, [r3, #13]
 800e730:	f043 0308 	orr.w	r3, r3, #8
 800e734:	b2da      	uxtb	r2, r3
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e73a:	89fb      	ldrh	r3, [r7, #14]
 800e73c:	2b08      	cmp	r3, #8
 800e73e:	d003      	beq.n	800e748 <ethernet_input+0xa0>
 800e740:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e744:	d014      	beq.n	800e770 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e746:	e032      	b.n	800e7ae <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e74e:	f003 0308 	and.w	r3, r3, #8
 800e752:	2b00      	cmp	r3, #0
 800e754:	d024      	beq.n	800e7a0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e756:	8afb      	ldrh	r3, [r7, #22]
 800e758:	4619      	mov	r1, r3
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f7f6 fea8 	bl	80054b0 <pbuf_remove_header>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d11e      	bne.n	800e7a4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e766:	6839      	ldr	r1, [r7, #0]
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f7fe fe91 	bl	800d490 <ip4_input>
      break;
 800e76e:	e013      	b.n	800e798 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e776:	f003 0308 	and.w	r3, r3, #8
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d014      	beq.n	800e7a8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e77e:	8afb      	ldrh	r3, [r7, #22]
 800e780:	4619      	mov	r1, r3
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f7f6 fe94 	bl	80054b0 <pbuf_remove_header>
 800e788:	4603      	mov	r3, r0
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d10e      	bne.n	800e7ac <ethernet_input+0x104>
        etharp_input(p, netif);
 800e78e:	6839      	ldr	r1, [r7, #0]
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f7fe f831 	bl	800c7f8 <etharp_input>
      break;
 800e796:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e798:	2300      	movs	r3, #0
 800e79a:	e00c      	b.n	800e7b6 <ethernet_input+0x10e>
    goto free_and_return;
 800e79c:	bf00      	nop
 800e79e:	e006      	b.n	800e7ae <ethernet_input+0x106>
        goto free_and_return;
 800e7a0:	bf00      	nop
 800e7a2:	e004      	b.n	800e7ae <ethernet_input+0x106>
        goto free_and_return;
 800e7a4:	bf00      	nop
 800e7a6:	e002      	b.n	800e7ae <ethernet_input+0x106>
        goto free_and_return;
 800e7a8:	bf00      	nop
 800e7aa:	e000      	b.n	800e7ae <ethernet_input+0x106>
        goto free_and_return;
 800e7ac:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7f6 ff04 	bl	80055bc <pbuf_free>
  return ERR_OK;
 800e7b4:	2300      	movs	r3, #0
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3718      	adds	r7, #24
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	080123c4 	.word	0x080123c4

0800e7c4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b086      	sub	sp, #24
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
 800e7d0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e7d2:	8c3b      	ldrh	r3, [r7, #32]
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7f5 fb93 	bl	8003f00 <lwip_htons>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e7de:	210e      	movs	r1, #14
 800e7e0:	68b8      	ldr	r0, [r7, #8]
 800e7e2:	f7f6 fe55 	bl	8005490 <pbuf_add_header>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d125      	bne.n	800e838 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	8afa      	ldrh	r2, [r7, #22]
 800e7f6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	2206      	movs	r2, #6
 800e7fc:	6839      	ldr	r1, [r7, #0]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f000 fa02 	bl	800ec08 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	3306      	adds	r3, #6
 800e808:	2206      	movs	r2, #6
 800e80a:	6879      	ldr	r1, [r7, #4]
 800e80c:	4618      	mov	r0, r3
 800e80e:	f000 f9fb 	bl	800ec08 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e818:	2b06      	cmp	r3, #6
 800e81a:	d006      	beq.n	800e82a <ethernet_output+0x66>
 800e81c:	4b0a      	ldr	r3, [pc, #40]	; (800e848 <ethernet_output+0x84>)
 800e81e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e822:	490a      	ldr	r1, [pc, #40]	; (800e84c <ethernet_output+0x88>)
 800e824:	480a      	ldr	r0, [pc, #40]	; (800e850 <ethernet_output+0x8c>)
 800e826:	f000 f903 	bl	800ea30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	699b      	ldr	r3, [r3, #24]
 800e82e:	68b9      	ldr	r1, [r7, #8]
 800e830:	68f8      	ldr	r0, [r7, #12]
 800e832:	4798      	blx	r3
 800e834:	4603      	mov	r3, r0
 800e836:	e002      	b.n	800e83e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e838:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e83a:	f06f 0301 	mvn.w	r3, #1
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3718      	adds	r7, #24
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
 800e846:	bf00      	nop
 800e848:	08012240 	.word	0x08012240
 800e84c:	08012278 	.word	0x08012278
 800e850:	080122ac 	.word	0x080122ac

0800e854 <rand>:
 800e854:	4b16      	ldr	r3, [pc, #88]	; (800e8b0 <rand+0x5c>)
 800e856:	b510      	push	{r4, lr}
 800e858:	681c      	ldr	r4, [r3, #0]
 800e85a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e85c:	b9b3      	cbnz	r3, 800e88c <rand+0x38>
 800e85e:	2018      	movs	r0, #24
 800e860:	f000 fa4a 	bl	800ecf8 <malloc>
 800e864:	4602      	mov	r2, r0
 800e866:	6320      	str	r0, [r4, #48]	; 0x30
 800e868:	b920      	cbnz	r0, 800e874 <rand+0x20>
 800e86a:	4b12      	ldr	r3, [pc, #72]	; (800e8b4 <rand+0x60>)
 800e86c:	4812      	ldr	r0, [pc, #72]	; (800e8b8 <rand+0x64>)
 800e86e:	2152      	movs	r1, #82	; 0x52
 800e870:	f000 f9d8 	bl	800ec24 <__assert_func>
 800e874:	4911      	ldr	r1, [pc, #68]	; (800e8bc <rand+0x68>)
 800e876:	4b12      	ldr	r3, [pc, #72]	; (800e8c0 <rand+0x6c>)
 800e878:	e9c0 1300 	strd	r1, r3, [r0]
 800e87c:	4b11      	ldr	r3, [pc, #68]	; (800e8c4 <rand+0x70>)
 800e87e:	6083      	str	r3, [r0, #8]
 800e880:	230b      	movs	r3, #11
 800e882:	8183      	strh	r3, [r0, #12]
 800e884:	2100      	movs	r1, #0
 800e886:	2001      	movs	r0, #1
 800e888:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e88c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e88e:	480e      	ldr	r0, [pc, #56]	; (800e8c8 <rand+0x74>)
 800e890:	690b      	ldr	r3, [r1, #16]
 800e892:	694c      	ldr	r4, [r1, #20]
 800e894:	4a0d      	ldr	r2, [pc, #52]	; (800e8cc <rand+0x78>)
 800e896:	4358      	muls	r0, r3
 800e898:	fb02 0004 	mla	r0, r2, r4, r0
 800e89c:	fba3 3202 	umull	r3, r2, r3, r2
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	eb40 0002 	adc.w	r0, r0, r2
 800e8a6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e8aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e8ae:	bd10      	pop	{r4, pc}
 800e8b0:	20000084 	.word	0x20000084
 800e8b4:	080123d2 	.word	0x080123d2
 800e8b8:	080123e9 	.word	0x080123e9
 800e8bc:	abcd330e 	.word	0xabcd330e
 800e8c0:	e66d1234 	.word	0xe66d1234
 800e8c4:	0005deec 	.word	0x0005deec
 800e8c8:	5851f42d 	.word	0x5851f42d
 800e8cc:	4c957f2d 	.word	0x4c957f2d

0800e8d0 <std>:
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	b510      	push	{r4, lr}
 800e8d4:	4604      	mov	r4, r0
 800e8d6:	e9c0 3300 	strd	r3, r3, [r0]
 800e8da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8de:	6083      	str	r3, [r0, #8]
 800e8e0:	8181      	strh	r1, [r0, #12]
 800e8e2:	6643      	str	r3, [r0, #100]	; 0x64
 800e8e4:	81c2      	strh	r2, [r0, #14]
 800e8e6:	6183      	str	r3, [r0, #24]
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	2208      	movs	r2, #8
 800e8ec:	305c      	adds	r0, #92	; 0x5c
 800e8ee:	f000 f904 	bl	800eafa <memset>
 800e8f2:	4b05      	ldr	r3, [pc, #20]	; (800e908 <std+0x38>)
 800e8f4:	6263      	str	r3, [r4, #36]	; 0x24
 800e8f6:	4b05      	ldr	r3, [pc, #20]	; (800e90c <std+0x3c>)
 800e8f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e8fa:	4b05      	ldr	r3, [pc, #20]	; (800e910 <std+0x40>)
 800e8fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e8fe:	4b05      	ldr	r3, [pc, #20]	; (800e914 <std+0x44>)
 800e900:	6224      	str	r4, [r4, #32]
 800e902:	6323      	str	r3, [r4, #48]	; 0x30
 800e904:	bd10      	pop	{r4, pc}
 800e906:	bf00      	nop
 800e908:	0800ea55 	.word	0x0800ea55
 800e90c:	0800ea77 	.word	0x0800ea77
 800e910:	0800eaaf 	.word	0x0800eaaf
 800e914:	0800ead3 	.word	0x0800ead3

0800e918 <stdio_exit_handler>:
 800e918:	4a02      	ldr	r2, [pc, #8]	; (800e924 <stdio_exit_handler+0xc>)
 800e91a:	4903      	ldr	r1, [pc, #12]	; (800e928 <stdio_exit_handler+0x10>)
 800e91c:	4803      	ldr	r0, [pc, #12]	; (800e92c <stdio_exit_handler+0x14>)
 800e91e:	f000 b869 	b.w	800e9f4 <_fwalk_sglue>
 800e922:	bf00      	nop
 800e924:	2000002c 	.word	0x2000002c
 800e928:	0800f515 	.word	0x0800f515
 800e92c:	20000038 	.word	0x20000038

0800e930 <cleanup_stdio>:
 800e930:	6841      	ldr	r1, [r0, #4]
 800e932:	4b0c      	ldr	r3, [pc, #48]	; (800e964 <cleanup_stdio+0x34>)
 800e934:	4299      	cmp	r1, r3
 800e936:	b510      	push	{r4, lr}
 800e938:	4604      	mov	r4, r0
 800e93a:	d001      	beq.n	800e940 <cleanup_stdio+0x10>
 800e93c:	f000 fdea 	bl	800f514 <_fflush_r>
 800e940:	68a1      	ldr	r1, [r4, #8]
 800e942:	4b09      	ldr	r3, [pc, #36]	; (800e968 <cleanup_stdio+0x38>)
 800e944:	4299      	cmp	r1, r3
 800e946:	d002      	beq.n	800e94e <cleanup_stdio+0x1e>
 800e948:	4620      	mov	r0, r4
 800e94a:	f000 fde3 	bl	800f514 <_fflush_r>
 800e94e:	68e1      	ldr	r1, [r4, #12]
 800e950:	4b06      	ldr	r3, [pc, #24]	; (800e96c <cleanup_stdio+0x3c>)
 800e952:	4299      	cmp	r1, r3
 800e954:	d004      	beq.n	800e960 <cleanup_stdio+0x30>
 800e956:	4620      	mov	r0, r4
 800e958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e95c:	f000 bdda 	b.w	800f514 <_fflush_r>
 800e960:	bd10      	pop	{r4, pc}
 800e962:	bf00      	nop
 800e964:	200083ac 	.word	0x200083ac
 800e968:	20008414 	.word	0x20008414
 800e96c:	2000847c 	.word	0x2000847c

0800e970 <global_stdio_init.part.0>:
 800e970:	b510      	push	{r4, lr}
 800e972:	4b0b      	ldr	r3, [pc, #44]	; (800e9a0 <global_stdio_init.part.0+0x30>)
 800e974:	4c0b      	ldr	r4, [pc, #44]	; (800e9a4 <global_stdio_init.part.0+0x34>)
 800e976:	4a0c      	ldr	r2, [pc, #48]	; (800e9a8 <global_stdio_init.part.0+0x38>)
 800e978:	601a      	str	r2, [r3, #0]
 800e97a:	4620      	mov	r0, r4
 800e97c:	2200      	movs	r2, #0
 800e97e:	2104      	movs	r1, #4
 800e980:	f7ff ffa6 	bl	800e8d0 <std>
 800e984:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e988:	2201      	movs	r2, #1
 800e98a:	2109      	movs	r1, #9
 800e98c:	f7ff ffa0 	bl	800e8d0 <std>
 800e990:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e994:	2202      	movs	r2, #2
 800e996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e99a:	2112      	movs	r1, #18
 800e99c:	f7ff bf98 	b.w	800e8d0 <std>
 800e9a0:	200084e4 	.word	0x200084e4
 800e9a4:	200083ac 	.word	0x200083ac
 800e9a8:	0800e919 	.word	0x0800e919

0800e9ac <__sfp_lock_acquire>:
 800e9ac:	4801      	ldr	r0, [pc, #4]	; (800e9b4 <__sfp_lock_acquire+0x8>)
 800e9ae:	f000 b929 	b.w	800ec04 <__retarget_lock_acquire_recursive>
 800e9b2:	bf00      	nop
 800e9b4:	200084ed 	.word	0x200084ed

0800e9b8 <__sfp_lock_release>:
 800e9b8:	4801      	ldr	r0, [pc, #4]	; (800e9c0 <__sfp_lock_release+0x8>)
 800e9ba:	f000 b924 	b.w	800ec06 <__retarget_lock_release_recursive>
 800e9be:	bf00      	nop
 800e9c0:	200084ed 	.word	0x200084ed

0800e9c4 <__sinit>:
 800e9c4:	b510      	push	{r4, lr}
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	f7ff fff0 	bl	800e9ac <__sfp_lock_acquire>
 800e9cc:	6a23      	ldr	r3, [r4, #32]
 800e9ce:	b11b      	cbz	r3, 800e9d8 <__sinit+0x14>
 800e9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9d4:	f7ff bff0 	b.w	800e9b8 <__sfp_lock_release>
 800e9d8:	4b04      	ldr	r3, [pc, #16]	; (800e9ec <__sinit+0x28>)
 800e9da:	6223      	str	r3, [r4, #32]
 800e9dc:	4b04      	ldr	r3, [pc, #16]	; (800e9f0 <__sinit+0x2c>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d1f5      	bne.n	800e9d0 <__sinit+0xc>
 800e9e4:	f7ff ffc4 	bl	800e970 <global_stdio_init.part.0>
 800e9e8:	e7f2      	b.n	800e9d0 <__sinit+0xc>
 800e9ea:	bf00      	nop
 800e9ec:	0800e931 	.word	0x0800e931
 800e9f0:	200084e4 	.word	0x200084e4

0800e9f4 <_fwalk_sglue>:
 800e9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9f8:	4607      	mov	r7, r0
 800e9fa:	4688      	mov	r8, r1
 800e9fc:	4614      	mov	r4, r2
 800e9fe:	2600      	movs	r6, #0
 800ea00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea04:	f1b9 0901 	subs.w	r9, r9, #1
 800ea08:	d505      	bpl.n	800ea16 <_fwalk_sglue+0x22>
 800ea0a:	6824      	ldr	r4, [r4, #0]
 800ea0c:	2c00      	cmp	r4, #0
 800ea0e:	d1f7      	bne.n	800ea00 <_fwalk_sglue+0xc>
 800ea10:	4630      	mov	r0, r6
 800ea12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea16:	89ab      	ldrh	r3, [r5, #12]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d907      	bls.n	800ea2c <_fwalk_sglue+0x38>
 800ea1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea20:	3301      	adds	r3, #1
 800ea22:	d003      	beq.n	800ea2c <_fwalk_sglue+0x38>
 800ea24:	4629      	mov	r1, r5
 800ea26:	4638      	mov	r0, r7
 800ea28:	47c0      	blx	r8
 800ea2a:	4306      	orrs	r6, r0
 800ea2c:	3568      	adds	r5, #104	; 0x68
 800ea2e:	e7e9      	b.n	800ea04 <_fwalk_sglue+0x10>

0800ea30 <iprintf>:
 800ea30:	b40f      	push	{r0, r1, r2, r3}
 800ea32:	b507      	push	{r0, r1, r2, lr}
 800ea34:	4906      	ldr	r1, [pc, #24]	; (800ea50 <iprintf+0x20>)
 800ea36:	ab04      	add	r3, sp, #16
 800ea38:	6808      	ldr	r0, [r1, #0]
 800ea3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea3e:	6881      	ldr	r1, [r0, #8]
 800ea40:	9301      	str	r3, [sp, #4]
 800ea42:	f000 fa37 	bl	800eeb4 <_vfiprintf_r>
 800ea46:	b003      	add	sp, #12
 800ea48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea4c:	b004      	add	sp, #16
 800ea4e:	4770      	bx	lr
 800ea50:	20000084 	.word	0x20000084

0800ea54 <__sread>:
 800ea54:	b510      	push	{r4, lr}
 800ea56:	460c      	mov	r4, r1
 800ea58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea5c:	f000 f88a 	bl	800eb74 <_read_r>
 800ea60:	2800      	cmp	r0, #0
 800ea62:	bfab      	itete	ge
 800ea64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ea66:	89a3      	ldrhlt	r3, [r4, #12]
 800ea68:	181b      	addge	r3, r3, r0
 800ea6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ea6e:	bfac      	ite	ge
 800ea70:	6563      	strge	r3, [r4, #84]	; 0x54
 800ea72:	81a3      	strhlt	r3, [r4, #12]
 800ea74:	bd10      	pop	{r4, pc}

0800ea76 <__swrite>:
 800ea76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea7a:	461f      	mov	r7, r3
 800ea7c:	898b      	ldrh	r3, [r1, #12]
 800ea7e:	05db      	lsls	r3, r3, #23
 800ea80:	4605      	mov	r5, r0
 800ea82:	460c      	mov	r4, r1
 800ea84:	4616      	mov	r6, r2
 800ea86:	d505      	bpl.n	800ea94 <__swrite+0x1e>
 800ea88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea8c:	2302      	movs	r3, #2
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f000 f85e 	bl	800eb50 <_lseek_r>
 800ea94:	89a3      	ldrh	r3, [r4, #12]
 800ea96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea9e:	81a3      	strh	r3, [r4, #12]
 800eaa0:	4632      	mov	r2, r6
 800eaa2:	463b      	mov	r3, r7
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eaaa:	f000 b875 	b.w	800eb98 <_write_r>

0800eaae <__sseek>:
 800eaae:	b510      	push	{r4, lr}
 800eab0:	460c      	mov	r4, r1
 800eab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eab6:	f000 f84b 	bl	800eb50 <_lseek_r>
 800eaba:	1c43      	adds	r3, r0, #1
 800eabc:	89a3      	ldrh	r3, [r4, #12]
 800eabe:	bf15      	itete	ne
 800eac0:	6560      	strne	r0, [r4, #84]	; 0x54
 800eac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eaca:	81a3      	strheq	r3, [r4, #12]
 800eacc:	bf18      	it	ne
 800eace:	81a3      	strhne	r3, [r4, #12]
 800ead0:	bd10      	pop	{r4, pc}

0800ead2 <__sclose>:
 800ead2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ead6:	f000 b82b 	b.w	800eb30 <_close_r>

0800eada <memcmp>:
 800eada:	b510      	push	{r4, lr}
 800eadc:	3901      	subs	r1, #1
 800eade:	4402      	add	r2, r0
 800eae0:	4290      	cmp	r0, r2
 800eae2:	d101      	bne.n	800eae8 <memcmp+0xe>
 800eae4:	2000      	movs	r0, #0
 800eae6:	e005      	b.n	800eaf4 <memcmp+0x1a>
 800eae8:	7803      	ldrb	r3, [r0, #0]
 800eaea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eaee:	42a3      	cmp	r3, r4
 800eaf0:	d001      	beq.n	800eaf6 <memcmp+0x1c>
 800eaf2:	1b18      	subs	r0, r3, r4
 800eaf4:	bd10      	pop	{r4, pc}
 800eaf6:	3001      	adds	r0, #1
 800eaf8:	e7f2      	b.n	800eae0 <memcmp+0x6>

0800eafa <memset>:
 800eafa:	4402      	add	r2, r0
 800eafc:	4603      	mov	r3, r0
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d100      	bne.n	800eb04 <memset+0xa>
 800eb02:	4770      	bx	lr
 800eb04:	f803 1b01 	strb.w	r1, [r3], #1
 800eb08:	e7f9      	b.n	800eafe <memset+0x4>

0800eb0a <strncpy>:
 800eb0a:	b510      	push	{r4, lr}
 800eb0c:	3901      	subs	r1, #1
 800eb0e:	4603      	mov	r3, r0
 800eb10:	b132      	cbz	r2, 800eb20 <strncpy+0x16>
 800eb12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eb16:	f803 4b01 	strb.w	r4, [r3], #1
 800eb1a:	3a01      	subs	r2, #1
 800eb1c:	2c00      	cmp	r4, #0
 800eb1e:	d1f7      	bne.n	800eb10 <strncpy+0x6>
 800eb20:	441a      	add	r2, r3
 800eb22:	2100      	movs	r1, #0
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d100      	bne.n	800eb2a <strncpy+0x20>
 800eb28:	bd10      	pop	{r4, pc}
 800eb2a:	f803 1b01 	strb.w	r1, [r3], #1
 800eb2e:	e7f9      	b.n	800eb24 <strncpy+0x1a>

0800eb30 <_close_r>:
 800eb30:	b538      	push	{r3, r4, r5, lr}
 800eb32:	4d06      	ldr	r5, [pc, #24]	; (800eb4c <_close_r+0x1c>)
 800eb34:	2300      	movs	r3, #0
 800eb36:	4604      	mov	r4, r0
 800eb38:	4608      	mov	r0, r1
 800eb3a:	602b      	str	r3, [r5, #0]
 800eb3c:	f7f1 ff5f 	bl	80009fe <_close>
 800eb40:	1c43      	adds	r3, r0, #1
 800eb42:	d102      	bne.n	800eb4a <_close_r+0x1a>
 800eb44:	682b      	ldr	r3, [r5, #0]
 800eb46:	b103      	cbz	r3, 800eb4a <_close_r+0x1a>
 800eb48:	6023      	str	r3, [r4, #0]
 800eb4a:	bd38      	pop	{r3, r4, r5, pc}
 800eb4c:	200084e8 	.word	0x200084e8

0800eb50 <_lseek_r>:
 800eb50:	b538      	push	{r3, r4, r5, lr}
 800eb52:	4d07      	ldr	r5, [pc, #28]	; (800eb70 <_lseek_r+0x20>)
 800eb54:	4604      	mov	r4, r0
 800eb56:	4608      	mov	r0, r1
 800eb58:	4611      	mov	r1, r2
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	602a      	str	r2, [r5, #0]
 800eb5e:	461a      	mov	r2, r3
 800eb60:	f7f1 ff74 	bl	8000a4c <_lseek>
 800eb64:	1c43      	adds	r3, r0, #1
 800eb66:	d102      	bne.n	800eb6e <_lseek_r+0x1e>
 800eb68:	682b      	ldr	r3, [r5, #0]
 800eb6a:	b103      	cbz	r3, 800eb6e <_lseek_r+0x1e>
 800eb6c:	6023      	str	r3, [r4, #0]
 800eb6e:	bd38      	pop	{r3, r4, r5, pc}
 800eb70:	200084e8 	.word	0x200084e8

0800eb74 <_read_r>:
 800eb74:	b538      	push	{r3, r4, r5, lr}
 800eb76:	4d07      	ldr	r5, [pc, #28]	; (800eb94 <_read_r+0x20>)
 800eb78:	4604      	mov	r4, r0
 800eb7a:	4608      	mov	r0, r1
 800eb7c:	4611      	mov	r1, r2
 800eb7e:	2200      	movs	r2, #0
 800eb80:	602a      	str	r2, [r5, #0]
 800eb82:	461a      	mov	r2, r3
 800eb84:	f7f1 ff02 	bl	800098c <_read>
 800eb88:	1c43      	adds	r3, r0, #1
 800eb8a:	d102      	bne.n	800eb92 <_read_r+0x1e>
 800eb8c:	682b      	ldr	r3, [r5, #0]
 800eb8e:	b103      	cbz	r3, 800eb92 <_read_r+0x1e>
 800eb90:	6023      	str	r3, [r4, #0]
 800eb92:	bd38      	pop	{r3, r4, r5, pc}
 800eb94:	200084e8 	.word	0x200084e8

0800eb98 <_write_r>:
 800eb98:	b538      	push	{r3, r4, r5, lr}
 800eb9a:	4d07      	ldr	r5, [pc, #28]	; (800ebb8 <_write_r+0x20>)
 800eb9c:	4604      	mov	r4, r0
 800eb9e:	4608      	mov	r0, r1
 800eba0:	4611      	mov	r1, r2
 800eba2:	2200      	movs	r2, #0
 800eba4:	602a      	str	r2, [r5, #0]
 800eba6:	461a      	mov	r2, r3
 800eba8:	f7f1 ff0d 	bl	80009c6 <_write>
 800ebac:	1c43      	adds	r3, r0, #1
 800ebae:	d102      	bne.n	800ebb6 <_write_r+0x1e>
 800ebb0:	682b      	ldr	r3, [r5, #0]
 800ebb2:	b103      	cbz	r3, 800ebb6 <_write_r+0x1e>
 800ebb4:	6023      	str	r3, [r4, #0]
 800ebb6:	bd38      	pop	{r3, r4, r5, pc}
 800ebb8:	200084e8 	.word	0x200084e8

0800ebbc <__libc_init_array>:
 800ebbc:	b570      	push	{r4, r5, r6, lr}
 800ebbe:	4d0d      	ldr	r5, [pc, #52]	; (800ebf4 <__libc_init_array+0x38>)
 800ebc0:	4c0d      	ldr	r4, [pc, #52]	; (800ebf8 <__libc_init_array+0x3c>)
 800ebc2:	1b64      	subs	r4, r4, r5
 800ebc4:	10a4      	asrs	r4, r4, #2
 800ebc6:	2600      	movs	r6, #0
 800ebc8:	42a6      	cmp	r6, r4
 800ebca:	d109      	bne.n	800ebe0 <__libc_init_array+0x24>
 800ebcc:	4d0b      	ldr	r5, [pc, #44]	; (800ebfc <__libc_init_array+0x40>)
 800ebce:	4c0c      	ldr	r4, [pc, #48]	; (800ec00 <__libc_init_array+0x44>)
 800ebd0:	f000 fe50 	bl	800f874 <_init>
 800ebd4:	1b64      	subs	r4, r4, r5
 800ebd6:	10a4      	asrs	r4, r4, #2
 800ebd8:	2600      	movs	r6, #0
 800ebda:	42a6      	cmp	r6, r4
 800ebdc:	d105      	bne.n	800ebea <__libc_init_array+0x2e>
 800ebde:	bd70      	pop	{r4, r5, r6, pc}
 800ebe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebe4:	4798      	blx	r3
 800ebe6:	3601      	adds	r6, #1
 800ebe8:	e7ee      	b.n	800ebc8 <__libc_init_array+0xc>
 800ebea:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebee:	4798      	blx	r3
 800ebf0:	3601      	adds	r6, #1
 800ebf2:	e7f2      	b.n	800ebda <__libc_init_array+0x1e>
 800ebf4:	080124b8 	.word	0x080124b8
 800ebf8:	080124b8 	.word	0x080124b8
 800ebfc:	080124b8 	.word	0x080124b8
 800ec00:	080124bc 	.word	0x080124bc

0800ec04 <__retarget_lock_acquire_recursive>:
 800ec04:	4770      	bx	lr

0800ec06 <__retarget_lock_release_recursive>:
 800ec06:	4770      	bx	lr

0800ec08 <memcpy>:
 800ec08:	440a      	add	r2, r1
 800ec0a:	4291      	cmp	r1, r2
 800ec0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec10:	d100      	bne.n	800ec14 <memcpy+0xc>
 800ec12:	4770      	bx	lr
 800ec14:	b510      	push	{r4, lr}
 800ec16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec1e:	4291      	cmp	r1, r2
 800ec20:	d1f9      	bne.n	800ec16 <memcpy+0xe>
 800ec22:	bd10      	pop	{r4, pc}

0800ec24 <__assert_func>:
 800ec24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec26:	4614      	mov	r4, r2
 800ec28:	461a      	mov	r2, r3
 800ec2a:	4b09      	ldr	r3, [pc, #36]	; (800ec50 <__assert_func+0x2c>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4605      	mov	r5, r0
 800ec30:	68d8      	ldr	r0, [r3, #12]
 800ec32:	b14c      	cbz	r4, 800ec48 <__assert_func+0x24>
 800ec34:	4b07      	ldr	r3, [pc, #28]	; (800ec54 <__assert_func+0x30>)
 800ec36:	9100      	str	r1, [sp, #0]
 800ec38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec3c:	4906      	ldr	r1, [pc, #24]	; (800ec58 <__assert_func+0x34>)
 800ec3e:	462b      	mov	r3, r5
 800ec40:	f000 fc90 	bl	800f564 <fiprintf>
 800ec44:	f000 fd46 	bl	800f6d4 <abort>
 800ec48:	4b04      	ldr	r3, [pc, #16]	; (800ec5c <__assert_func+0x38>)
 800ec4a:	461c      	mov	r4, r3
 800ec4c:	e7f3      	b.n	800ec36 <__assert_func+0x12>
 800ec4e:	bf00      	nop
 800ec50:	20000084 	.word	0x20000084
 800ec54:	08012441 	.word	0x08012441
 800ec58:	0801244e 	.word	0x0801244e
 800ec5c:	0801247c 	.word	0x0801247c

0800ec60 <_free_r>:
 800ec60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec62:	2900      	cmp	r1, #0
 800ec64:	d044      	beq.n	800ecf0 <_free_r+0x90>
 800ec66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec6a:	9001      	str	r0, [sp, #4]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	f1a1 0404 	sub.w	r4, r1, #4
 800ec72:	bfb8      	it	lt
 800ec74:	18e4      	addlt	r4, r4, r3
 800ec76:	f000 f8e7 	bl	800ee48 <__malloc_lock>
 800ec7a:	4a1e      	ldr	r2, [pc, #120]	; (800ecf4 <_free_r+0x94>)
 800ec7c:	9801      	ldr	r0, [sp, #4]
 800ec7e:	6813      	ldr	r3, [r2, #0]
 800ec80:	b933      	cbnz	r3, 800ec90 <_free_r+0x30>
 800ec82:	6063      	str	r3, [r4, #4]
 800ec84:	6014      	str	r4, [r2, #0]
 800ec86:	b003      	add	sp, #12
 800ec88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec8c:	f000 b8e2 	b.w	800ee54 <__malloc_unlock>
 800ec90:	42a3      	cmp	r3, r4
 800ec92:	d908      	bls.n	800eca6 <_free_r+0x46>
 800ec94:	6825      	ldr	r5, [r4, #0]
 800ec96:	1961      	adds	r1, r4, r5
 800ec98:	428b      	cmp	r3, r1
 800ec9a:	bf01      	itttt	eq
 800ec9c:	6819      	ldreq	r1, [r3, #0]
 800ec9e:	685b      	ldreq	r3, [r3, #4]
 800eca0:	1949      	addeq	r1, r1, r5
 800eca2:	6021      	streq	r1, [r4, #0]
 800eca4:	e7ed      	b.n	800ec82 <_free_r+0x22>
 800eca6:	461a      	mov	r2, r3
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	b10b      	cbz	r3, 800ecb0 <_free_r+0x50>
 800ecac:	42a3      	cmp	r3, r4
 800ecae:	d9fa      	bls.n	800eca6 <_free_r+0x46>
 800ecb0:	6811      	ldr	r1, [r2, #0]
 800ecb2:	1855      	adds	r5, r2, r1
 800ecb4:	42a5      	cmp	r5, r4
 800ecb6:	d10b      	bne.n	800ecd0 <_free_r+0x70>
 800ecb8:	6824      	ldr	r4, [r4, #0]
 800ecba:	4421      	add	r1, r4
 800ecbc:	1854      	adds	r4, r2, r1
 800ecbe:	42a3      	cmp	r3, r4
 800ecc0:	6011      	str	r1, [r2, #0]
 800ecc2:	d1e0      	bne.n	800ec86 <_free_r+0x26>
 800ecc4:	681c      	ldr	r4, [r3, #0]
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	6053      	str	r3, [r2, #4]
 800ecca:	440c      	add	r4, r1
 800eccc:	6014      	str	r4, [r2, #0]
 800ecce:	e7da      	b.n	800ec86 <_free_r+0x26>
 800ecd0:	d902      	bls.n	800ecd8 <_free_r+0x78>
 800ecd2:	230c      	movs	r3, #12
 800ecd4:	6003      	str	r3, [r0, #0]
 800ecd6:	e7d6      	b.n	800ec86 <_free_r+0x26>
 800ecd8:	6825      	ldr	r5, [r4, #0]
 800ecda:	1961      	adds	r1, r4, r5
 800ecdc:	428b      	cmp	r3, r1
 800ecde:	bf04      	itt	eq
 800ece0:	6819      	ldreq	r1, [r3, #0]
 800ece2:	685b      	ldreq	r3, [r3, #4]
 800ece4:	6063      	str	r3, [r4, #4]
 800ece6:	bf04      	itt	eq
 800ece8:	1949      	addeq	r1, r1, r5
 800ecea:	6021      	streq	r1, [r4, #0]
 800ecec:	6054      	str	r4, [r2, #4]
 800ecee:	e7ca      	b.n	800ec86 <_free_r+0x26>
 800ecf0:	b003      	add	sp, #12
 800ecf2:	bd30      	pop	{r4, r5, pc}
 800ecf4:	200084f0 	.word	0x200084f0

0800ecf8 <malloc>:
 800ecf8:	4b02      	ldr	r3, [pc, #8]	; (800ed04 <malloc+0xc>)
 800ecfa:	4601      	mov	r1, r0
 800ecfc:	6818      	ldr	r0, [r3, #0]
 800ecfe:	f000 b823 	b.w	800ed48 <_malloc_r>
 800ed02:	bf00      	nop
 800ed04:	20000084 	.word	0x20000084

0800ed08 <sbrk_aligned>:
 800ed08:	b570      	push	{r4, r5, r6, lr}
 800ed0a:	4e0e      	ldr	r6, [pc, #56]	; (800ed44 <sbrk_aligned+0x3c>)
 800ed0c:	460c      	mov	r4, r1
 800ed0e:	6831      	ldr	r1, [r6, #0]
 800ed10:	4605      	mov	r5, r0
 800ed12:	b911      	cbnz	r1, 800ed1a <sbrk_aligned+0x12>
 800ed14:	f000 fcce 	bl	800f6b4 <_sbrk_r>
 800ed18:	6030      	str	r0, [r6, #0]
 800ed1a:	4621      	mov	r1, r4
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	f000 fcc9 	bl	800f6b4 <_sbrk_r>
 800ed22:	1c43      	adds	r3, r0, #1
 800ed24:	d00a      	beq.n	800ed3c <sbrk_aligned+0x34>
 800ed26:	1cc4      	adds	r4, r0, #3
 800ed28:	f024 0403 	bic.w	r4, r4, #3
 800ed2c:	42a0      	cmp	r0, r4
 800ed2e:	d007      	beq.n	800ed40 <sbrk_aligned+0x38>
 800ed30:	1a21      	subs	r1, r4, r0
 800ed32:	4628      	mov	r0, r5
 800ed34:	f000 fcbe 	bl	800f6b4 <_sbrk_r>
 800ed38:	3001      	adds	r0, #1
 800ed3a:	d101      	bne.n	800ed40 <sbrk_aligned+0x38>
 800ed3c:	f04f 34ff 	mov.w	r4, #4294967295
 800ed40:	4620      	mov	r0, r4
 800ed42:	bd70      	pop	{r4, r5, r6, pc}
 800ed44:	200084f4 	.word	0x200084f4

0800ed48 <_malloc_r>:
 800ed48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed4c:	1ccd      	adds	r5, r1, #3
 800ed4e:	f025 0503 	bic.w	r5, r5, #3
 800ed52:	3508      	adds	r5, #8
 800ed54:	2d0c      	cmp	r5, #12
 800ed56:	bf38      	it	cc
 800ed58:	250c      	movcc	r5, #12
 800ed5a:	2d00      	cmp	r5, #0
 800ed5c:	4607      	mov	r7, r0
 800ed5e:	db01      	blt.n	800ed64 <_malloc_r+0x1c>
 800ed60:	42a9      	cmp	r1, r5
 800ed62:	d905      	bls.n	800ed70 <_malloc_r+0x28>
 800ed64:	230c      	movs	r3, #12
 800ed66:	603b      	str	r3, [r7, #0]
 800ed68:	2600      	movs	r6, #0
 800ed6a:	4630      	mov	r0, r6
 800ed6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ee44 <_malloc_r+0xfc>
 800ed74:	f000 f868 	bl	800ee48 <__malloc_lock>
 800ed78:	f8d8 3000 	ldr.w	r3, [r8]
 800ed7c:	461c      	mov	r4, r3
 800ed7e:	bb5c      	cbnz	r4, 800edd8 <_malloc_r+0x90>
 800ed80:	4629      	mov	r1, r5
 800ed82:	4638      	mov	r0, r7
 800ed84:	f7ff ffc0 	bl	800ed08 <sbrk_aligned>
 800ed88:	1c43      	adds	r3, r0, #1
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	d155      	bne.n	800ee3a <_malloc_r+0xf2>
 800ed8e:	f8d8 4000 	ldr.w	r4, [r8]
 800ed92:	4626      	mov	r6, r4
 800ed94:	2e00      	cmp	r6, #0
 800ed96:	d145      	bne.n	800ee24 <_malloc_r+0xdc>
 800ed98:	2c00      	cmp	r4, #0
 800ed9a:	d048      	beq.n	800ee2e <_malloc_r+0xe6>
 800ed9c:	6823      	ldr	r3, [r4, #0]
 800ed9e:	4631      	mov	r1, r6
 800eda0:	4638      	mov	r0, r7
 800eda2:	eb04 0903 	add.w	r9, r4, r3
 800eda6:	f000 fc85 	bl	800f6b4 <_sbrk_r>
 800edaa:	4581      	cmp	r9, r0
 800edac:	d13f      	bne.n	800ee2e <_malloc_r+0xe6>
 800edae:	6821      	ldr	r1, [r4, #0]
 800edb0:	1a6d      	subs	r5, r5, r1
 800edb2:	4629      	mov	r1, r5
 800edb4:	4638      	mov	r0, r7
 800edb6:	f7ff ffa7 	bl	800ed08 <sbrk_aligned>
 800edba:	3001      	adds	r0, #1
 800edbc:	d037      	beq.n	800ee2e <_malloc_r+0xe6>
 800edbe:	6823      	ldr	r3, [r4, #0]
 800edc0:	442b      	add	r3, r5
 800edc2:	6023      	str	r3, [r4, #0]
 800edc4:	f8d8 3000 	ldr.w	r3, [r8]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d038      	beq.n	800ee3e <_malloc_r+0xf6>
 800edcc:	685a      	ldr	r2, [r3, #4]
 800edce:	42a2      	cmp	r2, r4
 800edd0:	d12b      	bne.n	800ee2a <_malloc_r+0xe2>
 800edd2:	2200      	movs	r2, #0
 800edd4:	605a      	str	r2, [r3, #4]
 800edd6:	e00f      	b.n	800edf8 <_malloc_r+0xb0>
 800edd8:	6822      	ldr	r2, [r4, #0]
 800edda:	1b52      	subs	r2, r2, r5
 800eddc:	d41f      	bmi.n	800ee1e <_malloc_r+0xd6>
 800edde:	2a0b      	cmp	r2, #11
 800ede0:	d917      	bls.n	800ee12 <_malloc_r+0xca>
 800ede2:	1961      	adds	r1, r4, r5
 800ede4:	42a3      	cmp	r3, r4
 800ede6:	6025      	str	r5, [r4, #0]
 800ede8:	bf18      	it	ne
 800edea:	6059      	strne	r1, [r3, #4]
 800edec:	6863      	ldr	r3, [r4, #4]
 800edee:	bf08      	it	eq
 800edf0:	f8c8 1000 	streq.w	r1, [r8]
 800edf4:	5162      	str	r2, [r4, r5]
 800edf6:	604b      	str	r3, [r1, #4]
 800edf8:	4638      	mov	r0, r7
 800edfa:	f104 060b 	add.w	r6, r4, #11
 800edfe:	f000 f829 	bl	800ee54 <__malloc_unlock>
 800ee02:	f026 0607 	bic.w	r6, r6, #7
 800ee06:	1d23      	adds	r3, r4, #4
 800ee08:	1af2      	subs	r2, r6, r3
 800ee0a:	d0ae      	beq.n	800ed6a <_malloc_r+0x22>
 800ee0c:	1b9b      	subs	r3, r3, r6
 800ee0e:	50a3      	str	r3, [r4, r2]
 800ee10:	e7ab      	b.n	800ed6a <_malloc_r+0x22>
 800ee12:	42a3      	cmp	r3, r4
 800ee14:	6862      	ldr	r2, [r4, #4]
 800ee16:	d1dd      	bne.n	800edd4 <_malloc_r+0x8c>
 800ee18:	f8c8 2000 	str.w	r2, [r8]
 800ee1c:	e7ec      	b.n	800edf8 <_malloc_r+0xb0>
 800ee1e:	4623      	mov	r3, r4
 800ee20:	6864      	ldr	r4, [r4, #4]
 800ee22:	e7ac      	b.n	800ed7e <_malloc_r+0x36>
 800ee24:	4634      	mov	r4, r6
 800ee26:	6876      	ldr	r6, [r6, #4]
 800ee28:	e7b4      	b.n	800ed94 <_malloc_r+0x4c>
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	e7cc      	b.n	800edc8 <_malloc_r+0x80>
 800ee2e:	230c      	movs	r3, #12
 800ee30:	603b      	str	r3, [r7, #0]
 800ee32:	4638      	mov	r0, r7
 800ee34:	f000 f80e 	bl	800ee54 <__malloc_unlock>
 800ee38:	e797      	b.n	800ed6a <_malloc_r+0x22>
 800ee3a:	6025      	str	r5, [r4, #0]
 800ee3c:	e7dc      	b.n	800edf8 <_malloc_r+0xb0>
 800ee3e:	605b      	str	r3, [r3, #4]
 800ee40:	deff      	udf	#255	; 0xff
 800ee42:	bf00      	nop
 800ee44:	200084f0 	.word	0x200084f0

0800ee48 <__malloc_lock>:
 800ee48:	4801      	ldr	r0, [pc, #4]	; (800ee50 <__malloc_lock+0x8>)
 800ee4a:	f7ff bedb 	b.w	800ec04 <__retarget_lock_acquire_recursive>
 800ee4e:	bf00      	nop
 800ee50:	200084ec 	.word	0x200084ec

0800ee54 <__malloc_unlock>:
 800ee54:	4801      	ldr	r0, [pc, #4]	; (800ee5c <__malloc_unlock+0x8>)
 800ee56:	f7ff bed6 	b.w	800ec06 <__retarget_lock_release_recursive>
 800ee5a:	bf00      	nop
 800ee5c:	200084ec 	.word	0x200084ec

0800ee60 <__sfputc_r>:
 800ee60:	6893      	ldr	r3, [r2, #8]
 800ee62:	3b01      	subs	r3, #1
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	b410      	push	{r4}
 800ee68:	6093      	str	r3, [r2, #8]
 800ee6a:	da08      	bge.n	800ee7e <__sfputc_r+0x1e>
 800ee6c:	6994      	ldr	r4, [r2, #24]
 800ee6e:	42a3      	cmp	r3, r4
 800ee70:	db01      	blt.n	800ee76 <__sfputc_r+0x16>
 800ee72:	290a      	cmp	r1, #10
 800ee74:	d103      	bne.n	800ee7e <__sfputc_r+0x1e>
 800ee76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee7a:	f000 bb85 	b.w	800f588 <__swbuf_r>
 800ee7e:	6813      	ldr	r3, [r2, #0]
 800ee80:	1c58      	adds	r0, r3, #1
 800ee82:	6010      	str	r0, [r2, #0]
 800ee84:	7019      	strb	r1, [r3, #0]
 800ee86:	4608      	mov	r0, r1
 800ee88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee8c:	4770      	bx	lr

0800ee8e <__sfputs_r>:
 800ee8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee90:	4606      	mov	r6, r0
 800ee92:	460f      	mov	r7, r1
 800ee94:	4614      	mov	r4, r2
 800ee96:	18d5      	adds	r5, r2, r3
 800ee98:	42ac      	cmp	r4, r5
 800ee9a:	d101      	bne.n	800eea0 <__sfputs_r+0x12>
 800ee9c:	2000      	movs	r0, #0
 800ee9e:	e007      	b.n	800eeb0 <__sfputs_r+0x22>
 800eea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eea4:	463a      	mov	r2, r7
 800eea6:	4630      	mov	r0, r6
 800eea8:	f7ff ffda 	bl	800ee60 <__sfputc_r>
 800eeac:	1c43      	adds	r3, r0, #1
 800eeae:	d1f3      	bne.n	800ee98 <__sfputs_r+0xa>
 800eeb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eeb4 <_vfiprintf_r>:
 800eeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb8:	460d      	mov	r5, r1
 800eeba:	b09d      	sub	sp, #116	; 0x74
 800eebc:	4614      	mov	r4, r2
 800eebe:	4698      	mov	r8, r3
 800eec0:	4606      	mov	r6, r0
 800eec2:	b118      	cbz	r0, 800eecc <_vfiprintf_r+0x18>
 800eec4:	6a03      	ldr	r3, [r0, #32]
 800eec6:	b90b      	cbnz	r3, 800eecc <_vfiprintf_r+0x18>
 800eec8:	f7ff fd7c 	bl	800e9c4 <__sinit>
 800eecc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eece:	07d9      	lsls	r1, r3, #31
 800eed0:	d405      	bmi.n	800eede <_vfiprintf_r+0x2a>
 800eed2:	89ab      	ldrh	r3, [r5, #12]
 800eed4:	059a      	lsls	r2, r3, #22
 800eed6:	d402      	bmi.n	800eede <_vfiprintf_r+0x2a>
 800eed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eeda:	f7ff fe93 	bl	800ec04 <__retarget_lock_acquire_recursive>
 800eede:	89ab      	ldrh	r3, [r5, #12]
 800eee0:	071b      	lsls	r3, r3, #28
 800eee2:	d501      	bpl.n	800eee8 <_vfiprintf_r+0x34>
 800eee4:	692b      	ldr	r3, [r5, #16]
 800eee6:	b99b      	cbnz	r3, 800ef10 <_vfiprintf_r+0x5c>
 800eee8:	4629      	mov	r1, r5
 800eeea:	4630      	mov	r0, r6
 800eeec:	f000 fb8a 	bl	800f604 <__swsetup_r>
 800eef0:	b170      	cbz	r0, 800ef10 <_vfiprintf_r+0x5c>
 800eef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eef4:	07dc      	lsls	r4, r3, #31
 800eef6:	d504      	bpl.n	800ef02 <_vfiprintf_r+0x4e>
 800eef8:	f04f 30ff 	mov.w	r0, #4294967295
 800eefc:	b01d      	add	sp, #116	; 0x74
 800eefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef02:	89ab      	ldrh	r3, [r5, #12]
 800ef04:	0598      	lsls	r0, r3, #22
 800ef06:	d4f7      	bmi.n	800eef8 <_vfiprintf_r+0x44>
 800ef08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef0a:	f7ff fe7c 	bl	800ec06 <__retarget_lock_release_recursive>
 800ef0e:	e7f3      	b.n	800eef8 <_vfiprintf_r+0x44>
 800ef10:	2300      	movs	r3, #0
 800ef12:	9309      	str	r3, [sp, #36]	; 0x24
 800ef14:	2320      	movs	r3, #32
 800ef16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef1e:	2330      	movs	r3, #48	; 0x30
 800ef20:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f0d4 <_vfiprintf_r+0x220>
 800ef24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef28:	f04f 0901 	mov.w	r9, #1
 800ef2c:	4623      	mov	r3, r4
 800ef2e:	469a      	mov	sl, r3
 800ef30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef34:	b10a      	cbz	r2, 800ef3a <_vfiprintf_r+0x86>
 800ef36:	2a25      	cmp	r2, #37	; 0x25
 800ef38:	d1f9      	bne.n	800ef2e <_vfiprintf_r+0x7a>
 800ef3a:	ebba 0b04 	subs.w	fp, sl, r4
 800ef3e:	d00b      	beq.n	800ef58 <_vfiprintf_r+0xa4>
 800ef40:	465b      	mov	r3, fp
 800ef42:	4622      	mov	r2, r4
 800ef44:	4629      	mov	r1, r5
 800ef46:	4630      	mov	r0, r6
 800ef48:	f7ff ffa1 	bl	800ee8e <__sfputs_r>
 800ef4c:	3001      	adds	r0, #1
 800ef4e:	f000 80a9 	beq.w	800f0a4 <_vfiprintf_r+0x1f0>
 800ef52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef54:	445a      	add	r2, fp
 800ef56:	9209      	str	r2, [sp, #36]	; 0x24
 800ef58:	f89a 3000 	ldrb.w	r3, [sl]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	f000 80a1 	beq.w	800f0a4 <_vfiprintf_r+0x1f0>
 800ef62:	2300      	movs	r3, #0
 800ef64:	f04f 32ff 	mov.w	r2, #4294967295
 800ef68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef6c:	f10a 0a01 	add.w	sl, sl, #1
 800ef70:	9304      	str	r3, [sp, #16]
 800ef72:	9307      	str	r3, [sp, #28]
 800ef74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef78:	931a      	str	r3, [sp, #104]	; 0x68
 800ef7a:	4654      	mov	r4, sl
 800ef7c:	2205      	movs	r2, #5
 800ef7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef82:	4854      	ldr	r0, [pc, #336]	; (800f0d4 <_vfiprintf_r+0x220>)
 800ef84:	f7f1 f93c 	bl	8000200 <memchr>
 800ef88:	9a04      	ldr	r2, [sp, #16]
 800ef8a:	b9d8      	cbnz	r0, 800efc4 <_vfiprintf_r+0x110>
 800ef8c:	06d1      	lsls	r1, r2, #27
 800ef8e:	bf44      	itt	mi
 800ef90:	2320      	movmi	r3, #32
 800ef92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef96:	0713      	lsls	r3, r2, #28
 800ef98:	bf44      	itt	mi
 800ef9a:	232b      	movmi	r3, #43	; 0x2b
 800ef9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efa0:	f89a 3000 	ldrb.w	r3, [sl]
 800efa4:	2b2a      	cmp	r3, #42	; 0x2a
 800efa6:	d015      	beq.n	800efd4 <_vfiprintf_r+0x120>
 800efa8:	9a07      	ldr	r2, [sp, #28]
 800efaa:	4654      	mov	r4, sl
 800efac:	2000      	movs	r0, #0
 800efae:	f04f 0c0a 	mov.w	ip, #10
 800efb2:	4621      	mov	r1, r4
 800efb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efb8:	3b30      	subs	r3, #48	; 0x30
 800efba:	2b09      	cmp	r3, #9
 800efbc:	d94d      	bls.n	800f05a <_vfiprintf_r+0x1a6>
 800efbe:	b1b0      	cbz	r0, 800efee <_vfiprintf_r+0x13a>
 800efc0:	9207      	str	r2, [sp, #28]
 800efc2:	e014      	b.n	800efee <_vfiprintf_r+0x13a>
 800efc4:	eba0 0308 	sub.w	r3, r0, r8
 800efc8:	fa09 f303 	lsl.w	r3, r9, r3
 800efcc:	4313      	orrs	r3, r2
 800efce:	9304      	str	r3, [sp, #16]
 800efd0:	46a2      	mov	sl, r4
 800efd2:	e7d2      	b.n	800ef7a <_vfiprintf_r+0xc6>
 800efd4:	9b03      	ldr	r3, [sp, #12]
 800efd6:	1d19      	adds	r1, r3, #4
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	9103      	str	r1, [sp, #12]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	bfbb      	ittet	lt
 800efe0:	425b      	neglt	r3, r3
 800efe2:	f042 0202 	orrlt.w	r2, r2, #2
 800efe6:	9307      	strge	r3, [sp, #28]
 800efe8:	9307      	strlt	r3, [sp, #28]
 800efea:	bfb8      	it	lt
 800efec:	9204      	strlt	r2, [sp, #16]
 800efee:	7823      	ldrb	r3, [r4, #0]
 800eff0:	2b2e      	cmp	r3, #46	; 0x2e
 800eff2:	d10c      	bne.n	800f00e <_vfiprintf_r+0x15a>
 800eff4:	7863      	ldrb	r3, [r4, #1]
 800eff6:	2b2a      	cmp	r3, #42	; 0x2a
 800eff8:	d134      	bne.n	800f064 <_vfiprintf_r+0x1b0>
 800effa:	9b03      	ldr	r3, [sp, #12]
 800effc:	1d1a      	adds	r2, r3, #4
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	9203      	str	r2, [sp, #12]
 800f002:	2b00      	cmp	r3, #0
 800f004:	bfb8      	it	lt
 800f006:	f04f 33ff 	movlt.w	r3, #4294967295
 800f00a:	3402      	adds	r4, #2
 800f00c:	9305      	str	r3, [sp, #20]
 800f00e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f0e4 <_vfiprintf_r+0x230>
 800f012:	7821      	ldrb	r1, [r4, #0]
 800f014:	2203      	movs	r2, #3
 800f016:	4650      	mov	r0, sl
 800f018:	f7f1 f8f2 	bl	8000200 <memchr>
 800f01c:	b138      	cbz	r0, 800f02e <_vfiprintf_r+0x17a>
 800f01e:	9b04      	ldr	r3, [sp, #16]
 800f020:	eba0 000a 	sub.w	r0, r0, sl
 800f024:	2240      	movs	r2, #64	; 0x40
 800f026:	4082      	lsls	r2, r0
 800f028:	4313      	orrs	r3, r2
 800f02a:	3401      	adds	r4, #1
 800f02c:	9304      	str	r3, [sp, #16]
 800f02e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f032:	4829      	ldr	r0, [pc, #164]	; (800f0d8 <_vfiprintf_r+0x224>)
 800f034:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f038:	2206      	movs	r2, #6
 800f03a:	f7f1 f8e1 	bl	8000200 <memchr>
 800f03e:	2800      	cmp	r0, #0
 800f040:	d03f      	beq.n	800f0c2 <_vfiprintf_r+0x20e>
 800f042:	4b26      	ldr	r3, [pc, #152]	; (800f0dc <_vfiprintf_r+0x228>)
 800f044:	bb1b      	cbnz	r3, 800f08e <_vfiprintf_r+0x1da>
 800f046:	9b03      	ldr	r3, [sp, #12]
 800f048:	3307      	adds	r3, #7
 800f04a:	f023 0307 	bic.w	r3, r3, #7
 800f04e:	3308      	adds	r3, #8
 800f050:	9303      	str	r3, [sp, #12]
 800f052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f054:	443b      	add	r3, r7
 800f056:	9309      	str	r3, [sp, #36]	; 0x24
 800f058:	e768      	b.n	800ef2c <_vfiprintf_r+0x78>
 800f05a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f05e:	460c      	mov	r4, r1
 800f060:	2001      	movs	r0, #1
 800f062:	e7a6      	b.n	800efb2 <_vfiprintf_r+0xfe>
 800f064:	2300      	movs	r3, #0
 800f066:	3401      	adds	r4, #1
 800f068:	9305      	str	r3, [sp, #20]
 800f06a:	4619      	mov	r1, r3
 800f06c:	f04f 0c0a 	mov.w	ip, #10
 800f070:	4620      	mov	r0, r4
 800f072:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f076:	3a30      	subs	r2, #48	; 0x30
 800f078:	2a09      	cmp	r2, #9
 800f07a:	d903      	bls.n	800f084 <_vfiprintf_r+0x1d0>
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d0c6      	beq.n	800f00e <_vfiprintf_r+0x15a>
 800f080:	9105      	str	r1, [sp, #20]
 800f082:	e7c4      	b.n	800f00e <_vfiprintf_r+0x15a>
 800f084:	fb0c 2101 	mla	r1, ip, r1, r2
 800f088:	4604      	mov	r4, r0
 800f08a:	2301      	movs	r3, #1
 800f08c:	e7f0      	b.n	800f070 <_vfiprintf_r+0x1bc>
 800f08e:	ab03      	add	r3, sp, #12
 800f090:	9300      	str	r3, [sp, #0]
 800f092:	462a      	mov	r2, r5
 800f094:	4b12      	ldr	r3, [pc, #72]	; (800f0e0 <_vfiprintf_r+0x22c>)
 800f096:	a904      	add	r1, sp, #16
 800f098:	4630      	mov	r0, r6
 800f09a:	f3af 8000 	nop.w
 800f09e:	4607      	mov	r7, r0
 800f0a0:	1c78      	adds	r0, r7, #1
 800f0a2:	d1d6      	bne.n	800f052 <_vfiprintf_r+0x19e>
 800f0a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0a6:	07d9      	lsls	r1, r3, #31
 800f0a8:	d405      	bmi.n	800f0b6 <_vfiprintf_r+0x202>
 800f0aa:	89ab      	ldrh	r3, [r5, #12]
 800f0ac:	059a      	lsls	r2, r3, #22
 800f0ae:	d402      	bmi.n	800f0b6 <_vfiprintf_r+0x202>
 800f0b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0b2:	f7ff fda8 	bl	800ec06 <__retarget_lock_release_recursive>
 800f0b6:	89ab      	ldrh	r3, [r5, #12]
 800f0b8:	065b      	lsls	r3, r3, #25
 800f0ba:	f53f af1d 	bmi.w	800eef8 <_vfiprintf_r+0x44>
 800f0be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0c0:	e71c      	b.n	800eefc <_vfiprintf_r+0x48>
 800f0c2:	ab03      	add	r3, sp, #12
 800f0c4:	9300      	str	r3, [sp, #0]
 800f0c6:	462a      	mov	r2, r5
 800f0c8:	4b05      	ldr	r3, [pc, #20]	; (800f0e0 <_vfiprintf_r+0x22c>)
 800f0ca:	a904      	add	r1, sp, #16
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	f000 f879 	bl	800f1c4 <_printf_i>
 800f0d2:	e7e4      	b.n	800f09e <_vfiprintf_r+0x1ea>
 800f0d4:	0801247d 	.word	0x0801247d
 800f0d8:	08012487 	.word	0x08012487
 800f0dc:	00000000 	.word	0x00000000
 800f0e0:	0800ee8f 	.word	0x0800ee8f
 800f0e4:	08012483 	.word	0x08012483

0800f0e8 <_printf_common>:
 800f0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0ec:	4616      	mov	r6, r2
 800f0ee:	4699      	mov	r9, r3
 800f0f0:	688a      	ldr	r2, [r1, #8]
 800f0f2:	690b      	ldr	r3, [r1, #16]
 800f0f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	bfb8      	it	lt
 800f0fc:	4613      	movlt	r3, r2
 800f0fe:	6033      	str	r3, [r6, #0]
 800f100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f104:	4607      	mov	r7, r0
 800f106:	460c      	mov	r4, r1
 800f108:	b10a      	cbz	r2, 800f10e <_printf_common+0x26>
 800f10a:	3301      	adds	r3, #1
 800f10c:	6033      	str	r3, [r6, #0]
 800f10e:	6823      	ldr	r3, [r4, #0]
 800f110:	0699      	lsls	r1, r3, #26
 800f112:	bf42      	ittt	mi
 800f114:	6833      	ldrmi	r3, [r6, #0]
 800f116:	3302      	addmi	r3, #2
 800f118:	6033      	strmi	r3, [r6, #0]
 800f11a:	6825      	ldr	r5, [r4, #0]
 800f11c:	f015 0506 	ands.w	r5, r5, #6
 800f120:	d106      	bne.n	800f130 <_printf_common+0x48>
 800f122:	f104 0a19 	add.w	sl, r4, #25
 800f126:	68e3      	ldr	r3, [r4, #12]
 800f128:	6832      	ldr	r2, [r6, #0]
 800f12a:	1a9b      	subs	r3, r3, r2
 800f12c:	42ab      	cmp	r3, r5
 800f12e:	dc26      	bgt.n	800f17e <_printf_common+0x96>
 800f130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f134:	1e13      	subs	r3, r2, #0
 800f136:	6822      	ldr	r2, [r4, #0]
 800f138:	bf18      	it	ne
 800f13a:	2301      	movne	r3, #1
 800f13c:	0692      	lsls	r2, r2, #26
 800f13e:	d42b      	bmi.n	800f198 <_printf_common+0xb0>
 800f140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f144:	4649      	mov	r1, r9
 800f146:	4638      	mov	r0, r7
 800f148:	47c0      	blx	r8
 800f14a:	3001      	adds	r0, #1
 800f14c:	d01e      	beq.n	800f18c <_printf_common+0xa4>
 800f14e:	6823      	ldr	r3, [r4, #0]
 800f150:	6922      	ldr	r2, [r4, #16]
 800f152:	f003 0306 	and.w	r3, r3, #6
 800f156:	2b04      	cmp	r3, #4
 800f158:	bf02      	ittt	eq
 800f15a:	68e5      	ldreq	r5, [r4, #12]
 800f15c:	6833      	ldreq	r3, [r6, #0]
 800f15e:	1aed      	subeq	r5, r5, r3
 800f160:	68a3      	ldr	r3, [r4, #8]
 800f162:	bf0c      	ite	eq
 800f164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f168:	2500      	movne	r5, #0
 800f16a:	4293      	cmp	r3, r2
 800f16c:	bfc4      	itt	gt
 800f16e:	1a9b      	subgt	r3, r3, r2
 800f170:	18ed      	addgt	r5, r5, r3
 800f172:	2600      	movs	r6, #0
 800f174:	341a      	adds	r4, #26
 800f176:	42b5      	cmp	r5, r6
 800f178:	d11a      	bne.n	800f1b0 <_printf_common+0xc8>
 800f17a:	2000      	movs	r0, #0
 800f17c:	e008      	b.n	800f190 <_printf_common+0xa8>
 800f17e:	2301      	movs	r3, #1
 800f180:	4652      	mov	r2, sl
 800f182:	4649      	mov	r1, r9
 800f184:	4638      	mov	r0, r7
 800f186:	47c0      	blx	r8
 800f188:	3001      	adds	r0, #1
 800f18a:	d103      	bne.n	800f194 <_printf_common+0xac>
 800f18c:	f04f 30ff 	mov.w	r0, #4294967295
 800f190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f194:	3501      	adds	r5, #1
 800f196:	e7c6      	b.n	800f126 <_printf_common+0x3e>
 800f198:	18e1      	adds	r1, r4, r3
 800f19a:	1c5a      	adds	r2, r3, #1
 800f19c:	2030      	movs	r0, #48	; 0x30
 800f19e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f1a2:	4422      	add	r2, r4
 800f1a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f1a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f1ac:	3302      	adds	r3, #2
 800f1ae:	e7c7      	b.n	800f140 <_printf_common+0x58>
 800f1b0:	2301      	movs	r3, #1
 800f1b2:	4622      	mov	r2, r4
 800f1b4:	4649      	mov	r1, r9
 800f1b6:	4638      	mov	r0, r7
 800f1b8:	47c0      	blx	r8
 800f1ba:	3001      	adds	r0, #1
 800f1bc:	d0e6      	beq.n	800f18c <_printf_common+0xa4>
 800f1be:	3601      	adds	r6, #1
 800f1c0:	e7d9      	b.n	800f176 <_printf_common+0x8e>
	...

0800f1c4 <_printf_i>:
 800f1c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1c8:	7e0f      	ldrb	r7, [r1, #24]
 800f1ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f1cc:	2f78      	cmp	r7, #120	; 0x78
 800f1ce:	4691      	mov	r9, r2
 800f1d0:	4680      	mov	r8, r0
 800f1d2:	460c      	mov	r4, r1
 800f1d4:	469a      	mov	sl, r3
 800f1d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f1da:	d807      	bhi.n	800f1ec <_printf_i+0x28>
 800f1dc:	2f62      	cmp	r7, #98	; 0x62
 800f1de:	d80a      	bhi.n	800f1f6 <_printf_i+0x32>
 800f1e0:	2f00      	cmp	r7, #0
 800f1e2:	f000 80d4 	beq.w	800f38e <_printf_i+0x1ca>
 800f1e6:	2f58      	cmp	r7, #88	; 0x58
 800f1e8:	f000 80c0 	beq.w	800f36c <_printf_i+0x1a8>
 800f1ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f1f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f1f4:	e03a      	b.n	800f26c <_printf_i+0xa8>
 800f1f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f1fa:	2b15      	cmp	r3, #21
 800f1fc:	d8f6      	bhi.n	800f1ec <_printf_i+0x28>
 800f1fe:	a101      	add	r1, pc, #4	; (adr r1, 800f204 <_printf_i+0x40>)
 800f200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f204:	0800f25d 	.word	0x0800f25d
 800f208:	0800f271 	.word	0x0800f271
 800f20c:	0800f1ed 	.word	0x0800f1ed
 800f210:	0800f1ed 	.word	0x0800f1ed
 800f214:	0800f1ed 	.word	0x0800f1ed
 800f218:	0800f1ed 	.word	0x0800f1ed
 800f21c:	0800f271 	.word	0x0800f271
 800f220:	0800f1ed 	.word	0x0800f1ed
 800f224:	0800f1ed 	.word	0x0800f1ed
 800f228:	0800f1ed 	.word	0x0800f1ed
 800f22c:	0800f1ed 	.word	0x0800f1ed
 800f230:	0800f375 	.word	0x0800f375
 800f234:	0800f29d 	.word	0x0800f29d
 800f238:	0800f32f 	.word	0x0800f32f
 800f23c:	0800f1ed 	.word	0x0800f1ed
 800f240:	0800f1ed 	.word	0x0800f1ed
 800f244:	0800f397 	.word	0x0800f397
 800f248:	0800f1ed 	.word	0x0800f1ed
 800f24c:	0800f29d 	.word	0x0800f29d
 800f250:	0800f1ed 	.word	0x0800f1ed
 800f254:	0800f1ed 	.word	0x0800f1ed
 800f258:	0800f337 	.word	0x0800f337
 800f25c:	682b      	ldr	r3, [r5, #0]
 800f25e:	1d1a      	adds	r2, r3, #4
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	602a      	str	r2, [r5, #0]
 800f264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f26c:	2301      	movs	r3, #1
 800f26e:	e09f      	b.n	800f3b0 <_printf_i+0x1ec>
 800f270:	6820      	ldr	r0, [r4, #0]
 800f272:	682b      	ldr	r3, [r5, #0]
 800f274:	0607      	lsls	r7, r0, #24
 800f276:	f103 0104 	add.w	r1, r3, #4
 800f27a:	6029      	str	r1, [r5, #0]
 800f27c:	d501      	bpl.n	800f282 <_printf_i+0xbe>
 800f27e:	681e      	ldr	r6, [r3, #0]
 800f280:	e003      	b.n	800f28a <_printf_i+0xc6>
 800f282:	0646      	lsls	r6, r0, #25
 800f284:	d5fb      	bpl.n	800f27e <_printf_i+0xba>
 800f286:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f28a:	2e00      	cmp	r6, #0
 800f28c:	da03      	bge.n	800f296 <_printf_i+0xd2>
 800f28e:	232d      	movs	r3, #45	; 0x2d
 800f290:	4276      	negs	r6, r6
 800f292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f296:	485a      	ldr	r0, [pc, #360]	; (800f400 <_printf_i+0x23c>)
 800f298:	230a      	movs	r3, #10
 800f29a:	e012      	b.n	800f2c2 <_printf_i+0xfe>
 800f29c:	682b      	ldr	r3, [r5, #0]
 800f29e:	6820      	ldr	r0, [r4, #0]
 800f2a0:	1d19      	adds	r1, r3, #4
 800f2a2:	6029      	str	r1, [r5, #0]
 800f2a4:	0605      	lsls	r5, r0, #24
 800f2a6:	d501      	bpl.n	800f2ac <_printf_i+0xe8>
 800f2a8:	681e      	ldr	r6, [r3, #0]
 800f2aa:	e002      	b.n	800f2b2 <_printf_i+0xee>
 800f2ac:	0641      	lsls	r1, r0, #25
 800f2ae:	d5fb      	bpl.n	800f2a8 <_printf_i+0xe4>
 800f2b0:	881e      	ldrh	r6, [r3, #0]
 800f2b2:	4853      	ldr	r0, [pc, #332]	; (800f400 <_printf_i+0x23c>)
 800f2b4:	2f6f      	cmp	r7, #111	; 0x6f
 800f2b6:	bf0c      	ite	eq
 800f2b8:	2308      	moveq	r3, #8
 800f2ba:	230a      	movne	r3, #10
 800f2bc:	2100      	movs	r1, #0
 800f2be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f2c2:	6865      	ldr	r5, [r4, #4]
 800f2c4:	60a5      	str	r5, [r4, #8]
 800f2c6:	2d00      	cmp	r5, #0
 800f2c8:	bfa2      	ittt	ge
 800f2ca:	6821      	ldrge	r1, [r4, #0]
 800f2cc:	f021 0104 	bicge.w	r1, r1, #4
 800f2d0:	6021      	strge	r1, [r4, #0]
 800f2d2:	b90e      	cbnz	r6, 800f2d8 <_printf_i+0x114>
 800f2d4:	2d00      	cmp	r5, #0
 800f2d6:	d04b      	beq.n	800f370 <_printf_i+0x1ac>
 800f2d8:	4615      	mov	r5, r2
 800f2da:	fbb6 f1f3 	udiv	r1, r6, r3
 800f2de:	fb03 6711 	mls	r7, r3, r1, r6
 800f2e2:	5dc7      	ldrb	r7, [r0, r7]
 800f2e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f2e8:	4637      	mov	r7, r6
 800f2ea:	42bb      	cmp	r3, r7
 800f2ec:	460e      	mov	r6, r1
 800f2ee:	d9f4      	bls.n	800f2da <_printf_i+0x116>
 800f2f0:	2b08      	cmp	r3, #8
 800f2f2:	d10b      	bne.n	800f30c <_printf_i+0x148>
 800f2f4:	6823      	ldr	r3, [r4, #0]
 800f2f6:	07de      	lsls	r6, r3, #31
 800f2f8:	d508      	bpl.n	800f30c <_printf_i+0x148>
 800f2fa:	6923      	ldr	r3, [r4, #16]
 800f2fc:	6861      	ldr	r1, [r4, #4]
 800f2fe:	4299      	cmp	r1, r3
 800f300:	bfde      	ittt	le
 800f302:	2330      	movle	r3, #48	; 0x30
 800f304:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f308:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f30c:	1b52      	subs	r2, r2, r5
 800f30e:	6122      	str	r2, [r4, #16]
 800f310:	f8cd a000 	str.w	sl, [sp]
 800f314:	464b      	mov	r3, r9
 800f316:	aa03      	add	r2, sp, #12
 800f318:	4621      	mov	r1, r4
 800f31a:	4640      	mov	r0, r8
 800f31c:	f7ff fee4 	bl	800f0e8 <_printf_common>
 800f320:	3001      	adds	r0, #1
 800f322:	d14a      	bne.n	800f3ba <_printf_i+0x1f6>
 800f324:	f04f 30ff 	mov.w	r0, #4294967295
 800f328:	b004      	add	sp, #16
 800f32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f32e:	6823      	ldr	r3, [r4, #0]
 800f330:	f043 0320 	orr.w	r3, r3, #32
 800f334:	6023      	str	r3, [r4, #0]
 800f336:	4833      	ldr	r0, [pc, #204]	; (800f404 <_printf_i+0x240>)
 800f338:	2778      	movs	r7, #120	; 0x78
 800f33a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f33e:	6823      	ldr	r3, [r4, #0]
 800f340:	6829      	ldr	r1, [r5, #0]
 800f342:	061f      	lsls	r7, r3, #24
 800f344:	f851 6b04 	ldr.w	r6, [r1], #4
 800f348:	d402      	bmi.n	800f350 <_printf_i+0x18c>
 800f34a:	065f      	lsls	r7, r3, #25
 800f34c:	bf48      	it	mi
 800f34e:	b2b6      	uxthmi	r6, r6
 800f350:	07df      	lsls	r7, r3, #31
 800f352:	bf48      	it	mi
 800f354:	f043 0320 	orrmi.w	r3, r3, #32
 800f358:	6029      	str	r1, [r5, #0]
 800f35a:	bf48      	it	mi
 800f35c:	6023      	strmi	r3, [r4, #0]
 800f35e:	b91e      	cbnz	r6, 800f368 <_printf_i+0x1a4>
 800f360:	6823      	ldr	r3, [r4, #0]
 800f362:	f023 0320 	bic.w	r3, r3, #32
 800f366:	6023      	str	r3, [r4, #0]
 800f368:	2310      	movs	r3, #16
 800f36a:	e7a7      	b.n	800f2bc <_printf_i+0xf8>
 800f36c:	4824      	ldr	r0, [pc, #144]	; (800f400 <_printf_i+0x23c>)
 800f36e:	e7e4      	b.n	800f33a <_printf_i+0x176>
 800f370:	4615      	mov	r5, r2
 800f372:	e7bd      	b.n	800f2f0 <_printf_i+0x12c>
 800f374:	682b      	ldr	r3, [r5, #0]
 800f376:	6826      	ldr	r6, [r4, #0]
 800f378:	6961      	ldr	r1, [r4, #20]
 800f37a:	1d18      	adds	r0, r3, #4
 800f37c:	6028      	str	r0, [r5, #0]
 800f37e:	0635      	lsls	r5, r6, #24
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	d501      	bpl.n	800f388 <_printf_i+0x1c4>
 800f384:	6019      	str	r1, [r3, #0]
 800f386:	e002      	b.n	800f38e <_printf_i+0x1ca>
 800f388:	0670      	lsls	r0, r6, #25
 800f38a:	d5fb      	bpl.n	800f384 <_printf_i+0x1c0>
 800f38c:	8019      	strh	r1, [r3, #0]
 800f38e:	2300      	movs	r3, #0
 800f390:	6123      	str	r3, [r4, #16]
 800f392:	4615      	mov	r5, r2
 800f394:	e7bc      	b.n	800f310 <_printf_i+0x14c>
 800f396:	682b      	ldr	r3, [r5, #0]
 800f398:	1d1a      	adds	r2, r3, #4
 800f39a:	602a      	str	r2, [r5, #0]
 800f39c:	681d      	ldr	r5, [r3, #0]
 800f39e:	6862      	ldr	r2, [r4, #4]
 800f3a0:	2100      	movs	r1, #0
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	f7f0 ff2c 	bl	8000200 <memchr>
 800f3a8:	b108      	cbz	r0, 800f3ae <_printf_i+0x1ea>
 800f3aa:	1b40      	subs	r0, r0, r5
 800f3ac:	6060      	str	r0, [r4, #4]
 800f3ae:	6863      	ldr	r3, [r4, #4]
 800f3b0:	6123      	str	r3, [r4, #16]
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3b8:	e7aa      	b.n	800f310 <_printf_i+0x14c>
 800f3ba:	6923      	ldr	r3, [r4, #16]
 800f3bc:	462a      	mov	r2, r5
 800f3be:	4649      	mov	r1, r9
 800f3c0:	4640      	mov	r0, r8
 800f3c2:	47d0      	blx	sl
 800f3c4:	3001      	adds	r0, #1
 800f3c6:	d0ad      	beq.n	800f324 <_printf_i+0x160>
 800f3c8:	6823      	ldr	r3, [r4, #0]
 800f3ca:	079b      	lsls	r3, r3, #30
 800f3cc:	d413      	bmi.n	800f3f6 <_printf_i+0x232>
 800f3ce:	68e0      	ldr	r0, [r4, #12]
 800f3d0:	9b03      	ldr	r3, [sp, #12]
 800f3d2:	4298      	cmp	r0, r3
 800f3d4:	bfb8      	it	lt
 800f3d6:	4618      	movlt	r0, r3
 800f3d8:	e7a6      	b.n	800f328 <_printf_i+0x164>
 800f3da:	2301      	movs	r3, #1
 800f3dc:	4632      	mov	r2, r6
 800f3de:	4649      	mov	r1, r9
 800f3e0:	4640      	mov	r0, r8
 800f3e2:	47d0      	blx	sl
 800f3e4:	3001      	adds	r0, #1
 800f3e6:	d09d      	beq.n	800f324 <_printf_i+0x160>
 800f3e8:	3501      	adds	r5, #1
 800f3ea:	68e3      	ldr	r3, [r4, #12]
 800f3ec:	9903      	ldr	r1, [sp, #12]
 800f3ee:	1a5b      	subs	r3, r3, r1
 800f3f0:	42ab      	cmp	r3, r5
 800f3f2:	dcf2      	bgt.n	800f3da <_printf_i+0x216>
 800f3f4:	e7eb      	b.n	800f3ce <_printf_i+0x20a>
 800f3f6:	2500      	movs	r5, #0
 800f3f8:	f104 0619 	add.w	r6, r4, #25
 800f3fc:	e7f5      	b.n	800f3ea <_printf_i+0x226>
 800f3fe:	bf00      	nop
 800f400:	0801248e 	.word	0x0801248e
 800f404:	0801249f 	.word	0x0801249f

0800f408 <__sflush_r>:
 800f408:	898a      	ldrh	r2, [r1, #12]
 800f40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f40e:	4605      	mov	r5, r0
 800f410:	0710      	lsls	r0, r2, #28
 800f412:	460c      	mov	r4, r1
 800f414:	d458      	bmi.n	800f4c8 <__sflush_r+0xc0>
 800f416:	684b      	ldr	r3, [r1, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	dc05      	bgt.n	800f428 <__sflush_r+0x20>
 800f41c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f41e:	2b00      	cmp	r3, #0
 800f420:	dc02      	bgt.n	800f428 <__sflush_r+0x20>
 800f422:	2000      	movs	r0, #0
 800f424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f42a:	2e00      	cmp	r6, #0
 800f42c:	d0f9      	beq.n	800f422 <__sflush_r+0x1a>
 800f42e:	2300      	movs	r3, #0
 800f430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f434:	682f      	ldr	r7, [r5, #0]
 800f436:	6a21      	ldr	r1, [r4, #32]
 800f438:	602b      	str	r3, [r5, #0]
 800f43a:	d032      	beq.n	800f4a2 <__sflush_r+0x9a>
 800f43c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f43e:	89a3      	ldrh	r3, [r4, #12]
 800f440:	075a      	lsls	r2, r3, #29
 800f442:	d505      	bpl.n	800f450 <__sflush_r+0x48>
 800f444:	6863      	ldr	r3, [r4, #4]
 800f446:	1ac0      	subs	r0, r0, r3
 800f448:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f44a:	b10b      	cbz	r3, 800f450 <__sflush_r+0x48>
 800f44c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f44e:	1ac0      	subs	r0, r0, r3
 800f450:	2300      	movs	r3, #0
 800f452:	4602      	mov	r2, r0
 800f454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f456:	6a21      	ldr	r1, [r4, #32]
 800f458:	4628      	mov	r0, r5
 800f45a:	47b0      	blx	r6
 800f45c:	1c43      	adds	r3, r0, #1
 800f45e:	89a3      	ldrh	r3, [r4, #12]
 800f460:	d106      	bne.n	800f470 <__sflush_r+0x68>
 800f462:	6829      	ldr	r1, [r5, #0]
 800f464:	291d      	cmp	r1, #29
 800f466:	d82b      	bhi.n	800f4c0 <__sflush_r+0xb8>
 800f468:	4a29      	ldr	r2, [pc, #164]	; (800f510 <__sflush_r+0x108>)
 800f46a:	410a      	asrs	r2, r1
 800f46c:	07d6      	lsls	r6, r2, #31
 800f46e:	d427      	bmi.n	800f4c0 <__sflush_r+0xb8>
 800f470:	2200      	movs	r2, #0
 800f472:	6062      	str	r2, [r4, #4]
 800f474:	04d9      	lsls	r1, r3, #19
 800f476:	6922      	ldr	r2, [r4, #16]
 800f478:	6022      	str	r2, [r4, #0]
 800f47a:	d504      	bpl.n	800f486 <__sflush_r+0x7e>
 800f47c:	1c42      	adds	r2, r0, #1
 800f47e:	d101      	bne.n	800f484 <__sflush_r+0x7c>
 800f480:	682b      	ldr	r3, [r5, #0]
 800f482:	b903      	cbnz	r3, 800f486 <__sflush_r+0x7e>
 800f484:	6560      	str	r0, [r4, #84]	; 0x54
 800f486:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f488:	602f      	str	r7, [r5, #0]
 800f48a:	2900      	cmp	r1, #0
 800f48c:	d0c9      	beq.n	800f422 <__sflush_r+0x1a>
 800f48e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f492:	4299      	cmp	r1, r3
 800f494:	d002      	beq.n	800f49c <__sflush_r+0x94>
 800f496:	4628      	mov	r0, r5
 800f498:	f7ff fbe2 	bl	800ec60 <_free_r>
 800f49c:	2000      	movs	r0, #0
 800f49e:	6360      	str	r0, [r4, #52]	; 0x34
 800f4a0:	e7c0      	b.n	800f424 <__sflush_r+0x1c>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	47b0      	blx	r6
 800f4a8:	1c41      	adds	r1, r0, #1
 800f4aa:	d1c8      	bne.n	800f43e <__sflush_r+0x36>
 800f4ac:	682b      	ldr	r3, [r5, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d0c5      	beq.n	800f43e <__sflush_r+0x36>
 800f4b2:	2b1d      	cmp	r3, #29
 800f4b4:	d001      	beq.n	800f4ba <__sflush_r+0xb2>
 800f4b6:	2b16      	cmp	r3, #22
 800f4b8:	d101      	bne.n	800f4be <__sflush_r+0xb6>
 800f4ba:	602f      	str	r7, [r5, #0]
 800f4bc:	e7b1      	b.n	800f422 <__sflush_r+0x1a>
 800f4be:	89a3      	ldrh	r3, [r4, #12]
 800f4c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4c4:	81a3      	strh	r3, [r4, #12]
 800f4c6:	e7ad      	b.n	800f424 <__sflush_r+0x1c>
 800f4c8:	690f      	ldr	r7, [r1, #16]
 800f4ca:	2f00      	cmp	r7, #0
 800f4cc:	d0a9      	beq.n	800f422 <__sflush_r+0x1a>
 800f4ce:	0793      	lsls	r3, r2, #30
 800f4d0:	680e      	ldr	r6, [r1, #0]
 800f4d2:	bf08      	it	eq
 800f4d4:	694b      	ldreq	r3, [r1, #20]
 800f4d6:	600f      	str	r7, [r1, #0]
 800f4d8:	bf18      	it	ne
 800f4da:	2300      	movne	r3, #0
 800f4dc:	eba6 0807 	sub.w	r8, r6, r7
 800f4e0:	608b      	str	r3, [r1, #8]
 800f4e2:	f1b8 0f00 	cmp.w	r8, #0
 800f4e6:	dd9c      	ble.n	800f422 <__sflush_r+0x1a>
 800f4e8:	6a21      	ldr	r1, [r4, #32]
 800f4ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f4ec:	4643      	mov	r3, r8
 800f4ee:	463a      	mov	r2, r7
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	47b0      	blx	r6
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	dc06      	bgt.n	800f506 <__sflush_r+0xfe>
 800f4f8:	89a3      	ldrh	r3, [r4, #12]
 800f4fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4fe:	81a3      	strh	r3, [r4, #12]
 800f500:	f04f 30ff 	mov.w	r0, #4294967295
 800f504:	e78e      	b.n	800f424 <__sflush_r+0x1c>
 800f506:	4407      	add	r7, r0
 800f508:	eba8 0800 	sub.w	r8, r8, r0
 800f50c:	e7e9      	b.n	800f4e2 <__sflush_r+0xda>
 800f50e:	bf00      	nop
 800f510:	dfbffffe 	.word	0xdfbffffe

0800f514 <_fflush_r>:
 800f514:	b538      	push	{r3, r4, r5, lr}
 800f516:	690b      	ldr	r3, [r1, #16]
 800f518:	4605      	mov	r5, r0
 800f51a:	460c      	mov	r4, r1
 800f51c:	b913      	cbnz	r3, 800f524 <_fflush_r+0x10>
 800f51e:	2500      	movs	r5, #0
 800f520:	4628      	mov	r0, r5
 800f522:	bd38      	pop	{r3, r4, r5, pc}
 800f524:	b118      	cbz	r0, 800f52e <_fflush_r+0x1a>
 800f526:	6a03      	ldr	r3, [r0, #32]
 800f528:	b90b      	cbnz	r3, 800f52e <_fflush_r+0x1a>
 800f52a:	f7ff fa4b 	bl	800e9c4 <__sinit>
 800f52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d0f3      	beq.n	800f51e <_fflush_r+0xa>
 800f536:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f538:	07d0      	lsls	r0, r2, #31
 800f53a:	d404      	bmi.n	800f546 <_fflush_r+0x32>
 800f53c:	0599      	lsls	r1, r3, #22
 800f53e:	d402      	bmi.n	800f546 <_fflush_r+0x32>
 800f540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f542:	f7ff fb5f 	bl	800ec04 <__retarget_lock_acquire_recursive>
 800f546:	4628      	mov	r0, r5
 800f548:	4621      	mov	r1, r4
 800f54a:	f7ff ff5d 	bl	800f408 <__sflush_r>
 800f54e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f550:	07da      	lsls	r2, r3, #31
 800f552:	4605      	mov	r5, r0
 800f554:	d4e4      	bmi.n	800f520 <_fflush_r+0xc>
 800f556:	89a3      	ldrh	r3, [r4, #12]
 800f558:	059b      	lsls	r3, r3, #22
 800f55a:	d4e1      	bmi.n	800f520 <_fflush_r+0xc>
 800f55c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f55e:	f7ff fb52 	bl	800ec06 <__retarget_lock_release_recursive>
 800f562:	e7dd      	b.n	800f520 <_fflush_r+0xc>

0800f564 <fiprintf>:
 800f564:	b40e      	push	{r1, r2, r3}
 800f566:	b503      	push	{r0, r1, lr}
 800f568:	4601      	mov	r1, r0
 800f56a:	ab03      	add	r3, sp, #12
 800f56c:	4805      	ldr	r0, [pc, #20]	; (800f584 <fiprintf+0x20>)
 800f56e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f572:	6800      	ldr	r0, [r0, #0]
 800f574:	9301      	str	r3, [sp, #4]
 800f576:	f7ff fc9d 	bl	800eeb4 <_vfiprintf_r>
 800f57a:	b002      	add	sp, #8
 800f57c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f580:	b003      	add	sp, #12
 800f582:	4770      	bx	lr
 800f584:	20000084 	.word	0x20000084

0800f588 <__swbuf_r>:
 800f588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f58a:	460e      	mov	r6, r1
 800f58c:	4614      	mov	r4, r2
 800f58e:	4605      	mov	r5, r0
 800f590:	b118      	cbz	r0, 800f59a <__swbuf_r+0x12>
 800f592:	6a03      	ldr	r3, [r0, #32]
 800f594:	b90b      	cbnz	r3, 800f59a <__swbuf_r+0x12>
 800f596:	f7ff fa15 	bl	800e9c4 <__sinit>
 800f59a:	69a3      	ldr	r3, [r4, #24]
 800f59c:	60a3      	str	r3, [r4, #8]
 800f59e:	89a3      	ldrh	r3, [r4, #12]
 800f5a0:	071a      	lsls	r2, r3, #28
 800f5a2:	d525      	bpl.n	800f5f0 <__swbuf_r+0x68>
 800f5a4:	6923      	ldr	r3, [r4, #16]
 800f5a6:	b31b      	cbz	r3, 800f5f0 <__swbuf_r+0x68>
 800f5a8:	6823      	ldr	r3, [r4, #0]
 800f5aa:	6922      	ldr	r2, [r4, #16]
 800f5ac:	1a98      	subs	r0, r3, r2
 800f5ae:	6963      	ldr	r3, [r4, #20]
 800f5b0:	b2f6      	uxtb	r6, r6
 800f5b2:	4283      	cmp	r3, r0
 800f5b4:	4637      	mov	r7, r6
 800f5b6:	dc04      	bgt.n	800f5c2 <__swbuf_r+0x3a>
 800f5b8:	4621      	mov	r1, r4
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	f7ff ffaa 	bl	800f514 <_fflush_r>
 800f5c0:	b9e0      	cbnz	r0, 800f5fc <__swbuf_r+0x74>
 800f5c2:	68a3      	ldr	r3, [r4, #8]
 800f5c4:	3b01      	subs	r3, #1
 800f5c6:	60a3      	str	r3, [r4, #8]
 800f5c8:	6823      	ldr	r3, [r4, #0]
 800f5ca:	1c5a      	adds	r2, r3, #1
 800f5cc:	6022      	str	r2, [r4, #0]
 800f5ce:	701e      	strb	r6, [r3, #0]
 800f5d0:	6962      	ldr	r2, [r4, #20]
 800f5d2:	1c43      	adds	r3, r0, #1
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d004      	beq.n	800f5e2 <__swbuf_r+0x5a>
 800f5d8:	89a3      	ldrh	r3, [r4, #12]
 800f5da:	07db      	lsls	r3, r3, #31
 800f5dc:	d506      	bpl.n	800f5ec <__swbuf_r+0x64>
 800f5de:	2e0a      	cmp	r6, #10
 800f5e0:	d104      	bne.n	800f5ec <__swbuf_r+0x64>
 800f5e2:	4621      	mov	r1, r4
 800f5e4:	4628      	mov	r0, r5
 800f5e6:	f7ff ff95 	bl	800f514 <_fflush_r>
 800f5ea:	b938      	cbnz	r0, 800f5fc <__swbuf_r+0x74>
 800f5ec:	4638      	mov	r0, r7
 800f5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5f0:	4621      	mov	r1, r4
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	f000 f806 	bl	800f604 <__swsetup_r>
 800f5f8:	2800      	cmp	r0, #0
 800f5fa:	d0d5      	beq.n	800f5a8 <__swbuf_r+0x20>
 800f5fc:	f04f 37ff 	mov.w	r7, #4294967295
 800f600:	e7f4      	b.n	800f5ec <__swbuf_r+0x64>
	...

0800f604 <__swsetup_r>:
 800f604:	b538      	push	{r3, r4, r5, lr}
 800f606:	4b2a      	ldr	r3, [pc, #168]	; (800f6b0 <__swsetup_r+0xac>)
 800f608:	4605      	mov	r5, r0
 800f60a:	6818      	ldr	r0, [r3, #0]
 800f60c:	460c      	mov	r4, r1
 800f60e:	b118      	cbz	r0, 800f618 <__swsetup_r+0x14>
 800f610:	6a03      	ldr	r3, [r0, #32]
 800f612:	b90b      	cbnz	r3, 800f618 <__swsetup_r+0x14>
 800f614:	f7ff f9d6 	bl	800e9c4 <__sinit>
 800f618:	89a3      	ldrh	r3, [r4, #12]
 800f61a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f61e:	0718      	lsls	r0, r3, #28
 800f620:	d422      	bmi.n	800f668 <__swsetup_r+0x64>
 800f622:	06d9      	lsls	r1, r3, #27
 800f624:	d407      	bmi.n	800f636 <__swsetup_r+0x32>
 800f626:	2309      	movs	r3, #9
 800f628:	602b      	str	r3, [r5, #0]
 800f62a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f62e:	81a3      	strh	r3, [r4, #12]
 800f630:	f04f 30ff 	mov.w	r0, #4294967295
 800f634:	e034      	b.n	800f6a0 <__swsetup_r+0x9c>
 800f636:	0758      	lsls	r0, r3, #29
 800f638:	d512      	bpl.n	800f660 <__swsetup_r+0x5c>
 800f63a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f63c:	b141      	cbz	r1, 800f650 <__swsetup_r+0x4c>
 800f63e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f642:	4299      	cmp	r1, r3
 800f644:	d002      	beq.n	800f64c <__swsetup_r+0x48>
 800f646:	4628      	mov	r0, r5
 800f648:	f7ff fb0a 	bl	800ec60 <_free_r>
 800f64c:	2300      	movs	r3, #0
 800f64e:	6363      	str	r3, [r4, #52]	; 0x34
 800f650:	89a3      	ldrh	r3, [r4, #12]
 800f652:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f656:	81a3      	strh	r3, [r4, #12]
 800f658:	2300      	movs	r3, #0
 800f65a:	6063      	str	r3, [r4, #4]
 800f65c:	6923      	ldr	r3, [r4, #16]
 800f65e:	6023      	str	r3, [r4, #0]
 800f660:	89a3      	ldrh	r3, [r4, #12]
 800f662:	f043 0308 	orr.w	r3, r3, #8
 800f666:	81a3      	strh	r3, [r4, #12]
 800f668:	6923      	ldr	r3, [r4, #16]
 800f66a:	b94b      	cbnz	r3, 800f680 <__swsetup_r+0x7c>
 800f66c:	89a3      	ldrh	r3, [r4, #12]
 800f66e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f676:	d003      	beq.n	800f680 <__swsetup_r+0x7c>
 800f678:	4621      	mov	r1, r4
 800f67a:	4628      	mov	r0, r5
 800f67c:	f000 f857 	bl	800f72e <__smakebuf_r>
 800f680:	89a0      	ldrh	r0, [r4, #12]
 800f682:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f686:	f010 0301 	ands.w	r3, r0, #1
 800f68a:	d00a      	beq.n	800f6a2 <__swsetup_r+0x9e>
 800f68c:	2300      	movs	r3, #0
 800f68e:	60a3      	str	r3, [r4, #8]
 800f690:	6963      	ldr	r3, [r4, #20]
 800f692:	425b      	negs	r3, r3
 800f694:	61a3      	str	r3, [r4, #24]
 800f696:	6923      	ldr	r3, [r4, #16]
 800f698:	b943      	cbnz	r3, 800f6ac <__swsetup_r+0xa8>
 800f69a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f69e:	d1c4      	bne.n	800f62a <__swsetup_r+0x26>
 800f6a0:	bd38      	pop	{r3, r4, r5, pc}
 800f6a2:	0781      	lsls	r1, r0, #30
 800f6a4:	bf58      	it	pl
 800f6a6:	6963      	ldrpl	r3, [r4, #20]
 800f6a8:	60a3      	str	r3, [r4, #8]
 800f6aa:	e7f4      	b.n	800f696 <__swsetup_r+0x92>
 800f6ac:	2000      	movs	r0, #0
 800f6ae:	e7f7      	b.n	800f6a0 <__swsetup_r+0x9c>
 800f6b0:	20000084 	.word	0x20000084

0800f6b4 <_sbrk_r>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	4d06      	ldr	r5, [pc, #24]	; (800f6d0 <_sbrk_r+0x1c>)
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	4608      	mov	r0, r1
 800f6be:	602b      	str	r3, [r5, #0]
 800f6c0:	f7f1 f9d2 	bl	8000a68 <_sbrk>
 800f6c4:	1c43      	adds	r3, r0, #1
 800f6c6:	d102      	bne.n	800f6ce <_sbrk_r+0x1a>
 800f6c8:	682b      	ldr	r3, [r5, #0]
 800f6ca:	b103      	cbz	r3, 800f6ce <_sbrk_r+0x1a>
 800f6cc:	6023      	str	r3, [r4, #0]
 800f6ce:	bd38      	pop	{r3, r4, r5, pc}
 800f6d0:	200084e8 	.word	0x200084e8

0800f6d4 <abort>:
 800f6d4:	b508      	push	{r3, lr}
 800f6d6:	2006      	movs	r0, #6
 800f6d8:	f000 f88e 	bl	800f7f8 <raise>
 800f6dc:	2001      	movs	r0, #1
 800f6de:	f7f1 f94b 	bl	8000978 <_exit>

0800f6e2 <__swhatbuf_r>:
 800f6e2:	b570      	push	{r4, r5, r6, lr}
 800f6e4:	460c      	mov	r4, r1
 800f6e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ea:	2900      	cmp	r1, #0
 800f6ec:	b096      	sub	sp, #88	; 0x58
 800f6ee:	4615      	mov	r5, r2
 800f6f0:	461e      	mov	r6, r3
 800f6f2:	da0d      	bge.n	800f710 <__swhatbuf_r+0x2e>
 800f6f4:	89a3      	ldrh	r3, [r4, #12]
 800f6f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f6fa:	f04f 0100 	mov.w	r1, #0
 800f6fe:	bf0c      	ite	eq
 800f700:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f704:	2340      	movne	r3, #64	; 0x40
 800f706:	2000      	movs	r0, #0
 800f708:	6031      	str	r1, [r6, #0]
 800f70a:	602b      	str	r3, [r5, #0]
 800f70c:	b016      	add	sp, #88	; 0x58
 800f70e:	bd70      	pop	{r4, r5, r6, pc}
 800f710:	466a      	mov	r2, sp
 800f712:	f000 f879 	bl	800f808 <_fstat_r>
 800f716:	2800      	cmp	r0, #0
 800f718:	dbec      	blt.n	800f6f4 <__swhatbuf_r+0x12>
 800f71a:	9901      	ldr	r1, [sp, #4]
 800f71c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f720:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f724:	4259      	negs	r1, r3
 800f726:	4159      	adcs	r1, r3
 800f728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f72c:	e7eb      	b.n	800f706 <__swhatbuf_r+0x24>

0800f72e <__smakebuf_r>:
 800f72e:	898b      	ldrh	r3, [r1, #12]
 800f730:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f732:	079d      	lsls	r5, r3, #30
 800f734:	4606      	mov	r6, r0
 800f736:	460c      	mov	r4, r1
 800f738:	d507      	bpl.n	800f74a <__smakebuf_r+0x1c>
 800f73a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f73e:	6023      	str	r3, [r4, #0]
 800f740:	6123      	str	r3, [r4, #16]
 800f742:	2301      	movs	r3, #1
 800f744:	6163      	str	r3, [r4, #20]
 800f746:	b002      	add	sp, #8
 800f748:	bd70      	pop	{r4, r5, r6, pc}
 800f74a:	ab01      	add	r3, sp, #4
 800f74c:	466a      	mov	r2, sp
 800f74e:	f7ff ffc8 	bl	800f6e2 <__swhatbuf_r>
 800f752:	9900      	ldr	r1, [sp, #0]
 800f754:	4605      	mov	r5, r0
 800f756:	4630      	mov	r0, r6
 800f758:	f7ff faf6 	bl	800ed48 <_malloc_r>
 800f75c:	b948      	cbnz	r0, 800f772 <__smakebuf_r+0x44>
 800f75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f762:	059a      	lsls	r2, r3, #22
 800f764:	d4ef      	bmi.n	800f746 <__smakebuf_r+0x18>
 800f766:	f023 0303 	bic.w	r3, r3, #3
 800f76a:	f043 0302 	orr.w	r3, r3, #2
 800f76e:	81a3      	strh	r3, [r4, #12]
 800f770:	e7e3      	b.n	800f73a <__smakebuf_r+0xc>
 800f772:	89a3      	ldrh	r3, [r4, #12]
 800f774:	6020      	str	r0, [r4, #0]
 800f776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f77a:	81a3      	strh	r3, [r4, #12]
 800f77c:	9b00      	ldr	r3, [sp, #0]
 800f77e:	6163      	str	r3, [r4, #20]
 800f780:	9b01      	ldr	r3, [sp, #4]
 800f782:	6120      	str	r0, [r4, #16]
 800f784:	b15b      	cbz	r3, 800f79e <__smakebuf_r+0x70>
 800f786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f78a:	4630      	mov	r0, r6
 800f78c:	f000 f84e 	bl	800f82c <_isatty_r>
 800f790:	b128      	cbz	r0, 800f79e <__smakebuf_r+0x70>
 800f792:	89a3      	ldrh	r3, [r4, #12]
 800f794:	f023 0303 	bic.w	r3, r3, #3
 800f798:	f043 0301 	orr.w	r3, r3, #1
 800f79c:	81a3      	strh	r3, [r4, #12]
 800f79e:	89a3      	ldrh	r3, [r4, #12]
 800f7a0:	431d      	orrs	r5, r3
 800f7a2:	81a5      	strh	r5, [r4, #12]
 800f7a4:	e7cf      	b.n	800f746 <__smakebuf_r+0x18>

0800f7a6 <_raise_r>:
 800f7a6:	291f      	cmp	r1, #31
 800f7a8:	b538      	push	{r3, r4, r5, lr}
 800f7aa:	4604      	mov	r4, r0
 800f7ac:	460d      	mov	r5, r1
 800f7ae:	d904      	bls.n	800f7ba <_raise_r+0x14>
 800f7b0:	2316      	movs	r3, #22
 800f7b2:	6003      	str	r3, [r0, #0]
 800f7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7b8:	bd38      	pop	{r3, r4, r5, pc}
 800f7ba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f7bc:	b112      	cbz	r2, 800f7c4 <_raise_r+0x1e>
 800f7be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f7c2:	b94b      	cbnz	r3, 800f7d8 <_raise_r+0x32>
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	f000 f853 	bl	800f870 <_getpid_r>
 800f7ca:	462a      	mov	r2, r5
 800f7cc:	4601      	mov	r1, r0
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7d4:	f000 b83a 	b.w	800f84c <_kill_r>
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d00a      	beq.n	800f7f2 <_raise_r+0x4c>
 800f7dc:	1c59      	adds	r1, r3, #1
 800f7de:	d103      	bne.n	800f7e8 <_raise_r+0x42>
 800f7e0:	2316      	movs	r3, #22
 800f7e2:	6003      	str	r3, [r0, #0]
 800f7e4:	2001      	movs	r0, #1
 800f7e6:	e7e7      	b.n	800f7b8 <_raise_r+0x12>
 800f7e8:	2400      	movs	r4, #0
 800f7ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	4798      	blx	r3
 800f7f2:	2000      	movs	r0, #0
 800f7f4:	e7e0      	b.n	800f7b8 <_raise_r+0x12>
	...

0800f7f8 <raise>:
 800f7f8:	4b02      	ldr	r3, [pc, #8]	; (800f804 <raise+0xc>)
 800f7fa:	4601      	mov	r1, r0
 800f7fc:	6818      	ldr	r0, [r3, #0]
 800f7fe:	f7ff bfd2 	b.w	800f7a6 <_raise_r>
 800f802:	bf00      	nop
 800f804:	20000084 	.word	0x20000084

0800f808 <_fstat_r>:
 800f808:	b538      	push	{r3, r4, r5, lr}
 800f80a:	4d07      	ldr	r5, [pc, #28]	; (800f828 <_fstat_r+0x20>)
 800f80c:	2300      	movs	r3, #0
 800f80e:	4604      	mov	r4, r0
 800f810:	4608      	mov	r0, r1
 800f812:	4611      	mov	r1, r2
 800f814:	602b      	str	r3, [r5, #0]
 800f816:	f7f1 f8fe 	bl	8000a16 <_fstat>
 800f81a:	1c43      	adds	r3, r0, #1
 800f81c:	d102      	bne.n	800f824 <_fstat_r+0x1c>
 800f81e:	682b      	ldr	r3, [r5, #0]
 800f820:	b103      	cbz	r3, 800f824 <_fstat_r+0x1c>
 800f822:	6023      	str	r3, [r4, #0]
 800f824:	bd38      	pop	{r3, r4, r5, pc}
 800f826:	bf00      	nop
 800f828:	200084e8 	.word	0x200084e8

0800f82c <_isatty_r>:
 800f82c:	b538      	push	{r3, r4, r5, lr}
 800f82e:	4d06      	ldr	r5, [pc, #24]	; (800f848 <_isatty_r+0x1c>)
 800f830:	2300      	movs	r3, #0
 800f832:	4604      	mov	r4, r0
 800f834:	4608      	mov	r0, r1
 800f836:	602b      	str	r3, [r5, #0]
 800f838:	f7f1 f8fd 	bl	8000a36 <_isatty>
 800f83c:	1c43      	adds	r3, r0, #1
 800f83e:	d102      	bne.n	800f846 <_isatty_r+0x1a>
 800f840:	682b      	ldr	r3, [r5, #0]
 800f842:	b103      	cbz	r3, 800f846 <_isatty_r+0x1a>
 800f844:	6023      	str	r3, [r4, #0]
 800f846:	bd38      	pop	{r3, r4, r5, pc}
 800f848:	200084e8 	.word	0x200084e8

0800f84c <_kill_r>:
 800f84c:	b538      	push	{r3, r4, r5, lr}
 800f84e:	4d07      	ldr	r5, [pc, #28]	; (800f86c <_kill_r+0x20>)
 800f850:	2300      	movs	r3, #0
 800f852:	4604      	mov	r4, r0
 800f854:	4608      	mov	r0, r1
 800f856:	4611      	mov	r1, r2
 800f858:	602b      	str	r3, [r5, #0]
 800f85a:	f7f1 f87b 	bl	8000954 <_kill>
 800f85e:	1c43      	adds	r3, r0, #1
 800f860:	d102      	bne.n	800f868 <_kill_r+0x1c>
 800f862:	682b      	ldr	r3, [r5, #0]
 800f864:	b103      	cbz	r3, 800f868 <_kill_r+0x1c>
 800f866:	6023      	str	r3, [r4, #0]
 800f868:	bd38      	pop	{r3, r4, r5, pc}
 800f86a:	bf00      	nop
 800f86c:	200084e8 	.word	0x200084e8

0800f870 <_getpid_r>:
 800f870:	f7f1 b868 	b.w	8000944 <_getpid>

0800f874 <_init>:
 800f874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f876:	bf00      	nop
 800f878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f87a:	bc08      	pop	{r3}
 800f87c:	469e      	mov	lr, r3
 800f87e:	4770      	bx	lr

0800f880 <_fini>:
 800f880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f882:	bf00      	nop
 800f884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f886:	bc08      	pop	{r3}
 800f888:	469e      	mov	lr, r3
 800f88a:	4770      	bx	lr
